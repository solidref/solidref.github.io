{"name":"Python","code":"python","ext":"py","birth":1991,"death":"N/A","inspiredBy":["abc","c","modula-3","smalltalk","unix-shell","algol-68"],"inspiring":["coffeescript","groovy","javascript","julia","ruby","swift"],"description":"Python is a high-level, interpreted, general-purpose programming language. Designed by Guido van Rossum and first\nreleased in 1991, Python's design philosophy emphasizes code readability with its notable use of significant\nwhitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code\nfor small and large-scale projects. Python is dynamically typed and garbage-collected. It supports multiple\nprogramming paradigms, including structured (particularly procedural), object-oriented, and functional programming.\nPython is widely used for web development, data analysis, artificial intelligence, scientific computing, and\nsystem scripting. The extensive standard library, large ecosystem of third-party packages, and active community\nmake Python a popular choice among programmers worldwide.\n","patterns":{"patterns_behavioural":[{"title":"Chain Of Responsibility","examples":[{"codeFile":"patterns/behavioural/chain-of-responsibility/example","code":"class SupportHandler:\n    def set_next_handler(self, handler):\n        pass\n\n    def handle_request(self, request):\n        pass\n\nclass Level1Support(SupportHandler):\n    def __init__(self):\n        self.next_handler = None\n\n    def set_next_handler(self, handler):\n        self.next_handler = handler\n\n    def handle_request(self, request):\n        if 'basic' in request:\n            return 'Level 1 Support: Issue resolved at basic level.'\n        elif self.next_handler is not None:\n            return self.next_handler.handle_request(request)\n        else:\n            return None  # No more handlers in the chain\n\nclass Level2Support(SupportHandler):\n    def __init__(self):\n        self.next_handler = None\n\n    def set_next_handler(self, handler):\n        self.next_handler = handler\n\n    def handle_request(self, request):\n        if 'advanced' in request:\n            return 'Level 2 Support: Issue resolved at advanced level.'\n        elif self.next_handler is not None:\n            return self.next_handler.handle_request(request)\n        else:\n            return None  # No more handlers in the chain\n\nclass Level3Support(SupportHandler):\n    def handle_request(self, request):\n        if 'bug' in request:\n            return 'Level 3 Support: Issue resolved at development level.'\n        else:\n            return 'Level 3 Support: Unable to resolve the issue.'\n\n    def set_next_handler(self, handler):\n        raise Exception('Level 3 Support is the highest level and does not have a next handler.')\n\ndef main():\n    # Create instances of support handlers\n    level1 = Level1Support()\n    level2 = Level2Support()\n    level3 = Level3Support()\n\n    # Chain the handlers together\n    level1.set_next_handler(level2)\n    level2.set_next_handler(level3)\n\n    # Simulate support requests\n    request1 = 'Fix basic login issue'\n    request2 = 'Debug advanced performance problem'\n    request3 = 'Investigate bug causing application crash'\n\n    # Process requests through the chain of responsibility\n    print(level1.handle_request(request1))  # Output: Level 1 Support: Issue resolved at basic level.\n    print(level1.handle_request(request2))  # Output: Level 2 Support: Issue resolved at advanced level.\n    print(level1.handle_request(request3))  # Output: Level 3 Support: Issue resolved at development level.\n\nif __name__ == '__main__':\n    main()"}]},{"title":"Command","examples":[{"codeFile":"patterns/behavioural/command/example","code":"from abc import ABC, abstractmethod\n\n# Define the command interface\nclass Command(ABC):\n    @abstractmethod\n    def execute(self):\n        pass\n\n# Receiver class that performs the actual actions\nclass Light:\n    def turnOn(self):\n        print('Light is on')\n    \n    def turnOff(self):\n        print('Light is off')\n\n# Concrete command to turn on the light\nclass TurnOnCommand(Command):\n    def __init__(self, light: Light):\n        self.light = light\n    \n    def execute(self):\n        self.light.turnOn()\n\n# Concrete command to turn off the light\nclass TurnOffCommand(Command):\n    def __init__(self, light: Light):\n        self.light = light\n    \n    def execute(self):\n        self.light.turnOff()\n\n# Invoker class that triggers the commands\nclass RemoteControl:\n    def __init__(self):\n        self.commands = []\n    \n    def addCommand(self, command: Command):\n        self.commands.append(command)\n    \n    def executeCommands(self):\n        for command in self.commands:\n            command.execute()\n\n# Client code\ndef main():\n    # Create a light\n    light = Light()\n\n    # Create commands for turning the light on and off\n    turnOnCommand = TurnOnCommand(light)\n    turnOffCommand = TurnOffCommand(light)\n\n    # Create a remote control and add the commands\n    remoteControl = RemoteControl()\n    remoteControl.addCommand(turnOnCommand)\n    remoteControl.addCommand(turnOffCommand)\n\n    # Press the buttons on the remote control to execute the commands\n    remoteControl.executeCommands()\n\n# This code demonstrates how the Command pattern can be used in a remote control\n# system to control a light. The Command interface defines the contract for executing\n# commands, and concrete command classes (TurnOnCommand and TurnOffCommand) encapsulate\n# the actions to be performed on the Light receiver object. The RemoteControl acts as\n# the invoker, which holds and triggers the commands. Pressing buttons on the remote\n# control executes the corresponding commands, resulting in the light being turned on\n# and off."}]},{"title":"Iterator","examples":[{"codeFile":"patterns/behavioural/iterator/example","code":"class Iterator:\n    def __init__(self, collection):\n        self.collection = collection\n        self.index = 0\n\n    def next(self):\n        try:\n            value = self.collection[self.index]\n            self.index += 1\n            return value\n        except IndexError:\n            raise StopIteration\n\n    def hasNext(self):\n        return self.index < len(self.collection)\n\n# Client code\nitems = [1, 'two', 3, 'four', 5]\niterator = Iterator(items)\n\nwhile iterator.hasNext():\n    print(iterator.next())\n\n# In the python version, __iter__() and __next__() methods make use of Python's iteration protocol.\n# Thus, we embraced Python's capabilities for iteration, which makes the code idiomatic and pythonic."}]},{"title":"Mediator","examples":[{"codeFile":"patterns/behavioural/mediator/example","code":"class ChatMediator:\n    def send_message(self, message, user):\n        pass\n\nclass ChatRoom(ChatMediator):\n    def send_message(self, message, user):\n        print(f\"[{user.get_name()}] sends message: {message}\")\n\nclass User:\n    def send(self, message):\n        pass\n\n    def receive(self, message):\n        pass\n\n    def get_name(self):\n        pass\n\nclass ChatUser(User):\n    def __init__(self, name, mediator):\n        self.name = name\n        self.mediator = mediator\n\n    def send(self, message):\n        print(f\"[{self.name}] sends message: {message}\")\n        self.mediator.send_message(message, self)\n\n    def receive(self, message):\n        print(f\"[{self.name}] received message: {message}\")\n\n    def get_name(self):\n        return self.name\n\ndef main():\n    chat_mediator = ChatRoom()\n\n    user1 = ChatUser('User1', chat_mediator)\n    user2 = ChatUser('User2', chat_mediator)\n\n    user1.send('Hello, User2!')\n    user2.send('Hi, User1!')\n\nif __name__ == '__main__':\n    main()"}]},{"title":"Memento","examples":[{"codeFile":"patterns/behavioural/memento/example","code":"class Editor:\n    def __init__(self, text):\n        self.text = text\n\n    def setText(self, text):\n        self.text = text\n\n    def getText(self):\n        return self.text\n\n    # Creates a memento containing the current state of the editor\n    def save(self):\n        return Memento(self.text)\n\n    # Restores the editor's state from a memento\n    def restore(self, memento):\n        self.text = memento.getState()\n\nclass Memento:\n    def __init__(self, state):\n        self.state = state\n\n    def getState(self):\n        return self.state\n\nclass History:\n    def __init__(self):\n        self.mementos = []\n\n    # Adds a memento to the history\n    def addMemento(self, memento):\n        self.mementos.append(memento)\n\n    # Retrieves the most recent memento from the history\n    def getLatestMemento(self):\n        if not self.mementos:\n            raise ValueError(\"No mementos available\")\n        return self.mementos[-1]\n\ndef main():\n    editor = Editor(\"Initial text\")\n    history = History()\n\n    # Add a memento to the history\n    history.addMemento(editor.save())\n\n    # Modify the text\n    editor.setText(\"Modified text\")\n\n    # Add another memento to the history\n    history.addMemento(editor.save())\n\n    # Restore the editor's state to a previous memento\n    editor.restore(history.getLatestMemento())\n\n    print(editor.getText())  # Output: Modified text (restored from the previous state)\n\n# In this example, the Editor class represents an object whose state can be modified. The save\n# method creates a memento containing the current state of the editor, and the restore method\n# restores the editor's state from a given memento.\n#\n# The Memento class represents the stored state of the editor at a particular point in time.\n#\n# The History class is responsible for maintaining a list of mementos. It provides methods\n# to add a memento to the history and retrieve the most recent memento.\n#\n# In the client code, we create an editor object and a history object. We modify the editor's\n# state, save it to a memento, modify it again, and then restore it to the previous state using\n# the memento stored in the history.\n\nif __name__ == \"__main__\":\n    main()"}]},{"title":"Observer","examples":[{"codeFile":"patterns/behavioural/observer/example","code":"from abc import ABC, abstractmethod\nfrom typing import Any, List\n\nclass Subject(ABC):\n    @abstractmethod\n    def subscribe(self, observer: 'Observer') -> None:\n        pass\n\n    @abstractmethod\n    def unsubscribe(self, observer: 'Observer') -> None:\n        pass\n\n    @abstractmethod\n    def notify(self, data: Any) -> None:\n        pass\n\nclass ConcreteSubject(Subject):\n    def __init__(self) -> None:\n        self.observers: List[Observer] = []\n\n    def subscribe(self, observer: 'Observer') -> None:\n        self.observers.append(observer)\n\n    def unsubscribe(self, observer: 'Observer') -> None:\n        if observer in self.observers:\n            self.observers.remove(observer)\n\n    def notify(self, data: Any) -> None:\n        for observer in self.observers:\n            observer.update(data)\n\nclass Observer(ABC):\n    @abstractmethod\n    def update(self, data: Any) -> None:\n        pass\n\nclass ConcreteObserver(Observer):\n    def update(self, data: Any) -> None:\n        print(f\"Observer received data: {data}\")\n\n# Client code\nsubject = ConcreteSubject()\nobserver1 = ConcreteObserver()\nobserver2 = ConcreteObserver()\n\nsubject.subscribe(observer1)\nsubject.subscribe(observer2)\n\nsubject.notify('Hello Observers!')\n\nsubject.unsubscribe(observer2)\nsubject.notify('Goodbye Observers!')"}]},{"title":"State","examples":[{"codeFile":"patterns/behavioural/state/example","code":"from threading import Timer\n\nclass TrafficLightState:\n    def change_state(self, traffic_light):\n        pass\n\nclass RedState(TrafficLightState):\n    def change_state(self, traffic_light):\n        print(\"Traffic light is now RED. Stop!\")\n        # Transition to the next state (Yellow) after a certain duration\n        Timer(3.0, lambda: traffic_light.set_state(YellowState())).start()\n\nclass YellowState(TrafficLightState):\n    def change_state(self, traffic_light):\n        print(\"Traffic light is now YELLOW. Prepare to stop or proceed with caution.\")\n        # Transition to the next state (Green) after a certain duration\n        Timer(2.0, lambda: traffic_light.set_state(GreenState())).start()\n\nclass GreenState(TrafficLightState):\n    def change_state(self, traffic_light):\n        print(\"Traffic light is now GREEN. Go!\")\n        # Transition to the next state (Red) after a certain duration\n        Timer(4.0, lambda: traffic_light.set_state(RedState())).start()\n\nclass TrafficLight:\n    def __init__(self):\n        # Initial state is Red\n        self.state = RedState()\n\n    def set_state(self, state):\n        self.state = state\n        self.state.change_state(self)\n\ndef main():\n    traffic_light = TrafficLight()\n    # Simulate traffic light behavior by changing its state\n    traffic_light.set_state(GreenState())\n\nif __name__ == \"__main__\":\n    main()"}]},{"title":"Strategy","examples":[{"codeFile":"patterns/behavioural/strategy/example","code":"from abc import ABC, abstractmethod\n\nclass PaymentStrategy(ABC):\n    @abstractmethod\n    def pay(self, amount: int) -> None:\n        pass\n\nclass CreditCardPaymentStrategy(PaymentStrategy):\n    def __init__(self, card_number: str, expiry_date: str, cvv: str):\n        self.card_number = card_number\n        self.expiry_date = expiry_date\n        self.cvv = cvv\n\n    def pay(self, amount: int) -> None:\n        print(f\"Processing credit card payment of ${amount} with card number {self.card_number}\")\n        # Logic to process payment via credit card\n\nclass PayPalPaymentStrategy(PaymentStrategy):\n    def __init__(self, email: str, password: str):\n        self.email = email\n        self.password = password\n\n    def pay(self, amount: int) -> None:\n        print(f\"Processing PayPal payment of ${amount} with email {self.email}\")\n        # Logic to process payment via PayPal\n\nclass PaymentProcessor:\n    def __init__(self):\n        self.payment_strategy = None\n\n    def set_payment_strategy(self, payment_strategy: PaymentStrategy):\n        self.payment_strategy = payment_strategy\n\n    def process_payment(self, amount: int):\n        if self.payment_strategy:\n            self.payment_strategy.pay(amount)\n        else:\n            print(\"Payment strategy not set. Please select a payment method.\")\n\ndef main():\n    payment_processor = PaymentProcessor()\n\n    credit_card_strategy = CreditCardPaymentStrategy(\"1234 5678 9012 3456\", \"12/25\", \"123\")\n    payment_processor.set_payment_strategy(credit_card_strategy)\n    payment_processor.process_payment(100)\n\n    pay_pal_strategy = PayPalPaymentStrategy(\"example@example.com\", \"password\")\n    payment_processor.set_payment_strategy(pay_pal_strategy)\n    payment_processor.process_payment(50)\n\nif __name__ == \"__main__\":\n    main()"}]},{"title":"Template Method","examples":[{"codeFile":"patterns/behavioural/template-method/example","code":"from abc import ABC, abstractmethod\n\nclass Breakfast(ABC):\n    # Template method\n    def prepare(self):\n        self.boilWater()\n        self.addIngredients()\n        self.cook()\n        self.serve()\n\n    # Abstract methods to be implemented by subclasses\n    @abstractmethod\n    def addIngredients(self):\n        pass\n\n    @abstractmethod\n    def cook(self):\n        pass\n\n    # Concrete methods\n    def boilWater(self):\n        print(\"Boiling water...\")\n\n    def serve(self):\n        print(\"Breakfast is served!\")\n\nclass OmeletteBreakfast(Breakfast):\n    def addIngredients(self):\n        print(\"Adding eggs, cheese, and vegetables to the pan.\")\n\n    def cook(self):\n        print(\"Cooking the omelette until golden brown.\")\n\nclass PancakeBreakfast(Breakfast):\n    def addIngredients(self):\n        print(\"Mixing flour, eggs, milk, and sugar to make the batter.\")\n\n    def cook(self):\n        print(\"Pouring the batter onto the griddle and flipping until cooked.\")\n\n# Client code\nprint(\"Preparing Omelette Breakfast:\")\nomeletteBreakfast = OmeletteBreakfast()\nomeletteBreakfast.prepare()\n\nprint(\"\\nPreparing Pancake Breakfast:\")\npancakeBreakfast = PancakeBreakfast()\npancakeBreakfast.prepare()"}]},{"title":"Visitor","examples":[{"codeFile":"patterns/behavioural/visitor/example","code":"class AnimalVisitor:\n    def visit_lion(self, lion):\n        pass\n\n    def visit_elephant(self, elephant):\n        pass\n\n    def visit_giraffe(self, giraffe):\n        pass\n\nclass AnimalFeeder(AnimalVisitor):\n    def visit_lion(self, lion):\n        print(f\"Feeding meat to {lion.get_name()}.\")\n\n    def visit_elephant(self, elephant):\n        print(f\"Feeding hay to {elephant.get_name()}.\")\n\n    def visit_giraffe(self, giraffe):\n        print(f\"Feeding leaves to {giraffe.get_name()}.\")\n\nclass Animal:\n    def accept(self, visitor: AnimalVisitor):\n        pass\n\nclass Lion(Animal):\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name\n\n    def accept(self, visitor: AnimalVisitor):\n        visitor.visit_lion(self)\n\nclass Elephant(Animal):\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name\n\n    def accept(self, visitor: AnimalVisitor):\n        visitor.visit_elephant(self)\n\nclass Giraffe(Animal):\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name\n\n    def accept(self, visitor: AnimalVisitor):\n        visitor.visit_giraffe(self)\n\nclass Zoo:\n    def __init__(self):\n        self.animals = []\n\n    def add_animal(self, animal):\n        self.animals.append(animal)\n\n    def perform_operation(self, visitor: AnimalVisitor):\n        for animal in self.animals:\n            animal.accept(visitor)\n\n# Client code\nzoo = Zoo()\nzoo.add_animal(Lion(\"Simba\"))\nzoo.add_animal(Elephant(\"Dumbo\"))\nzoo.add_animal(Giraffe(\"Melman\"))\n\nfeeder = AnimalFeeder()\nzoo.perform_operation(feeder)"}]}],"patterns_creational":[{"title":"Factory Method","examples":[{"codeFile":"patterns/creational/factory-method/example","code":"from abc import ABC, abstractmethod\n\n# Product interface: Vehicle\nclass Vehicle(ABC):\n    @abstractmethod\n    def drive(self):\n        pass\n\n# Concrete Products: Car and Truck\nclass Car(Vehicle):\n    def drive(self):\n        print(\"Driving a car...\")\n\nclass Truck(Vehicle):\n    def drive(self):\n        print(\"Driving a truck...\")\n\n# Creator: VehicleFactory\nclass VehicleFactory(ABC):\n    @abstractmethod\n    def create_vehicle(self):\n        pass\n    \n    # An operation that uses the factory method\n    def deliver_vehicle(self):\n        vehicle = self.create_vehicle()\n        print(\"Delivering the vehicle...\")\n        vehicle.drive()\n\n# Concrete Creators: CarFactory and TruckFactory\nclass CarFactory(VehicleFactory):\n    # Factory Method implementation for creating a car\n    def create_vehicle(self):\n        print(\"Creating a car...\")\n        return Car()\n\nclass TruckFactory(VehicleFactory):\n    # Factory Method implementation for creating a truck\n    def create_vehicle(self):\n        print(\"Creating a truck...\")\n        return Truck()\n\n# Client code\ncar_factory = CarFactory()\ncar_factory.deliver_vehicle()\n\ntruck_factory = TruckFactory()\ntruck_factory.deliver_vehicle()\n\n\"\"\"\nThe Vehicle interface defines a common interface for all vehicles, which includes a drive() method.\n\nThe Car and Truck classes are concrete implementations of the Vehicle interface.\n\nThe VehicleFactory class is an abstract class representing a creator. It declares the create_vehicle()\nmethod, which serves as the Factory Method for creating vehicles. The deliver_vehicle() method is a\ncommon operation that uses the Factory Method to create and deliver a vehicle.\n\nThe CarFactory and TruckFactory classes are concrete implementations of the VehicleFactory class.\nThey override the create_vehicle() method to create specific types of vehicles (i.e., cars and trucks).\n\"\"\""}]},{"title":"Abstract Factory","examples":[{"codeFile":"patterns/creational/abstract-factory/example","code":"class FurnitureFactory:\n    def create_chair(self):\n        raise NotImplementedError\n\n    def create_table(self):\n        raise NotImplementedError\n\n\nclass ModernFurnitureFactory(FurnitureFactory):\n    def create_chair(self):\n        return ModernChair()\n\n    def create_table(self):\n        return ModernTable()\n\n\nclass VintageFurnitureFactory(FurnitureFactory):\n    def create_chair(self):\n        return VintageChair()\n\n    def create_table(self):\n        return VintageTable()\n\n\nclass Chair:\n    def sit_on(self):\n        raise NotImplementedError\n\n\nclass ModernChair(Chair):\n    def sit_on(self):\n        print(\"Sitting on a modern chair.\")\n\n\nclass VintageChair(Chair):\n    def sit_on(self):\n        print(\"Sitting on a vintage chair.\")\n\n\nclass Table:\n    def put_on(self):\n        raise NotImplementedError\n\n\nclass ModernTable(Table):\n    def put_on(self):\n        print(\"Putting something on a modern table.\")\n\n\nclass VintageTable(Table):\n    def put_on(self):\n        print(\"Putting something on a vintage table.\")\n\n\ndef create_furniture(factory):\n    chair = factory.create_chair()\n    table = factory.create_table()\n\n    print(\"Created furniture:\")\n    chair.sit_on()\n    table.put_on()\n\n\nprint(\"Creating modern furniture:\")\ncreate_furniture(ModernFurnitureFactory())\n\nprint(\"\\nCreating vintage furniture:\")\ncreate_furniture(VintageFurnitureFactory())\n\n# The code has been adapted to Python, following its idioms and conventions.\n# This includes using class inheritance, method overloading, and Python's print function for output.\n# The design pattern remains essentially the same, illustrating the Abstract Factory pattern wherein\n# a client can create families of related objects without specifying their concrete classes."}]},{"title":"Builder","examples":[{"codeFile":"patterns/creational/builder/example","code":"class Computer:\n    def __init__(self, cpu=\"\", ram=0, storage=0, gpu=\"\", screen_size=0):\n        self.cpu = cpu\n        self.ram = ram\n        self.storage = storage\n        self.gpu = gpu\n        self.screen_size = screen_size\n\n    def display_specs(self):\n        print(f\"CPU: {self.cpu}\")\n        print(f\"RAM: {self.ram} GB\")\n        print(f\"Storage: {self.storage} GB\")\n        print(f\"GPU: {self.gpu}\")\n        print(f\"Screen Size: {self.screen_size} inches\")\n\nclass ComputerBuilder:\n    def set_cpu(self, cpu): raise NotImplementedError\n    def set_ram(self, ram): raise NotImplementedError\n    def set_storage(self, storage): raise NotImplementedError\n    def set_gpu(self, gpu): raise NotImplementedError\n    def set_screen_size(self, screen_size): raise NotImplementedError\n    def get_result(self): raise NotImplementedError\n\nclass GamingComputerBuilder(ComputerBuilder):\n    def __init__(self):\n        self.computer = Computer()\n\n    def set_cpu(self, cpu):\n        self.computer.cpu = cpu\n        return self\n\n    def set_ram(self, ram):\n        self.computer.ram = ram\n        return self\n\n    def set_storage(self, storage):\n        self.computer.storage = storage\n        return self\n\n    def set_gpu(self, gpu):\n        self.computer.gpu = gpu\n        return self\n\n    def set_screen_size(self, screen_size):\n        self.computer.screen_size = screen_size\n        return self\n\n    def get_result(self):\n        return self.computer\n\nclass ComputerBuilderDirector:\n    def __init__(self, builder):\n        self.builder = builder\n\n    def construct_gaming_computer(self):\n        self.builder.set_cpu(\"Intel Core i9\").\\\n            set_ram(32).\\\n            set_storage(1000).\\\n            set_gpu(\"NVIDIA GeForce RTX 3080\").\\\n            set_screen_size(27)\n\n# Client code\ngaming_computer_builder = GamingComputerBuilder()\ndirector = ComputerBuilderDirector(gaming_computer_builder)\ndirector.construct_gaming_computer()\ngaming_computer = gaming_computer_builder.get_result()\nprint(\"Gaming Computer Specifications:\")\ngaming_computer.display_specs()"}]},{"title":"Prototype","examples":[{"codeFile":"patterns/creational/prototype/example","code":"class UserProfile:\n    def clone(self):\n        pass\n\n    def customize_profile(self, settings):\n        pass\n\n    def display_profile(self):\n        pass\n\n\nclass DefaultUserProfile(UserProfile):\n    def __init__(self, username, bio, profile_picture):\n        self.username = username\n        self.bio = bio\n        self.profile_picture = profile_picture\n\n    def clone(self):\n        return DefaultUserProfile(self.username, self.bio, self.profile_picture)\n\n    def customize_profile(self, settings):\n        self.username = settings.get('username', self.username)\n        self.bio = settings.get('bio', self.bio)\n        self.profile_picture = settings.get('profile_picture', self.profile_picture)\n\n    def display_profile(self):\n        print(\"Username:\", self.username)\n        print(\"Bio:\", self.bio)\n        print(\"Profile Picture:\", self.profile_picture)\n\n\n# Client code\ndefault_profile = DefaultUserProfile(\"user123\", \"Welcome to my profile!\", \"default.jpg\")\n\n# Clone the default profile to create a customized profile\ncustomized_profile = default_profile.clone()\ncustomized_profile.customize_profile({'bio': \"I'm a software developer.\", 'profile_picture': \"avatar.jpg\"})\n\n# Display both profiles\nprint(\"Default Profile:\")\ndefault_profile.display_profile()\n\nprint(\"\\nCustomized Profile:\")\ncustomized_profile.display_profile()"}]},{"title":"Singleton","examples":[{"codeFile":"patterns/creational/singleton/example","code":"class Logger:\n    _instance = None\n\n    def __new__(cls):\n        if cls._instance is None:\n            cls._instance = super(Logger, cls).__new__(cls)\n            cls._instance.logHistory = []\n        return cls._instance\n\n    def log(self, message):\n        timestamp = datetime.datetime.now().isoformat()\n        logEntry = f\"[{timestamp}] {message}\"\n        self.logHistory.append(logEntry)\n        print(logEntry)\n\n    def getLogHistory(self):\n        return self.logHistory\n\nimport datetime\n\n# Client code\nlogger1 = Logger()\nlogger2 = Logger()\n\nprint(logger1 == logger2)  # Output: True, both references point to the same instance\n\nlogger1.log(\"User logged in\")\nlogger2.log(\"Data saved to database\")\n\nprint(logger1.getLogHistory())"}]}],"patterns_structural":[{"title":"Adapter","examples":[{"codeFile":"patterns/structural/adapter/example","code":"class Mp3Player:\n    def play_mp3(self, file_name):\n        print(f\"Playing MP3 file: {file_name}\")\n\nclass AudioPlayer:\n    def play(self, file_name):\n        pass\n\nclass OggToMp3Adapter(AudioPlayer):\n    def __init__(self):\n        self.mp3_player = Mp3Player()\n\n    def play(self, file_name):\n        # Convert OGG to MP3 and play using the MP3 player\n        print(f\"Converting OGG file '{file_name}' to MP3 format\")\n        mp3_file_name = self._convert_to_mp3(file_name)\n        self.mp3_player.play_mp3(mp3_file_name)\n\n    def _convert_to_mp3(self, file_name):\n        # Simulate conversion process (replace extension)\n        return file_name.replace('.ogg', '.mp3')\n\n# Client code\naudio_player = OggToMp3Adapter()\n\n# Play MP3 file\naudio_player.play('audio1.mp3')\n\n# Play OGG file (automatically converted to MP3)\naudio_player.play('audio2.ogg')"}]},{"title":"Bridge","examples":[{"codeFile":"patterns/structural/bridge/example","code":"from abc import ABC, abstractmethod\n\n# Abstraction: Vehicle\nclass Vehicle(ABC):\n    def __init__(self, workshop):\n        self.workshop = workshop\n\n    @abstractmethod\n    def manufacture(self):\n        pass\n\n# Implementor: Workshop\nclass Workshop(ABC):\n    @abstractmethod\n    def work(self):\n        pass\n\n# Concrete Implementor: Paint Workshop\nclass PaintWorkshop(Workshop):\n    def work(self):\n        print('Painting vehicle')\n\n# Concrete Implementor: Repair Workshop\nclass RepairWorkshop(Workshop):\n    def work(self):\n        print('Repairing vehicle')\n\n# Refined Abstraction: Car\nclass Car(Vehicle):\n    def manufacture(self):\n        print('Manufacturing car.')\n        self.workshop.work()\n\n# Refined Abstraction: Truck\nclass Truck(Vehicle):\n    def manufacture(self):\n        print('Manufacturing truck.')\n        self.workshop.work()\n\n# Client code\ncar = Car(PaintWorkshop())\ncar.manufacture()  # Output: Manufacturing car. Painting vehicle\n\ntruck = Truck(RepairWorkshop())\ntruck.manufacture()  # Output: Manufacturing truck. Repairing vehicle\n\n\"\"\"\nThe Vehicle class represents the abstraction, which is extended by Car and Truck.\n\nThe Workshop interface represents the implementor, defining the work method.\n\nPaintWorkshop and RepairWorkshop are concrete implementations of the Workshop interface.\n\nEach vehicle can be associated with a specific workshop using composition, and it delegates the work to that workshop.\n\"\"\""}]},{"title":"Composite","examples":[{"codeFile":"patterns/structural/composite/example","code":"class Department:\n    def get_name(self):\n        pass\n\n    def get_employees(self):\n        pass\n\nclass IndividualDepartment(Department):\n    def __init__(self, name, employees):\n        self.name = name\n        self.employees = employees\n\n    def get_name(self):\n        return self.name\n\n    def get_employees(self):\n        return self.employees\n\nclass CompositeDepartment(Department):\n    def __init__(self, name):\n        self.name = name\n        self.departments = []\n\n    def get_name(self):\n        return self.name\n\n    def add_department(self, department):\n        self.departments.append(department)\n\n    def remove_department(self, department):\n        self.departments.remove(department)\n\n    def get_employees(self):\n        employees = []\n        for department in self.departments:\n            employees.extend(department.get_employees())\n        return employees\n\n# Client code\nsales_department = IndividualDepartment('Sales Department', ['John', 'Alice', 'Bob'])\nmarketing_department = IndividualDepartment('Marketing Department', ['Emily', 'David'])\nengineering_department = IndividualDepartment('Engineering Department', ['Michael', 'Sarah', 'Chris'])\n\nhead_department = CompositeDepartment('Head Department')\nhead_department.add_department(sales_department)\nhead_department.add_department(marketing_department)\n\nparent_engineering_department = CompositeDepartment('Parent Engineering Department')\nparent_engineering_department.add_department(engineering_department)\n\nroot_department = CompositeDepartment('Root Department')\nroot_department.add_department(head_department)\nroot_department.add_department(parent_engineering_department)\n\n# Get all employees in the root department\nprint('Employees in the root department:')\nprint(root_department.get_employees())\n\n\"\"\"\nThe Department interface in Python is represented as a base class with method declarations. \n\nIndividualDepartment and CompositeDepartment inherit from Department. IndividualDepartment represents a leaf in the composite structure, \nwhile CompositeDepartment can contain other departments, enabling the construction of a composite tree structure.\n\nThis Python version maintains the logic and comments of the original example, \nillustrating how a composite design pattern can be implemented in Python.\n\"\"\""}]},{"title":"Decorator","examples":[{"codeFile":"patterns/structural/decorator/example","code":"from abc import ABC, abstractmethod\n\n# Component: Notification\nclass Notification(ABC):\n    @abstractmethod\n    def send(self) -> str:\n        pass\n\n# Concrete Component: Base Notification\nclass BaseNotification(Notification):\n    def send(self) -> str:\n        return 'Base notification: You have a new message!'\n\n# Decorator: Notification Decorator\nclass NotificationDecorator(Notification):\n    def __init__(self, notification: Notification):\n        self.notification = notification\n\n    def send(self) -> str:\n        return self.notification.send()\n\n# Concrete Decorator: Sound Notification\nclass SoundNotificationDecorator(NotificationDecorator):\n    def send(self) -> str:\n        return f'{super().send()} (Sound notification: Ding!)'\n\n# Concrete Decorator: Priority Notification\nclass PriorityNotificationDecorator(NotificationDecorator):\n    def send(self) -> str:\n        return f'{super().send()} (Priority notification: High priority!)'\n\n# Client code\nbase_notification = BaseNotification()\nprint(base_notification.send())\n\nsound_notification = SoundNotificationDecorator(base_notification)\nprint(sound_notification.send())\n\npriority_notification = PriorityNotificationDecorator(base_notification)\nprint(priority_notification.send())\n\nsound_and_priority_notification = PriorityNotificationDecorator(SoundNotificationDecorator(base_notification))\nprint(sound_and_priority_notification.send())\n\n# The Notification interface defines the common method for sending notifications.\n#\n# BaseNotification represents the base notification without any additional features.\n#\n# NotificationDecorator is an abstract class that serves as the base class for concrete decorators.\n# It holds a reference to the wrapped notification.\n#\n# SoundNotificationDecorator adds sound notification functionality to the base notification.\n#\n# PriorityNotificationDecorator adds priority notification functionality to the base notification.\n#\n# The client code demonstrates how we can dynamically add sound notification, priority notification,\n# or both to the base notification. Each decorator enhances the behavior of the base notification\n# without modifying its implementation."}]},{"title":"Facade","examples":[{"codeFile":"patterns/structural/facade/example","code":"class FlightBookingSystem:\n    def book_flight(self, origin, destination):\n        return f\"Flight booked from {origin} to {destination}\"\n\nclass HotelBookingSystem:\n    def book_hotel(self, location, check_in_date, check_out_date):\n        return f\"Hotel booked at {location} from {check_in_date.strftime('%Y-%m-%d')} to {check_out_date.strftime('%Y-%m-%d')}\"\n\nclass CarRentalSystem:\n    def rent_car(self, location, start_date, end_date):\n        return f\"Car rented at {location} from {start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}\"\n\nclass TravelFacade:\n    def __init__(self):\n        self.flight_booking_system = FlightBookingSystem()\n        self.hotel_booking_system = HotelBookingSystem()\n        self.car_rental_system = CarRentalSystem()\n\n    def book_travel(self, origin, destination, location, check_in_date, check_out_date, start_date, end_date):\n        flight_details = self.flight_booking_system.book_flight(origin, destination)\n        hotel_details = self.hotel_booking_system.book_hotel(location, check_in_date, check_out_date)\n        car_details = self.car_rental_system.rent_car(location, start_date, end_date)\n\n        return f\"{flight_details}\\n{hotel_details}\\n{car_details}\"\n\nfrom datetime import datetime\n\n# Client code\ntravel_facade = TravelFacade()\nbooking_details = travel_facade.book_travel(\n    'New York', 'Los Angeles', 'Hilton', \n    datetime.strptime('2023-12-15', '%Y-%m-%d'), \n    datetime.strptime('2023-12-20', '%Y-%m-%d'), \n    datetime.strptime('2023-12-15', '%Y-%m-%d'), \n    datetime.strptime('2023-12-20', '%Y-%m-%d')\n)\nprint(booking_details)"}]},{"title":"Flyweight","examples":[{"codeFile":"patterns/structural/flyweight/example","code":"class Character:\n    def __init__(self, character):\n        self.character = character\n\n    def display(self, font, size):\n        return f\"Character: {self.character}, Font: {font}, Size: {size}\"\n\nclass CharacterFactory:\n    def __init__(self):\n        self.characters = {}\n\n    def getCharacter(self, character):\n        if character not in self.characters:\n            self.characters[character] = Character(character)\n        return self.characters[character]\n\ncharacterFactory = CharacterFactory()\n\ntext = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n\nrenderedText = []\n\nfor char in text:\n    character = characterFactory.getCharacter(char)\n    renderedText.append(character.display('Arial', 12))  # Assume same font and size for simplicity\n\nprint('\\n'.join(renderedText))\n\n\"\"\"\nThe Character class represents the flyweight object for a character. It contains intrinsic\nstate (the character itself).\n\nThe CharacterFactory class acts as a flyweight factory, creating and managing flyweight\nobjects. It ensures that each character is shared among multiple instances.\n\nIn the client code, we create a text document and render it using flyweight characters.\nInstead of creating a new character object for each character in the text, we retrieve\nexisting flyweight characters from the factory, saving memory and improving performance.\n\"\"\""}]},{"title":"Proxy","examples":[{"codeFile":"patterns/structural/proxy/example","code":"from abc import ABC, abstractmethod\nimport asyncio\n\nclass IHttpServer(ABC):\n    @abstractmethod\n    async def request(self, url: str) -> str:\n        pass\n\nclass HttpServer(IHttpServer):\n    async def request(self, url: str) -> str:\n        # Simulating HTTP request to the actual server\n        return f'Response from server for URL: {url}'\n\nclass ProxyServer(IHttpServer):\n    def __init__(self):\n        self.httpServer = HttpServer()\n\n    async def request(self, url: str) -> str:\n        # Additional logic can be added here, e.g., caching, access control, logging\n        print(f'Proxy: Intercepted request for URL: {url}')\n\n        # Forward the request to the real server\n        response = await self.httpServer.request(url)\n\n        # Additional processing on the response can be done here\n\n        return response\n\nasync def testProxy():\n    proxy = ProxyServer()\n\n    # Client sends a request to the proxy server\n    response = await proxy.request(\"https://example.com\")\n\n    print(response)\n\n# Test the proxy\nasyncio.run(testProxy())"}]}]},"principles":{"principles_solid":[{"title":"Single Responsibility","examples":[{"title":"Good Example","codeFile":"principles/solid/single-responsibility/good-example","code":"class Employee:\n    def __init__(self, name: str, position: str, salary: int):\n        self._name = name\n        self._position = position\n        self._salary = salary\n\n    def get_name(self) -> str:\n        return self._name\n\n    def get_position(self) -> str:\n        return self._position\n\n    def get_salary(self) -> int:\n        return self._salary\n\nclass EmployeePrinter:\n    def print(self, employee: Employee) -> None:\n        print(f\"Name: {employee.get_name()}\")\n        print(f\"Position: {employee.get_position()}\")\n        print(f\"Salary: {employee.get_salary()}\")\n\n# Usage\nemployee = Employee(\"John Doe\", \"Software Engineer\", 50000)\nprinter = EmployeePrinter()\nprinter.print(employee)\n"},{"title":"Bad Example","codeFile":"principles/solid/single-responsibility/bad-example","code":"class Employee:\n    def __init__(self, name: str, position: str, salary: int):\n        self.name = name\n        self.position = position\n        self.salary = salary\n\n    def print(self) -> None:\n        print(f\"Name: {self.name}\")\n        print(f\"Position: {self.position}\")\n        print(f\"Salary: {self.salary}\")\n\n# Usage\nemployee = Employee(\"John Doe\", \"Software Engineer\", 50000)\nemployee.print()\n"}]},{"title":"Open-Closed","examples":[{"title":"Good Example","codeFile":"principles/solid/open-closed/good-example","code":"from abc import ABC, abstractmethod\nimport math\n\nclass Shape(ABC):\n    @abstractmethod\n    def compute_area(self) -> float:\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width: float, height: float):\n        self.width = width\n        self.height = height\n\n    def compute_area(self) -> float:\n        return self.width * self.height\n\nclass Circle(Shape):\n    def __init__(self, radius: float):\n        self.radius = radius\n\n    def compute_area(self) -> float:\n        return math.pi * self.radius ** 2\n\n# Usage\nrectangle = Rectangle(10, 20)\nprint(f\"Rectangle area: {rectangle.compute_area()}\")\n\ncircle = Circle(5)\nprint(f\"Circle area: {circle.compute_area()}\")\n"},{"title":"Bad Example","codeFile":"principles/solid/open-closed/bad-example","code":"class Rectangle:\n    def __init__(self, width: float, height: float):\n        self.width = width\n        self.height = height\n\nclass Circle:\n    def __init__(self, radius: float):\n        self.radius = radius\n\nclass AreaCalculator:\n    def compute_area(self, shape) -> float:\n        if isinstance(shape, Rectangle):\n            return shape.width * shape.height\n        elif isinstance(shape, Circle):\n            return 3.1415 * shape.radius ** 2\n        return 0\n"}]},{"title":"Liskov Substitution","examples":[{"title":"Good Example","codeFile":"principles/solid/liskov-substitution/good-example","code":"from abc import ABC, abstractmethod\n\nclass Bird(ABC):\n    pass\n\nclass FlyingBird(Bird):\n    def fly(self):\n        print(\"This bird is flying\")\n\nclass SwimmingBird(Bird):\n    def swim(self):\n        print(\"This bird is swimming\")\n\nclass Duck(FlyingBird):\n    def quack(self):\n        print(\"Duck is quacking\")\n\nclass Penguin(SwimmingBird):\n    def swim(self):\n        print(\"Penguin is swimming\")\n\ndef make_bird_fly(bird: FlyingBird):\n    bird.fly()\n\ndef make_bird_swim(bird: SwimmingBird):\n    bird.swim()\n\nduck = Duck()\npenguin = Penguin()\n\nmake_bird_fly(duck)    # Correct: Ducks can fly.\nmake_bird_swim(penguin)  # Correct: Penguins can swim.\n"},{"title":"Bad Example","codeFile":"principles/solid/liskov-substitution/bad-example","code":"class Bird:\n    def fly(self):\n        pass  # Implementation of flying\n\nclass Ostrich(Bird):\n    def fly(self):\n        raise Exception(\"Can't fly\")  # Contradicts the superclass's behavior\n"}]},{"title":"Interface Segregation","examples":[{"title":"Good Example","codeFile":"principles/solid/interface-segregation/good-example","code":"from abc import ABC, abstractmethod\n\nclass Printer(ABC):\n    @abstractmethod\n    def print_document(self):\n        pass\n\nclass Fax(ABC):\n    @abstractmethod\n    def fax_document(self):\n        pass\n\nclass Scanner(ABC):\n    @abstractmethod\n    def scan_document(self):\n        pass\n\nclass SimplePrinter(Printer):\n    def print_document(self):\n        print(\"Printing document...\")\n\nclass MultifunctionalPrinter(Printer, Fax, Scanner):\n    def print_document(self):\n        print(\"Printing document...\")\n\n    def fax_document(self):\n        print(\"Faxing document...\")\n\n    def scan_document(self):\n        print(\"Scanning document...\")\n\n# Usage\nsimple_printer = SimplePrinter()\nsimple_printer.print_document()\n\nmultifunctional_printer = MultifunctionalPrinter()\nmultifunctional_printer.print_document()\nmultifunctional_printer.fax_document()\nmultifunctional_printer.scan_document()\n"},{"title":"Bad Example","codeFile":"principles/solid/interface-segregation/bad-example","code":"class Machine:\n    def print_document(self):\n        raise NotImplementedError\n\n    def fax_document(self):\n        raise NotImplementedError\n\n    def scan_document(self):\n        raise NotImplementedError\n\nclass OldPrinter(Machine):\n    def print_document(self):\n        print(\"Printing document...\")\n\n    def fax_document(self):\n        raise Exception(\"This printer cannot fax documents.\")\n\n    def scan_document(self):\n        raise Exception(\"This printer cannot scan documents.\")\n"}]},{"title":"Dependency Inversion","examples":[{"title":"Good Example","codeFile":"principles/solid/interface-segregation/good-example","code":"from abc import ABC, abstractmethod\n\nclass Printer(ABC):\n    @abstractmethod\n    def print_document(self):\n        pass\n\nclass Fax(ABC):\n    @abstractmethod\n    def fax_document(self):\n        pass\n\nclass Scanner(ABC):\n    @abstractmethod\n    def scan_document(self):\n        pass\n\nclass SimplePrinter(Printer):\n    def print_document(self):\n        print(\"Printing document...\")\n\nclass MultifunctionalPrinter(Printer, Fax, Scanner):\n    def print_document(self):\n        print(\"Printing document...\")\n\n    def fax_document(self):\n        print(\"Faxing document...\")\n\n    def scan_document(self):\n        print(\"Scanning document...\")\n\n# Usage\nsimple_printer = SimplePrinter()\nsimple_printer.print_document()\n\nmultifunctional_printer = MultifunctionalPrinter()\nmultifunctional_printer.print_document()\nmultifunctional_printer.fax_document()\nmultifunctional_printer.scan_document()\n"},{"title":"Bad Example","codeFile":"principles/solid/interface-segregation/bad-example","code":"class Machine:\n    def print_document(self):\n        raise NotImplementedError\n\n    def fax_document(self):\n        raise NotImplementedError\n\n    def scan_document(self):\n        raise NotImplementedError\n\nclass OldPrinter(Machine):\n    def print_document(self):\n        print(\"Printing document...\")\n\n    def fax_document(self):\n        raise Exception(\"This printer cannot fax documents.\")\n\n    def scan_document(self):\n        raise Exception(\"This printer cannot scan documents.\")\n"}]}],"principles_other":[{"title":"Don't Repeat Yourself (DRY)","examples":[{"title":"Good Example","codeFile":"principles/other/dry/good-example","code":"# Using default parameters and arrow functions for repeated logic\ndef add_tax(price: float, rate: float = 0.05) -> float:\n    return price + (price * rate)\n"},{"title":"Bad Example","codeFile":"principles/other/dry/bad-example","code":"def add_tax_for_food(price: float) -> float:\n    return price + (price * 0.05)\n\ndef add_tax_for_electronics(price: float) -> float:\n    return price + (price * 0.05)\n"}]},{"title":"Keep It Simple Stupid (KISS)","examples":[{"title":"Good Example","codeFile":"principles/other/kiss/good-example","code":"def is_even(num: float) -> bool:\n   return num % 2 == 0;\n"},{"title":"Bad Example","codeFile":"principles/other/kiss/bad-example","code":"# there is no need for absolute value here\ndef is_even(num: float) -> bool:\n   return num % abs(2) == 0;\n"}]},{"title":"You Aren't Gonna Need It (YAGNI)","examples":[{"codeFile":"principles/other/yagni/bad-example","code":"class Calculator:\n  def add(self, a: float, b : float) -> float:\n    return a + b\n\n  # Do not define methods unless they are used\n\n  def multiply(self, a : float, b : float) -> float:\n    return a * b\n\n  def divide(self, a : float, b : float) -> float:\n    if (b == 0):\n      raise Exception(self, \"Division by zero is not allowed.\")\n    return a / b\n\n  def subtract(self, a : float, b : float) -> float:\n    return a - b\n}\n"}]},{"title":"Law of Demeter (Principle of Least Knowledge)","examples":[{"title":"Good Example","codeFile":"principles/other/demeter/good-example","code":"class Wallet:\n    def __init__(self):\n        self._money = 100\n\n    def get_amount(self) -> int:\n        return self._money\n\nclass Person:\n    def __init__(self):\n        self.wallet = Wallet()\n\n    def get_money_amount(self) -> int:\n        return self.wallet.get_amount()\n\ndef purchase(item: dict, buyer: Person) -> None:\n    if buyer.get_money_amount() >= item['price']:\n        print(\"Purchase successful.\")\n    else:\n        print(\"Insufficient funds.\")\n\n# Usage\nitem = {'price': 50}\nbuyer = Person()\npurchase(item, buyer)\n"},{"title":"Bad Example","codeFile":"principles/other/demeter/bad-example","code":"class Wallet:\n    def __init__(self):\n        self.money = {'amount': 100}\n\nclass Person:\n    def __init__(self):\n        self.wallet = Wallet()\n\ndef purchase(item: dict, buyer: Person) -> None:\n    if buyer.wallet.money['amount'] >= item['price']:\n        print(\"Purchase can be made.\")\n    else:\n        print(\"Insufficient funds.\")\n\n# Usage\nitem = {'price': 50}\nbuyer = Person()\npurchase(item, buyer)\n"}]},{"title":"Separation of Concerns","examples":[{"title":"Good Example","codeFile":"principles/other/separation/good-example","code":"# Authentication service\nclass AuthenticationService:\n    def login(self, username: str, password: str) -> bool:\n        # Authentication logic here\n        return True  # Dummy implementation\n\n    def logout(self) -> None:\n        # Logout logic here\n        pass\n\nclass DataService:\n    def fetch_data(self) -> list:\n        # Data retrieval logic here\n        return []  # Dummy implementation\n#\n# - `AuthenticationService` and `DataService` are responsible for handling authentication and data retrieval, respectively.\n# - `UserController` and `DataController` serve as intermediaries between the HTTP layer (not shown) and the services.\n# - Each component has a single responsibility, promoting modularity, testability, and maintainability.\n#\n\n# User controller\nclass UserController:\n    def __init__(self, auth_service: AuthenticationService):\n        self.auth_service = auth_service\n\n    def login_user(self, username: str, password: str) -> bool:\n        return self.auth_service.login(username, password)\n\n    def logout_user(self) -> None:\n        self.auth_service.logout()\n\nclass DataController:\n    def __init__(self, data_service: DataService):\n        self.data_service = data_service\n\n    def get_data(self) -> list:\n        return self.data_service.fetch_data()\n\n# Usage\nauth_service = AuthenticationService()\ndata_service = DataService()\n\nuser_controller = UserController(auth_service)\ndata_controller = DataController(data_service)\n\n# Simulate user login/logout\nuser_controller.login_user(\"username\", \"password\")\nuser_controller.logout_user()\n\n# Retrieve data\ndata = data_controller.get_data()\nprint(data)\n"},{"title":"Bad Example","codeFile":"principles/other/separation/bad-example","code":"class AuthenticationService:\n    def login(self, username: str, password: str) -> bool:\n        # Authentication logic here\n        return True  # Dummy implementation\n\n    def logout(self) -> None:\n        # Logout logic here\n        pass\n\nclass DataService:\n    def fetch_data(self) -> list:\n        # Data retrieval logic here\n        return []  # Dummy implementation\n\n#\n# - The `CombinedController` class is responsible for both user authentication and data retrieval.\n# - The loginUser method not only handles authentication but also retrieves user data directly\n#   from the `DataService`, violating the Single Responsibility Principle and mixing concerns.\n# - This violates the principle of Separation of Concerns and makes the code harder to maintain, test, and understand.\n#\n\nclass CombinedController:\n    def __init__(self, auth_service: AuthenticationService, data_service: DataService):\n        self.auth_service = auth_service\n        self.data_service = data_service\n\n    def login_user(self, username: str, password: str) -> bool:\n        # Authentication logic here\n        is_authenticated = self.auth_service.login(username, password)\n        if is_authenticated:\n            # Retrieve user data (mixing concerns)\n            user_data = self.data_service.fetch_data()\n            print(user_data)\n        return is_authenticated\n\n    def logout_user(self) -> None:\n        # Logout logic here\n        self.auth_service.logout()\n\n# Usage\nauth_service = AuthenticationService()\ndata_service = DataService()\n\ncombined_controller = CombinedController(auth_service, data_service)\n\n# Simulate user login/logout\ncombined_controller.login_user(\"username\", \"password\")\ncombined_controller.logout_user()\n"}]}],"principles_proprietary":[{"title":"Zen of Python (PEP 20)","description":[{"variant":"subtitle1","content":"The Zen of Python, as per PEP 20, is a collection of 19 aphorisms that capture the philosophy of Python. It emphasizes simplicity, readability, and the importance of writing code that is \"Pythonic.\"\n"}],"examples":[{"code":"import this\n"}]},{"title":"Explicit is better than implicit","description":[{"variant":"subtitle1","content":"This principle from the Zen of Python encourages developers to write code that is clear and understandable over code that is overly clever or hard to read. It promotes transparency and maintainability.\n"}],"examples":[{"title":"Good Example","code":"list_of_numbers = [1, 2, 3]\nlength = len(list_of_numbers)  # Explicitly get the length\n"},{"title":"Less Clear Example","code":"list_of_numbers = [1, 2, 3]\nlength = sum(1 for _ in list_of_numbers)  # Implicitly calculate length\n"}]},{"title":"Simple is better than complex","description":[{"variant":"subtitle1","content":"This principle advises that simplicity in your codebase should be preferred over complex solutions, which aligns with Python's philosophy of readability and maintainability.\n"}],"examples":[{"title":"Good Example","code":"def greet(name):\n    return f\"Hello, {name}!\"\n"},{"title":"Overly Complex Example","code":"def greet(name):\n    return ''.join(['Hello, ', name, '!'])\n"}]},{"title":"Readability Counts","description":[{"variant":"subtitle1","content":"A core principle where the readability of code is emphasized, reflecting Python's commitment to making code understandable and maintainable by humans.\n"}],"examples":[{"title":"Good Example","code":"def calculate_area(base, height):\n    return (base * height) / 2\n"},{"title":"Less Readable Example","code":"def calculate_area(b, h):\n    return (b * h) / 2\n"}]},{"title":"EAFP (Easier to Ask for Forgiveness than Permission)","description":[{"variant":"subtitle1","content":"This principle is about the coding style where operations are performed directly, relying on catching exceptions if an error occurs, rather than checking for conditions in advance.\n"}],"examples":[{"title":"Good Example","code":"try:\n    value = my_dict['key']\nexcept KeyError:\n    handle_error()\n"},{"title":"LBYL (Look Before You Leap) - Contrary to EAFP","code":"if 'key' in my_dict:\n    value = my_dict['key']\nelse:\n    handle_error()\n"}]},{"title":"Duck Typing","description":[{"variant":"subtitle1","content":"In Python, the type or class of an object is less important than the methods it defines. If it looks like a duck and quacks like a duck, it can be treated as a duck.\n"}],"examples":[{"code":"class Duck:\n  def quack(self):\n      return \"Quack, quack!\"\n\nclass Person:\n  def quack(self):\n      return \"I'm pretending to be a duck!\"\n\ndef make_it_quack(duck):\n  print(duck.quack())\n\nmake_it_quack(Duck())  # Quack, quack!\nmake_it_quack(Person())  # I'm pretending to be a duck!\n"}]}]}}