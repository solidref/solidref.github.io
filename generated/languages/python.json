{"name":"Python","code":"python","birth":1991,"death":"N/A","inspiredBy":["ABC","C","Haskell","Lisp","Modula-3","Perl"],"inspiring":["Cobra","Groovy","Ruby","Swift","Go"],"description":"Python is a high-level, interpreted programming language known for its emphasis on readability and simplicity.\nWidely used in scientific computing, data analysis, artificial intelligence, and web development, it supports multiple\nprogramming paradigms, including procedural, object-oriented, and functional programming. Python's comprehensive standard\nlibrary, dynamic typing, and ease of learning make it an ideal language for beginners and experienced developers alike.\nSignificant developments in Python's history include the introduction of Python 3 in 2008, which was not backward-compatible\nwith Python 2, leading to a prolonged transition period for many projects. Python's design philosophy emphasizes code readability\nand the use of whitespace. It has become one of the most popular programming languages in the world, with a strong community\nsupporting the development of a vast ecosystem of third-party packages for various applications.\n","patterns":{"patterns_behavioural":[{"title":"Chain Of Responsibility","examples":[{"code":"class Handler:\n    def __init__(self, successor=None):\n        self._successor = successor\n\n    def handle(self, request):\n        if self._successor:\n            return self._successor.handle(request)\n        return None\n\nclass ConcreteHandler1(Handler):\n    def handle(self, request):\n        if request == \"handle1\":\n            return \"Handled by ConcreteHandler1\"\n        return super().handle(request)\n\nclass ConcreteHandler2(Handler):\n    def handle(self, request):\n        if request == \"handle2\":\n            return \"Handled by ConcreteHandler2\"\n        return super().handle(request)\n\nhandler1 = ConcreteHandler1()\nhandler2 = ConcreteHandler2(handler1)\n\nprint(handler2.handle(\"handle2\"))\nprint(handler2.handle(\"handle1\"))\n"}]},{"title":"Command","examples":[{"code":"class Command:\n    def execute(self):\n        pass\n\nclass Light:\n    def turn_on(self):\n        print('Light turned on')\n\n    def turn_off(self):\n        print('Light turned off')\n\nclass TurnOnCommand(Command):\n    def __init__(self, light):\n        self.light = light\n\n    def execute(self):\n        self.light.turn_on()\n\nclass TurnOffCommand(Command):\n    def __init__(self, light):\n        self.light = light\n\n    def execute(self):\n        self.light.turn_off()\n\nclass RemoteControl:\n    def submit(self, command):\n        command.execute()\n\nlight = Light()\nturn_on = TurnOnCommand(light)\nturn_off = TurnOffCommand(light)\nremote = RemoteControl()\n\nremote.submit(turn_on)\nremote.submit(turn_off)\n"}]},{"title":"Iterator","examples":[{"code":"class Iterator:\n    def __init__(self, collection):\n        self._collection = collection\n        self._index = 0\n\n    def next(self):\n        if self._index < len(self._collection):\n            item = self._collection[self._index]\n            self._index += 1\n            return item\n        raise StopIteration\n\n    def has_next(self):\n        return self._index < len(self._collection)\n\nitems = [1, 'two', 3, 'four', 5]\niterator = Iterator(items)\n\nwhile iterator.has_next():\n    print(iterator.next())\n"}]},{"title":"Mediator","examples":[{"code":"class Mediator:\n    def send(self, message, colleague):\n        pass\n\nclass Colleague:\n    def __init__(self):\n        self.mediator = None\n\n    def send(self, message):\n        if self.mediator:\n            self.mediator.send(message, self)\n\n    def receive(self, message):\n        pass\n\nclass ConcreteColleague1(Colleague):\n    def receive(self, message):\n        print(f\"{self.__class__.__name__} received message: {message}\")\n\nclass ConcreteColleague2(Colleague):\n    def receive(self, message):\n        print(f\"{self.__class__.__name__} received message: {message}\")\n\nclass ConcreteMediator(Mediator):\n    def __init__(self):\n        self.colleagues = []\n\n    def register(self, colleague):\n        self.colleagues.append(colleague)\n        colleague.mediator = self\n\n    def send(self, message, sender):\n        for colleague in self.colleagues:\n            if colleague is not sender:\n                colleague.receive(message)\n\nmediator = ConcreteMediator()\ncolleague1 = ConcreteColleague1()\ncolleague2 = ConcreteColleague2()\n\nmediator.register(colleague1)\nmediator.register(colleague2)\n\ncolleague1.send(\"Hello from Colleague 1\")\ncolleague2.send(\"Hello from Colleague 2\")\n"}]},{"title":"Memento","examples":[{"code":"class Memento:\n    def __init__(self, state):\n        self._state = state\n\n    def get_state(self):\n        return self._state\n\nclass Originator:\n    def __init__(self):\n        self._state = \"\"\n\n    def set_state(self, state):\n        self._state = state\n\n    def get_state(self):\n        return self._state\n\n    def save(self):\n        return Memento(self._state)\n\n    def restore(self, memento):\n        self._state = memento.get_state()\n\nclass Caretaker:\n    def __init__(self):\n        self._mementos = []\n\n    def add_memento(self, memento):\n        self._mementos.append(memento)\n\n    def get_memento(self, index):\n        return self._mementos[index]\n\noriginator = Originator()\ncaretaker = Caretaker()\n\noriginator.set_state('State #1')\ncaretaker.add_memento(originator.save())\n\noriginator.set_state('State #2')\ncaretaker.add_memento(originator.save())\n\noriginator.restore(caretaker.get_memento(0))\nprint(originator.get_state())\n"}]},{"title":"Observer","examples":[{"code":"class Subject:\n    def __init__(self):\n        self._observers = []\n\n    def subscribe(self, observer):\n        self._observers.append(observer)\n\n    def unsubscribe(self, observer):\n        self._observers.remove(observer)\n\n    def notify(self, data):\n        for observer in self._observers:\n            observer.update(data)\n\nclass Observer:\n    def update(self, data):\n        pass\n\nclass ConcreteObserver(Observer):\n    def update(self, data):\n        print(f\"Observer received data: {data}\")\n\nsubject = Subject()\nobserver1 = ConcreteObserver()\nobserver2 = ConcreteObserver()\n\nsubject.subscribe(observer1)\nsubject.subscribe(observer2)\n\nsubject.notify(\"Hello Observers!\")\n\nsubject.unsubscribe(observer2)\nsubject.notify(\"Goodbye Observers!\")\n"}]},{"title":"State","examples":[{"code":"class State:\n    def handle(self, context):\n        pass\n\nclass ConcreteStateA(State):\n    def handle(self, context):\n        print(\"Handling state A\")\n        context.state = ConcreteStateB()\n\nclass ConcreteStateB(State):\n    def handle(self, context):\n        print(\"Handling state B\")\n        context.state = ConcreteStateA()\n\nclass Context:\n    def __init__(self, state):\n        self.state = state\n\n    def request(self):\n        self.state.handle(self)\n\n# Client code\ncontext = Context(ConcreteStateA())\ncontext.request()  # Handling state A\ncontext.request()  # Handling state B\n"}]},{"title":"Strategy","examples":[{"code":"class Strategy:\n    def execute(self, data):\n        pass\n\nclass ConcreteStrategyA(Strategy):\n    def execute(self, data):\n        return f\"Processed with Strategy A: {data}\"\n\nclass ConcreteStrategyB(Strategy):\n    def execute(self, data):\n        return f\"Processed with Strategy B: {data}\"\n\nclass Context:\n    def __init__(self, strategy):\n        self.strategy = strategy\n\n    def set_strategy(self, strategy):\n        self.strategy = strategy\n\n    def execute_strategy(self, data):\n        return self.strategy.execute(data)\n\n# Client code\ncontext = Context(ConcreteStrategyA())\nprint(context.execute_strategy(\"data\"))  # Processed with Strategy A: data\n\ncontext.set_strategy(ConcreteStrategyB())\nprint(context.execute_strategy(\"data\"))  # Processed with Strategy B: data\n"}]},{"title":"Template Method","examples":[{"code":"class AbstractClass:\n    def template_method(self):\n        self.step_one()\n        self.step_two()\n        self.hook()\n\n    def step_one(self):\n        print(\"Abstract step one\")\n\n    def step_two(self):\n        print(\"Abstract step two\")\n\n    def hook(self):\n        pass\n\nclass ConcreteClass(AbstractClass):\n    def step_two(self):\n        print(\"Concrete step two\")\n\n    def hook(self):\n        print(\"Concrete hook\")\n\n# Client code\nconcrete = ConcreteClass()\nconcrete.template_method()\n"}]},{"title":"Visitor","examples":[{"code":"class Visitor:\n    def visit_element_a(self, element):\n        pass\n\n    def visit_element_b(self, element):\n        pass\n\nclass Element:\n    def accept(self, visitor):\n        pass\n\nclass ConcreteElementA(Element):\n    def accept(self, visitor):\n        visitor.visit_element_a(self)\n\nclass ConcreteElementB(Element):\n    def accept(self, visitor):\n        visitor.visit_element_b(self)\n\nclass ConcreteVisitor(Visitor):\n    def visit_element_a(self, element):\n        print(\"Visitor is processing ConcreteElementA\")\n\n    def visit_element_b(self, element):\n        print(\"Visitor is processing ConcreteElementB\")\n\n# Client code\nelements = [ConcreteElementA(), ConcreteElementB()]\nvisitor = ConcreteVisitor()\n\nfor element in elements:\n    element.accept(visitor)\n"}]}],"patterns_creational":[{"title":"Factory Method","examples":[{"code":"class Creator:\n    def factory_method(self):\n        raise NotImplementedError(\"Factory method not implemented\")\n\n    def some_operation(self):\n        product = self.factory_method()\n        result = f\"Creator: The same creator's code has just worked with {product.operation()}\"\n        return result\n\nclass ConcreteCreator1(Creator):\n    def factory_method(self):\n        return ConcreteProduct1()\n\nclass ConcreteCreator2(Creator):\n    def factory_method(self):\n        return ConcreteProduct2()\n\nclass Product:\n    def operation(self):\n        pass\n\nclass ConcreteProduct1(Product):\n    def operation(self):\n        return \"{Result of the ConcreteProduct1}\"\n\nclass ConcreteProduct2(Product):\n    def operation(self):\n        return \"{Result of the ConcreteProduct2}\"\n\ndef client_code(creator):\n    print(\"Client: I'm not aware of the creator's class, but it still works.\")\n    print(creator.some_operation())\n\nclient_code(ConcreteCreator1())\nclient_code(ConcreteCreator2())\n"}]},{"title":"Abstract Factory","examples":[{"code":"class AbstractFactory:\n    def create_product_a(self):\n        pass\n\n    def create_product_b(self):\n        pass\n\nclass ConcreteFactory1(AbstractFactory):\n    def create_product_a(self):\n        return ConcreteProductA1()\n\n    def create_product_b(self):\n        return ConcreteProductB1()\n\nclass ConcreteFactory2(AbstractFactory):\n    def create_product_a(self):\n        return ConcreteProductA2()\n\n    def create_product_b(self):\n        return ConcreteProductB2()\n\nclass AbstractProductA:\n    def useful_function_a(self):\n        pass\n\nclass ConcreteProductA1(AbstractProductA):\n    def useful_function_a(self):\n        return \"The result of the product A1.\"\n\nclass ConcreteProductA2(AbstractProductA):\n    def useful_function_a(self):\n        return \"The result of the product A2.\"\n\nclass AbstractProductB:\n    def useful_function_b(self):\n        pass\n\nclass ConcreteProductB1(AbstractProductB):\n    def useful_function_b(self):\n        return \"The result of the product B1.\"\n\nclass ConcreteProductB2(AbstractProductB):\n    def useful_function_b(self):\n        return \"The result of the product B2.\"\n\ndef client_code(factory):\n    product_a = factory.create_product_a()\n    product_b = factory.create_product_b()\n\n    print(product_b.useful_function_b())\n    print(product_b.useful_function_b())\n\nclient_code(ConcreteFactory1())\nclient_code(ConcreteFactory2())\n"}]},{"title":"Builder","examples":[{"code":"class Builder:\n    def build_part_a(self):\n        pass\n\n    def build_part_b(self):\n        pass\n\n    def build_part_c(self):\n        pass\n\nclass ConcreteBuilder(Builder):\n    def __init__(self):\n        self.product = Product()\n\n    def build_part_a(self):\n        self.product.parts.append(\"PartA\")\n\n    def build_part_b(self):\n        self.product.parts.append(\"PartB\")\n\n    def build_part_c(self):\n        self.product.parts.append(\"PartC\")\n\n    def get_result(self):\n        return self.product\n\nclass Product:\n    def __init__(self):\n        self.parts = []\n\n    def list_parts(self):\n        print(f\"Product parts: {', '.join(self.parts)}\")\n\nbuilder = ConcreteBuilder()\nbuilder.build_part_a()\nbuilder.build_part_b()\nbuilder.build_part_c()\nproduct = builder.get_result()\nproduct.list_parts()\n"}]},{"title":"Prototype","examples":[{"code":"import copy\n\nclass Prototype:\n    def clone(self):\n        return copy.deepcopy(self)\n\nclass ConcretePrototype1(Prototype):\n    def __init__(self, field):\n        self.field = field\n\np1 = ConcretePrototype1(\"Field value\")\np2 = p1.clone()\n\nprint(p1.field)\nprint(p2.field)\nprint(\"Same object?\", p1 is p2)\nprint(\"Same value?\", p1.field == p2.field)\n"}]},{"title":"Singleton","examples":[{"code":"class SingletonMeta(type):\n    _instances = {}\n\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super().__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Singleton(metaclass=SingletonMeta):\n    def some_business_logic(self):\n        pass\n\ns1 = Singleton()\ns2 = Singleton()\n\nprint(\"Same instance?\", s1 is s2)\n"}]}],"patterns_structural":[{"title":"Adapter","examples":[{"code":"class Target:\n    def request(self) -> str:\n        return \"Target: The default target's behavior.\"\n\nclass Adaptee:\n    def specific_request(self) -> str:\n        return \".eetpadA eht fo roivaheb laicepS\"\n\nclass Adapter(Target):\n    def __init__(self, adaptee: Adaptee):\n        self.adaptee = adaptee\n\n    def request(self) -> str:\n        result = self.adaptee.specific_request()[::-1]\n        return f\"Adapter: (TRANSLATED) {result}\"\n\n# Client code\ntarget = Target()\nprint(target.request())\n\nadaptee = Adaptee()\nprint(f\"Adaptee: {adaptee.specific_request()}\")\n\nprint('After using Adapter...')\nadapter = Adapter(adaptee)\nprint(adapter.request())\n"}]},{"title":"Bridge","examples":[{"code":"class Implementation:\n    def operation_implementation(self) -> str:\n        pass\n\nclass Abstraction:\n    def __init__(self, implementation: Implementation):\n        self.implementation = implementation\n\n    def operation(self) -> str:\n        result = self.implementation.operation_implementation()\n        return f\"Abstraction: Base operation with:\\n{result}\"\n\nclass ExtendedAbstraction(Abstraction):\n    def operation(self) -> str:\n        result = self.implementation.operation_implementation()\n        return f\"ExtendedAbstraction: Extended operation with:\\n{result}\"\n\nclass ImplementationA(Implementation):\n    def operation_implementation(self) -> str:\n        return \"ImplementationA: Here's the result on the platform A.\"\n\nclass ImplementationB(Implementation):\n    def operation_implementation(self) -> str:\n        return \"ImplementationB: Here's the result on the platform B.\"\n\n# Client code\nimplementation = ImplementationA()\nabstraction = Abstraction(implementation)\nprint(abstraction.operation())\n\nimplementation = ImplementationB()\nabstraction = ExtendedAbstraction(implementation)\nprint(abstraction.operation())\n"}]},{"title":"Composite","examples":[{"code":"class Component:\n    def add(self, component) -> None:\n        pass\n\n    def remove(self, component) -> None:\n        pass\n\n    def display(self, depth: int) -> None:\n        pass\n\nclass Leaf(Component):\n    def __init__(self, name: str):\n        self.name = name\n\n    def display(self, depth: int) -> None:\n        print(\"-\" * depth + self.name)\n\nclass Composite(Component):\n    def __init__(self, name: str):\n        self.name = name\n        self.children = []\n\n    def add(self, component: Component) -> None:\n        self.children.append(component)\n\n    def remove(self, component: Component) -> None:\n        self.children.remove(component)\n\n    def display(self, depth: int) -> None:\n        print(\"-\" * depth + self.name)\n        for child in self.children:\n            child.display(depth + 2)\n\n# Client code\nroot = Composite('root')\nroot.add(Leaf('Leaf A'))\nroot.add(Leaf('Leaf B'))\n\ncomp = Composite('Composite X')\ncomp.add(Leaf('Leaf XA'))\ncomp.add(Leaf('Leaf XB'))\n\nroot.add(comp)\nroot.add(Leaf('Leaf C'))\n\nleaf = Leaf('Leaf D')\nroot.add(leaf)\nroot.remove(leaf)\n\nroot.display(1)\n"}]},{"title":"Decorator","examples":[{"code":"class Component:\n    def operation(self) -> str:\n        pass\n\nclass ConcreteComponent(Component):\n    def operation(self) -> str:\n        return \"ConcreteComponent\"\n\nclass Decorator(Component):\n    def __init__(self, component: Component):\n        self.component = component\n\n    def operation(self) -> str:\n        return self.component.operation()\n\nclass ConcreteDecoratorA(Decorator):\n    def operation(self) -> str:\n        return f\"ConcreteDecoratorA({super().operation()})\"\n\nclass ConcreteDecoratorB(Decorator):\n    def operation(self) -> str:\n        return f\"ConcreteDecoratorB({super().operation()})\"\n\n# Client code\nsimple = ConcreteComponent()\nprint(f\"Simple component: {simple.operation()}\")\n\ndecorator1 = ConcreteDecoratorA(simple)\ndecorator2 = ConcreteDecoratorB(decorator1)\nprint(f\"Decorated component: {decorator2.operation()}\")\n"}]},{"title":"Facade","examples":[{"code":"class Subsystem1:\n    def operation1(self) -> str:\n        return 'Subsystem1: Ready!'\n    def operationN(self) -> str:\n        return 'Subsystem1: Go!'\n\nclass Subsystem2:\n    def operation1(self) -> str:\n        return 'Subsystem2: Get ready!'\n    def operationZ(self) -> str:\n        return 'Subsystem2: Fire!'\n\nclass Facade:\n    def __init__(self, subsystem1: Subsystem1, subsystem2: Subsystem2):\n        self.subsystem1 = subsystem1 or Subsystem1()\n        self.subsystem2 = subsystem2 or Subsystem2()\n\n    def operation(self) -> str:\n        results = []\n        results.append(\"Facade initializes subsystems:\")\n        results.append(self.subsystem1.operation1())\n        results.append(self.subsystem2.operation1())\n        results.append(\"Facade orders subsystems to perform the action:\")\n        results.append(self.subsystem1.operationN())\n        results.append(self.subsystem2.operationZ())\n        return \"\\\\n\".join(results)\n\n# Client code\nfacade = Facade(Subsystem1(), Subsystem2())\nprint(facade.operation())\n"}]},{"title":"Flyweight","examples":[{"code":"import json\n\nclass Flyweight:\n    def __init__(self, shared_state):\n        self.shared_state = shared_state\n\n    def operation(self, unique_state):\n        s = json.dumps(self.shared_state)\n        u = json.dumps(unique_state)\n        print(f\"Flyweight: Displaying shared ({s}) and unique ({u}) state.\")\n\nclass FlyweightFactory:\n    _flyweights = {}\n\n    def __init__(self, initial_flyweights):\n        for state in initial_flyweights:\n            self._flyweights[self.get_key(state)] = Flyweight(state)\n\n    def get_key(self, state):\n        return \"_\".join(sorted(state))\n\n    def get_flyweight(self, shared_state):\n        key = self.get_key(shared_state)\n        if not key in self._flyweights:\n            print(\"FlyweightFactory: Can't find a flyweight, creating new one.\")\n            self._flyweights[key] = Flyweight(shared_state)\n        else:\n            print(\"FlyweightFactory: Reusing existing flyweight.\")\n        return self._flyweights[key]\n\n    def list_flyweights(self):\n        count = len(self._flyweights)\n        print(f\"FlyweightFactory: I have {count} flyweights:\")\n        print(\"\\\\n\".join(map(str, self._flyweights.keys())))\n\n# Client code\nfactory = FlyweightFactory([\n    [\"Chevrolet\", \"Camaro2018\", \"pink\"],\n    [\"Mercedes Benz\", \"C300\", \"black\"],\n    [\"Mercedes Benz\", \"C500\", \"red\"],\n    [\"BMW\", \"M5\", \"red\"],\n    [\"BMW\", \"X6\", \"white\"],\n])\nfactory.list_flyweights()\n\ndef add_car_to_police_database(factory, plates, owner, brand, model, color):\n    print(\"\\\\nAdding car to database\")\n    flyweight = factory.get_flyweight([brand, model, color])\n    flyweight.operation([plates, owner])\n\nadd_car_to_police_database(factory, \"CL234IR\", \"James Doe\", \"BMW\", \"M5\", \"red\")\nadd_car_to_police_database(factory, \"ZM456IN\", \"John Smith\", \"BMW\", \"X1\", \"white\")\n\nfactory.list_flyweights()\n"}]},{"title":"Proxy","examples":[{"code":"class Subject:\n    def request(self) -> str:\n        pass\n\nclass RealSubject(Subject):\n    def request(self) -> str:\n        return \"RealSubject: Handling request.\"\n\nclass Proxy(Subject):\n    def __init__(self, real_subject: RealSubject):\n        self.real_subject = real_subject\n\n    def request(self) -> str:\n        if self.check_access():\n            self.real_subject.request()\n            self.log_access()\n            return \"Proxy: Logged and handing over to RealSubject.\"\n        else:\n            return \"Proxy: I am sorry, but I cannot let you through.\"\n\n    def check_access(self) -> bool:\n        print(\"Proxy: Checking access prior to firing a real request.\")\n        # Some real checks should go here.\n        return True\n\n    def log_access(self) -> None:\n        print(\"Proxy: Logging the time of request.\")\n\n# Client code\nreal_subject = RealSubject()\nprint(real_subject.request())\n\nprint('After using Proxy...')\nproxy = Proxy(real_subject)\nprint(proxy.request())\n"}]}]},"principles":{"principles_solid":[{"title":"Single Responsibility","examples":[{"title":"Good Example","code":"class UserDataManager:\n    def save_user_data(self):\n        pass  # Save user data logic\n\nclass UserNotification:\n    def send_notification(self):\n        pass  # Send notification logic\n"},{"title":"Bad Example","code":"class User:\n    def save_user_data(self):\n        pass  # Save user data logic\n\n    def send_notification(self):\n        pass  # Send notification logic\n"}]},{"title":"Open-Closed","examples":[{"title":"Good Example","code":"from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def compute_area(self):\n        pass\n\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n\n    def compute_area(self):\n        return self.width * self.height\n"},{"title":"Bad Example","code":"class AreaCalculator:\n    def compute_area(self, shape):\n        if isinstance(shape, Rectangle):\n            return shape.width * shape.height\n        elif isinstance(shape, Circle):\n            return 3.14 * shape.radius ** 2\n"}]},{"title":"Liskov Substitution","examples":[{"title":"Good Example","code":"class Bird:\n    def fly(self):\n        pass  # Flying logic\n\nclass Sparrow(Bird):\n    def fly(self):\n        pass  # Sparrow-specific flying logic\n"},{"title":"Bad Example","code":"class Bird:\n    def fly(self):\n        pass  # Flying logic\n\nclass Ostrich(Bird):\n    def fly(self):\n        raise Exception(\"Can't fly\")  # Contradicts the expected behavior\n"}]},{"title":"Interface Segregation","examples":[{"title":"Good Example","code":"class Worker:\n    def work(self):\n        pass  # Work logic\n\nclass Feeder:\n    def eat(self):\n        pass  # Eating logic\n\nclass Human(Worker, Feeder):\n    pass\n\nclass Robot(Worker):\n    pass\n\nclass Animal(Feeder):\n    pass\n"},{"title":"Bad Example","code":"class Worker:\n    def work(self):\n        pass  # Work logic\n\n    def eat(self):\n        pass  # This method should not be part of the Worker class\n"}]},{"title":"Dependency Inversion","examples":[{"title":"Good Example","code":"from abc import ABC, abstractmethod\n\nclass Device(ABC):\n    @abstractmethod\n    def turn_on(self):\n        pass\n\nclass Switch:\n    def __init__(self, device):\n        self.device = device\n\n    def operate(self):\n        self.device.turn_on()\n\nclass Fan(Device):\n    def turn_on(self):\n        pass  # Fan-specific turn on logic\n\nwall_switch = Switch(Fan())\n"},{"title":"Bad Example","code":"class LightBulb:\n    def turn_on(self):\n        pass  # Turn on logic\n\nclass Switch:\n    def __init__(self):\n        self.bulb = LightBulb()\n\n    def operate(self):\n        self.bulb.turn_on()\n"}]}],"principles_other":[{"title":"Don't Repeat Yourself (DRY)","examples":[{"title":"Good Example","code":"# Good example: Using default arguments for repeated logic\ndef add_tax(price, rate=0.05):\n    return price + (price * rate)\n"},{"title":"Bad Example","code":"def add_tax_for_food(price):\n    return price + (price * 0.05)\n\ndef add_tax_for_electronics(price):\n    return price + (price * 0.05)\n"}]},{"title":"Keep It Simple Stupid (KISS)","examples":[{"title":"Good Example","code":"# Simple and straightforward function to check if a number is even\ndef is_even(num):\n    return num % 2 == 0\n"},{"title":"Bad Example","code":"# Overly complicated version of the same functionality\ndef is_even(num):\n    return num % abs(2) == 0\n"}]},{"title":"You Aren't Gonna Need It (YAGNI)","examples":[{"title":"Good Example","code":"class Car:\n    def drive(self):\n        pass  # Drive functionality\n"},{"title":"Bad Example","code":"class Car:\n    def drive(self):\n        pass  # Drive functionality\n\n    def fly(self):\n        pass  # Unnecessary functionality for a Car\n"}]},{"title":"Law of Demeter (Principle of Least Knowledge)","examples":[{"title":"Good Example","code":"class Wallet:\n    def __init__(self):\n        self._money = 100\n\n    def get_amount(self):\n        return self._money\n\nclass Person:\n    def __init__(self):\n        self.wallet = Wallet()\n\n    def get_money_amount(self):\n        return self.wallet.get_amount()\n\ndef purchase(item, buyer):\n    if buyer.get_money_amount() >= item['price']:\n        pass  # Purchase logic\n"},{"title":"Bad Example","code":"class Wallet:\n    def __init__(self):\n        self.money = {'amount': 100}\n\nclass Person:\n    def __init__(self):\n        self.wallet = Wallet()\n\ndef purchase(item, buyer):\n    if buyer.wallet.money['amount'] >= item['price']:\n        pass  # Purchase logic, violating the Law of Demeter\n"}]},{"title":"Separation of Concerns","examples":[{"title":"Good Example","code":"class UserDataService:\n    def fetch_user_data(self):\n        pass  # Data fetching logic\n\nclass UserLogic:\n    def calculate_age(self):\n        pass  # Age calculation logic\n\nclass UserComponent:\n    def render(self):\n        pass  # Rendering logic\n"},{"title":"Bad Example","code":"class UserComponent:\n    def fetch_user_data(self):\n        pass  # Combines data fetching\n\n    def render(self):\n        pass  # With rendering\n\n    def calculate_age(self):\n        pass  # And business logic in one class\n"}]}],"principles_proprietary":[{"title":"Zen of Python (PEP 20)","description":[{"variant":"subtitle1","content":"The Zen of Python, as per PEP 20, is a collection of 19 aphorisms that capture the philosophy of Python. It emphasizes simplicity, readability, and the importance of writing code that is \"Pythonic.\"\n"}],"examples":[{"code":"import this\n"}]},{"title":"Explicit is better than implicit","description":[{"variant":"subtitle1","content":"This principle from the Zen of Python encourages developers to write code that is clear and understandable over code that is overly clever or hard to read. It promotes transparency and maintainability.\n"}],"examples":[{"title":"Good Example","code":"list_of_numbers = [1, 2, 3]\nlength = len(list_of_numbers)  # Explicitly get the length\n"},{"title":"Less Clear Example","code":"list_of_numbers = [1, 2, 3]\nlength = sum(1 for _ in list_of_numbers)  # Implicitly calculate length\n"}]},{"title":"Simple is better than complex","description":[{"variant":"subtitle1","content":"This principle advises that simplicity in your codebase should be preferred over complex solutions, which aligns with Python's philosophy of readability and maintainability.\n"}],"examples":[{"title":"Good Example","code":"def greet(name):\n    return f\"Hello, {name}!\"\n"},{"title":"Overly Complex Example","code":"def greet(name):\n    return ''.join(['Hello, ', name, '!'])\n"}]},{"title":"Readability Counts","description":[{"variant":"subtitle1","content":"A core principle where the readability of code is emphasized, reflecting Python's commitment to making code understandable and maintainable by humans.\n"}],"examples":[{"title":"Good Example","code":"def calculate_area(base, height):\n    return (base * height) / 2\n"},{"title":"Less Readable Example","code":"def calculate_area(b, h):\n    return (b * h) / 2\n"}]},{"title":"EAFP (Easier to Ask for Forgiveness than Permission)","description":[{"variant":"subtitle1","content":"This principle is about the coding style where operations are performed directly, relying on catching exceptions if an error occurs, rather than checking for conditions in advance.\n"}],"examples":[{"title":"Good Example","code":"try:\n    value = my_dict['key']\nexcept KeyError:\n    handle_error()\n"},{"title":"LBYL (Look Before You Leap) - Contrary to EAFP","code":"if 'key' in my_dict:\n    value = my_dict['key']\nelse:\n    handle_error()\n"}]},{"title":"Duck Typing","description":[{"variant":"subtitle1","content":"In Python, the type or class of an object is less important than the methods it defines. If it looks like a duck and quacks like a duck, it can be treated as a duck.\n"}],"examples":[{"code":"class Duck:\n  def quack(self):\n      return \"Quack, quack!\"\n\nclass Person:\n  def quack(self):\n      return \"I'm pretending to be a duck!\"\n\ndef make_it_quack(duck):\n  print(duck.quack())\n\nmake_it_quack(Duck())  # Quack, quack!\nmake_it_quack(Person())  # I'm pretending to be a duck!\n"}]}]}}