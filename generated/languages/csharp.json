{"name":"C# (C Sharp)","code":"csharp","ext":"cs","birth":2000,"death":"N/A","inspiredBy":["C++","Java","Delphi","Modula-3"],"inspiring":["Swift","Kotlin"],"description":"C# is a versatile, multi-paradigm programming language developed by Microsoft as part of its .NET initiative.\nDesigned to be simple yet powerful, C# is widely used for developing desktop applications, web applications (via ASP.NET),\nand more recently, mobile applications through Xamarin. Since its inception, C# has evolved significantly, with C# 7.0 and\nabove introducing features that enhance the language's functionality and developer productivity. These features include tuples\nfor grouping data, pattern matching for more expressive conditionals, local functions for better encapsulation, and\nasync/await for asynchronous programming. With the introduction of .NET Core and .NET 5+, C# has become a cross-platform\nlanguage, running on Linux and macOS in addition to Windows. C# 8.0 introduced nullable reference types to improve code safety,\nand C# 9.0 introduced records for immutable data structures, making it an attractive choice for modern software development\npractices that emphasize safety, performance, and reliability.\n","patterns":{"patterns_behavioural":[{"title":"Chain Of Responsibility","examples":[{"codeFile":"patterns/behavioural/chain-of-responsibility/example","code":"using System;\n\npublic interface ISupportHandler\n{\n    void SetNextHandler(ISupportHandler handler);\n    string HandleRequest(string request);\n}\n\npublic class Level1Support : ISupportHandler\n{\n    private ISupportHandler nextHandler = null;\n\n    public void SetNextHandler(ISupportHandler handler)\n    {\n        this.nextHandler = handler;\n    }\n\n    public string HandleRequest(string request)\n    {\n        if (request.Contains(\"basic\"))\n        {\n            return \"Level 1 Support: Issue resolved at basic level.\";\n        }\n        else if (this.nextHandler != null)\n        {\n            return this.nextHandler.HandleRequest(request);\n        }\n        else\n        {\n            return null; // No more handlers in the chain\n        }\n    }\n}\n\npublic class Level2Support : ISupportHandler\n{\n    private ISupportHandler nextHandler = null;\n\n    public void SetNextHandler(ISupportHandler handler)\n    {\n        this.nextHandler = handler;\n    }\n\n    public string HandleRequest(string request)\n    {\n        if (request.Contains(\"advanced\"))\n        {\n            return \"Level 2 Support: Issue resolved at advanced level.\";\n        }\n        else if (this.nextHandler != null)\n        {\n            return this.nextHandler.HandleRequest(request);\n        }\n        else\n        {\n            return null; // No more handlers in the chain\n        }\n    }\n}\n\npublic class Level3Support : ISupportHandler\n{\n    public string HandleRequest(string request)\n    {\n        if (request.Contains(\"bug\"))\n        {\n            return \"Level 3 Support: Issue resolved at development level.\";\n        }\n        else\n        {\n            return \"Level 3 Support: Unable to resolve the issue.\";\n        }\n    }\n\n    public void SetNextHandler(ISupportHandler handler)\n    {\n        throw new Exception(\"Level 3 Support is the highest level and does not have a next handler.\");\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Create instances of support handlers\n        var level1 = new Level1Support();\n        var level2 = new Level2Support();\n        var level3 = new Level3Support();\n\n        // Chain the handlers together\n        level1.SetNextHandler(level2);\n        level2.SetNextHandler(level3);\n\n        // Simulate support requests\n        var request1 = \"Fix basic login issue\";\n        var request2 = \"Debug advanced performance problem\";\n        var request3 = \"Investigate bug causing application crash\";\n\n        // Process requests through the chain of responsibility\n        Console.WriteLine(level1.HandleRequest(request1)); // Output: Level 1 Support: Issue resolved at basic level.\n        Console.WriteLine(level1.HandleRequest(request2)); // Output: Level 2 Support: Issue resolved at advanced level.\n        Console.WriteLine(level1.HandleRequest(request3)); // Output: Level 3 Support: Issue resolved at development level.\n    }\n}\n\n/*\n * This code demonstrates how the Chain of Responsibility pattern can be used in a support \n * ticket system. The ISupportHandler interface defines the contract for handling support \n * requests, and concrete implementations (Level1Support, Level2Support, and Level3Support) \n * represent different levels of support. Each handler decides whether it can handle a \n * request or should pass it to the next handler in the chain.\n */"}]},{"title":"Command","examples":[{"codeFile":"patterns/behavioural/command/example","code":"using System;\nusing System.Collections.Generic;\n\n// Define the command interface\npublic interface ICommand\n{\n    void Execute();\n}\n\n// Receiver class that performs the actual actions\npublic class Light\n{\n    public void TurnOn()\n    {\n        Console.WriteLine(\"Light is on\");\n    }\n\n    public void TurnOff()\n    {\n        Console.WriteLine(\"Light is off\");\n    }\n}\n\n// Concrete command to turn on the light\npublic class TurnOnCommand : ICommand\n{\n    private Light _light;\n\n    public TurnOnCommand(Light light)\n    {\n        _light = light;\n    }\n\n    public void Execute()\n    {\n        _light.TurnOn();\n    }\n}\n\n// Concrete command to turn off the light\npublic class TurnOffCommand : ICommand\n{\n    private Light _light;\n\n    public TurnOffCommand(Light light)\n    {\n        _light = light;\n    }\n\n    public void Execute()\n    {\n        _light.TurnOff();\n    }\n}\n\n// Invoker class that triggers the commands\npublic class RemoteControl\n{\n    private List<ICommand> _commands = new List<ICommand>();\n\n    public void AddCommand(ICommand command)\n    {\n        _commands.Add(command);\n    }\n\n    public void ExecuteCommands()\n    {\n        foreach (var command in _commands)\n        {\n            command.Execute();\n        }\n    }\n}\n\n// Client code\npublic class Program\n{\n    public static void Main()\n    {\n        // Create a light\n        Light light = new Light();\n\n        // Create commands for turning the light on and off\n        TurnOnCommand turnOnCommand = new TurnOnCommand(light);\n        TurnOffCommand turnOffCommand = new TurnOffCommand(light);\n\n        // Create a remote control and add the commands\n        RemoteControl remoteControl = new RemoteControl();\n        remoteControl.AddCommand(turnOnCommand);\n        remoteControl.AddCommand(turnOffCommand);\n\n        // Press the buttons on the remote control to execute the commands\n        remoteControl.ExecuteCommands();\n    }\n}\n\n/**\n * This code demonstrates how the Command pattern can be used in a remote control\n * system to control a light. The Command interface defines the contract for executing\n * commands, and concrete command classes (TurnOnCommand and TurnOffCommand) encapsulate\n * the actions to be performed on the Light receiver object. The RemoteControl acts as\n * the invoker, which holds and triggers the commands. Pressing buttons on the remote\n * control executes the corresponding commands, resulting in the light being turned on\n * and off.\n */"}]},{"title":"Iterator","examples":[{"codeFile":"patterns/behavioural/iterator/example","code":"using System;\nusing System.Collections.Generic;\n\npublic class Iterator<T>\n{\n    private List<T> collection;\n    private int index;\n\n    public Iterator(List<T> collection)\n    {\n        this.collection = collection;\n        this.index = 0;\n    }\n\n    public T Next()\n    {\n        return this.collection[this.index++];\n    }\n\n    public bool HasNext()\n    {\n        return this.index < this.collection.Count;\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        List<object> items = new List<object> { 1, \"two\", 3, \"four\", 5 };\n        Iterator<object> iterator = new Iterator<object>(items);\n\n        while (iterator.HasNext())\n        {\n            Console.WriteLine(iterator.Next());\n        }\n\n        /*\n         * In this example, the Iterator pattern is used to iterate over a collection of books\n         * stored in a BookCollection. The Iterator interface defines methods for checking if\n         * there are more elements (HasNext) and retrieving the next element (Next). The\n         * ArrayIterator class provides a concrete implementation of the iterator for an array\n         * of books. The BookCollection class implements the Iterable interface, which allows\n         * it to create iterators for iterating over its collection of books. Finally, in the\n         * client code, we create a BookCollection, add books to it, and iterate over the\n         * collection using the iterator, printing each book's name.\n         */\n    }\n}"}]},{"title":"Mediator","examples":[{"codeFile":"patterns/behavioural/mediator/example","code":"using System;\n\n// Define the Mediator interface\npublic interface IChatMediator\n{\n    void SendMessage(string message, User user);\n}\n\n// Concrete Mediator implementation for a chat room\npublic class ChatRoom : IChatMediator\n{\n    public void SendMessage(string message, User user)\n    {\n        Console.WriteLine($\"[{user.GetName()}] sends message: {message}\");\n    }\n}\n\n// Define the Colleague interface\npublic interface User\n{\n    void Send(string message);\n    void Receive(string message);\n    string GetName();\n}\n\n// Concrete Colleague implementation for a chat user\npublic class ChatUser : User\n{\n    private string name;\n    private IChatMediator mediator;\n\n    public ChatUser(string name, IChatMediator mediator)\n    {\n        this.name = name;\n        this.mediator = mediator;\n    }\n\n    public void Send(string message)\n    {\n        Console.WriteLine($\"[{this.name}] sends message: {message}\");\n        mediator.SendMessage(message, this);\n    }\n\n    public void Receive(string message)\n    {\n        Console.WriteLine($\"[{this.name}] received message: {message}\");\n    }\n\n    public string GetName()\n    {\n        return this.name;\n    }\n}\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        // Create a chat room mediator\n        IChatMediator chatMediator = new ChatRoom();\n\n        // Create chat users\n        User user1 = new ChatUser(\"User1\", chatMediator);\n        User user2 = new ChatUser(\"User2\", chatMediator);\n\n        // Send messages between users\n        user1.Send(\"Hello, User2!\");\n        user2.Send(\"Hi, User1!\");\n    }\n}\n\n/*\n * In this example, the Mediator pattern is used to facilitate communication between\n * users in a chat room. The IChatMediator interface defines a method SendMessage for\n * sending messages to users. The ChatRoom class provides a concrete implementation\n * of the mediator for managing communication between users in the chat room.\n *\n * The User interface defines methods Send and Receive for sending and receiving messages,\n * respectively, as well as a method GetName for getting the user's name. The ChatUser\n * class implements the User interface and interacts with the mediator to send and\n * receive messages.\n *\n * In the client code, we create a chat room mediator and two chat users. Users can send\n * messages to each other by calling the Send method, which delegates the message sending\n * to the mediator. When a message is received, the mediator distributes it to the\n * appropriate user's Receive method.\n */"}]},{"title":"Memento","examples":[{"codeFile":"patterns/behavioural/memento/example","code":"using System;\nusing System.Collections.Generic;\n\n// Originator class represents the object whose state needs to be saved and restored\nclass Editor\n{\n    private string text;\n\n    public Editor(string text)\n    {\n        this.text = text;\n    }\n\n    public void SetText(string text)\n    {\n        this.text = text;\n    }\n\n    public string GetText()\n    {\n        return this.text;\n    }\n\n    // Creates a memento containing the current state of the editor\n    public Memento Save()\n    {\n        return new Memento(this.text);\n    }\n\n    // Restores the editor's state from a memento\n    public void Restore(Memento memento)\n    {\n        this.text = memento.GetState();\n    }\n}\n\n// Memento class represents the stored state of the editor\nclass Memento\n{\n    private readonly string state;\n\n    public Memento(string state)\n    {\n        this.state = state;\n    }\n\n    public string GetState()\n    {\n        return this.state;\n    }\n}\n\n// Caretaker class is responsible for keeping track of multiple mementos\nclass History\n{\n    private readonly List<Memento> mementos = new List<Memento>();\n\n    // Adds a memento to the history\n    public void AddMemento(Memento memento)\n    {\n        this.mementos.Add(memento);\n    }\n\n    // Retrieves the most recent memento from the history\n    public Memento GetLatestMemento()\n    {\n        if (this.mementos.Count == 0)\n        {\n            throw new InvalidOperationException(\"No mementos available\");\n        }\n        return this.mementos[this.mementos.Count - 1];\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var editor = new Editor(\"Initial text\");\n\n        // Create a history to store mementos\n        var history = new History();\n\n        // Add a memento to the history\n        history.AddMemento(editor.Save());\n\n        // Modify the text\n        editor.SetText(\"Modified text\");\n\n        // Add another memento to the history\n        history.AddMemento(editor.Save());\n\n        // Restore the editor's state to a previous memento\n        editor.Restore(history.GetLatestMemento());\n\n        Console.WriteLine(editor.GetText()); // Output: Modified text (restored from the previous state)\n    }\n}\n\n/* \n * In this example, the Editor class represents an object whose state can be modified. The save\n * method creates a memento containing the current state of the editor, and the restore method\n * restores the editor's state from a given memento.\n * \n * The Memento class represents the stored state of the editor at a particular point in time.\n * \n * The History class is responsible for maintaining a list of mementos. It provides methods\n * to add a memento to the history and retrieve the most recent memento.\n * \n * In the client code, we create an editor object and a history object. We modify the editor's\n * state, save it to a memento, modify it again, and then restore it to the previous state using\n * the memento stored in the history.\n */"}]},{"title":"Observer","examples":[{"codeFile":"patterns/behavioural/observer/example","code":"using System;\nusing System.Collections.Generic;\n\npublic interface ISubject\n{\n    void Subscribe(IObserver observer);\n    void Unsubscribe(IObserver observer);\n    void Notify(string data);\n}\n\npublic class ConcreteSubject : ISubject\n{\n    private List<IObserver> observers = new List<IObserver>();\n\n    public void Subscribe(IObserver observer)\n    {\n        observers.Add(observer);\n    }\n\n    public void Unsubscribe(IObserver observer)\n    {\n        observers.Remove(observer);\n    }\n\n    public void Notify(string data)\n    {\n        foreach (var observer in observers)\n        {\n            observer.Update(data);\n        }\n    }\n}\n\npublic interface IObserver\n{\n    void Update(string data);\n}\n\npublic class ConcreteObserver : IObserver\n{\n    public void Update(string data)\n    {\n        Console.WriteLine($\"Observer received data: {data}\");\n    }\n}\n\n// Client code\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var subject = new ConcreteSubject();\n        var observer1 = new ConcreteObserver();\n        var observer2 = new ConcreteObserver();\n\n        subject.Subscribe(observer1);\n        subject.Subscribe(observer2);\n\n        subject.Notify(\"Hello Observers!\");\n\n        subject.Unsubscribe(observer2);\n        subject.Notify(\"Goodbye Observers!\");\n\n        /*\n         * In this example, the Editor class represents an object whose state can be modified.\n         * The save method creates a memento containing the current state of the editor, and\n         * the restore method restores the editor's state from a given memento.\n         *\n         * The Memento class represents the stored state of the editor at a particular point in time.\n         * The History class is responsible for maintaining a list of mementos. It provides\n         * methods to add a memento to the history and retrieve the most recent memento.\n         *\n         * In the client code, we create an editor object and a history object. We modify the\n         * editor's state, save it to a memento, modify it again, and then restore it to the\n         * previous state using the memento stored in the history.\n         */\n    }\n}"}]},{"title":"State","examples":[{"codeFile":"patterns/behavioural/state/example","code":"using System;\nusing System.Threading;\n\npublic interface ITrafficLightState\n{\n    void ChangeState(TrafficLight trafficLight);\n}\n\npublic class RedState : ITrafficLightState\n{\n    public void ChangeState(TrafficLight trafficLight)\n    {\n        Console.WriteLine(\"Traffic light is now RED. Stop!\");\n        // Transition to the next state (Yellow) after a certain duration\n        new Timer(_ => {\n            trafficLight.SetState(new YellowState());\n        }, null, 3000, Timeout.Infinite);\n    }\n}\n\npublic class YellowState : ITrafficLightState\n{\n    public void ChangeState(TrafficLight trafficLight)\n    {\n        Console.WriteLine(\"Traffic light is now YELLOW. Prepare to stop or proceed with caution.\");\n        // Transition to the next state (Green) after a certain duration\n        new Timer(_ => {\n            trafficLight.SetState(new GreenState());\n        }, null, 2000, Timeout.Infinite);\n    }\n}\n\npublic class GreenState : ITrafficLightState\n{\n    public void ChangeState(TrafficLight trafficLight)\n    {\n        Console.WriteLine(\"Traffic light is now GREEN. Go!\");\n        // Transition to the next state (Red) after a certain duration\n        new Timer(_ => {\n            trafficLight.SetState(new RedState());\n        }, null, 4000, Timeout.Infinite);\n    }\n}\n\npublic class TrafficLight\n{\n    private ITrafficLightState _state;\n\n    public TrafficLight()\n    {\n        // Initial state is Red\n        this._state = new RedState();\n    }\n\n    public void SetState(ITrafficLightState state)\n    {\n        this._state = state;\n        this._state.ChangeState(this);\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        TrafficLight trafficLight = new TrafficLight();\n\n        // Simulate traffic light behavior by changing its state\n        trafficLight.SetState(new GreenState());\n\n        // Prevent the console from closing immediately\n        Console.ReadLine();\n    }\n}"}]},{"title":"Strategy","examples":[{"codeFile":"patterns/behavioural/strategy/example","code":"using System;\n\n// Interface defining the common behavior for all payment strategies\npublic interface IPaymentStrategy\n{\n    void Pay(decimal amount);\n}\n\n// Concrete strategy for processing payments via credit card\npublic class CreditCardPaymentStrategy : IPaymentStrategy\n{\n    private readonly string _cardNumber;\n    private readonly string _expiryDate;\n    private readonly string _cvv;\n\n    public CreditCardPaymentStrategy(string cardNumber, string expiryDate, string cvv)\n    {\n        _cardNumber = cardNumber;\n        _expiryDate = expiryDate;\n        _cvv = cvv;\n    }\n\n    public void Pay(decimal amount)\n    {\n        Console.WriteLine($\"Processing credit card payment of ${amount} with card number {_cardNumber}\");\n        // Logic to process payment via credit card\n    }\n}\n\n// Concrete strategy for processing payments via PayPal\npublic class PayPalPaymentStrategy : IPaymentStrategy\n{\n    private readonly string _email;\n    private readonly string _password;\n\n    public PayPalPaymentStrategy(string email, string password)\n    {\n        _email = email;\n        _password = password;\n    }\n\n    public void Pay(decimal amount)\n    {\n        Console.WriteLine($\"Processing PayPal payment of ${amount} with email {_email}\");\n        // Logic to process payment via PayPal\n    }\n}\n\n// Context class representing the payment processor\npublic class PaymentProcessor\n{\n    private IPaymentStrategy _paymentStrategy;\n\n    // Setter method to set the payment strategy dynamically\n    public void SetPaymentStrategy(IPaymentStrategy paymentStrategy)\n    {\n        _paymentStrategy = paymentStrategy;\n    }\n\n    // Method to process payment using the selected strategy\n    public void ProcessPayment(decimal amount)\n    {\n        if (_paymentStrategy != null)\n        {\n            _paymentStrategy.Pay(amount);\n        }\n        else\n        {\n            Console.WriteLine(\"Payment strategy not set. Please select a payment method.\");\n        }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        var paymentProcessor = new PaymentProcessor();\n\n        // Select a payment method (strategy) dynamically\n        var creditCardStrategy = new CreditCardPaymentStrategy(\"1234 5678 9012 3456\", \"12/25\", \"123\");\n        paymentProcessor.SetPaymentStrategy(creditCardStrategy);\n        paymentProcessor.ProcessPayment(100);\n\n        // Change payment method (strategy)\n        var payPalStrategy = new PayPalPaymentStrategy(\"example@example.com\", \"password\");\n        paymentProcessor.SetPaymentStrategy(payPalStrategy);\n        paymentProcessor.ProcessPayment(50);\n    }\n}"}]},{"title":"Template Method","examples":[{"codeFile":"patterns/behavioural/template-method/example","code":"using System;\n\nabstract class Breakfast\n{\n    // Template method\n    public void Prepare()\n    {\n        BoilWater();\n        AddIngredients();\n        Cook();\n        Serve();\n    }\n\n    // Abstract methods to be implemented by subclasses\n    public abstract void AddIngredients();\n    public abstract void Cook();\n\n    // Concrete methods\n    public void BoilWater()\n    {\n        Console.WriteLine(\"Boiling water...\");\n    }\n\n    public void Serve()\n    {\n        Console.WriteLine(\"Breakfast is served!\");\n    }\n}\n\nclass OmeletteBreakfast : Breakfast\n{\n    public override void AddIngredients()\n    {\n        Console.WriteLine(\"Adding eggs, cheese, and vegetables to the pan.\");\n    }\n\n    public override void Cook()\n    {\n        Console.WriteLine(\"Cooking the omelette until golden brown.\");\n    }\n}\n\nclass PancakeBreakfast : Breakfast\n{\n    public override void AddIngredients()\n    {\n        Console.WriteLine(\"Mixing flour, eggs, milk, and sugar to make the batter.\");\n    }\n\n    public override void Cook()\n    {\n        Console.WriteLine(\"Pouring the batter onto the griddle and flipping until cooked.\");\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Preparing Omelette Breakfast:\");\n        Breakfast omeletteBreakfast = new OmeletteBreakfast();\n        omeletteBreakfast.Prepare();\n\n        Console.WriteLine(\"\\nPreparing Pancake Breakfast:\");\n        Breakfast pancakeBreakfast = new PancakeBreakfast();\n        pancakeBreakfast.Prepare();\n\n        /*\n         * In this example, we have an abstract class Breakfast representing the template method pattern. It defines\n         * the steps of preparing breakfast in the Prepare() method, which serves as the template method. The abstract\n         * methods AddIngredients() and Cook() are placeholders for the specific steps that vary between different\n         * types of breakfasts.\n         *\n         * Subclasses such as OmeletteBreakfast and PancakeBreakfast extend the Breakfast class and implement the\n         * abstract methods to provide specific implementations for adding ingredients and cooking. The template\n         * method Prepare() orchestrates the sequence of steps required to prepare each type of breakfast.\n         *\n         */\n    }\n}"}]},{"title":"Visitor","examples":[{"codeFile":"patterns/behavioural/visitor/example","code":"using System;\nusing System.Collections.Generic;\n\ninterface IAnimalVisitor\n{\n    void VisitLion(Lion lion);\n    void VisitElephant(Elephant elephant);\n    void VisitGiraffe(Giraffe giraffe);\n}\n\nclass AnimalFeeder : IAnimalVisitor\n{\n    public void VisitLion(Lion lion)\n    {\n        Console.WriteLine($\"Feeding meat to {lion.GetName()}.\");\n    }\n\n    public void VisitElephant(Elephant elephant)\n    {\n        Console.WriteLine($\"Feeding hay to {elephant.GetName()}.\");\n    }\n\n    public void VisitGiraffe(Giraffe giraffe)\n    {\n        Console.WriteLine($\"Feeding leaves to {giraffe.GetName()}.\");\n    }\n}\n\ninterface IAnimal\n{\n    void Accept(IAnimalVisitor visitor);\n}\n\nclass Lion : IAnimal\n{\n    private string name;\n\n    public Lion(string name)\n    {\n        this.name = name;\n    }\n\n    public string GetName()\n    {\n        return name;\n    }\n\n    public void Accept(IAnimalVisitor visitor)\n    {\n        visitor.VisitLion(this);\n    }\n}\n\nclass Elephant : IAnimal\n{\n    private string name;\n\n    public Elephant(string name)\n    {\n        this.name = name;\n    }\n\n    public string GetName()\n    {\n        return name;\n    }\n\n    public void Accept(IAnimalVisitor visitor)\n    {\n        visitor.VisitElephant(this);\n    }\n}\n\nclass Giraffe : IAnimal\n{\n    private string name;\n\n    public Giraffe(string name)\n    {\n        this.name = name;\n    }\n\n    public string GetName()\n    {\n        return name;\n    }\n\n    public void Accept(IAnimalVisitor visitor)\n    {\n        visitor.VisitGiraffe(this);\n    }\n}\n\nclass Zoo\n{\n    private List<IAnimal> animals = new List<IAnimal>();\n\n    public void AddAnimal(IAnimal animal)\n    {\n        animals.Add(animal);\n    }\n\n    public void PerformOperation(IAnimalVisitor visitor)\n    {\n        animals.ForEach(animal => animal.Accept(visitor));\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Zoo zoo = new Zoo();\n        zoo.AddAnimal(new Lion(\"Simba\"));\n        zoo.AddAnimal(new Elephant(\"Dumbo\"));\n        zoo.AddAnimal(new Giraffe(\"Melman\"));\n\n        AnimalFeeder feeder = new AnimalFeeder();\n        zoo.PerformOperation(feeder);\n    }\n}"}]}],"patterns_creational":[{"title":"Factory Method","examples":[{"codeFile":"patterns/creational/factory-method/example","code":"using System;\n\n// Product interface: Vehicle\npublic interface IVehicle\n{\n    void Drive();\n}\n\n// Concrete Products: Car and Truck\npublic class Car : IVehicle\n{\n    public void Drive()\n    {\n        Console.WriteLine(\"Driving a car...\");\n    }\n}\n\npublic class Truck : IVehicle\n{\n    public void Drive()\n    {\n        Console.WriteLine(\"Driving a truck...\");\n    }\n}\n\n// Creator: VehicleFactory\npublic abstract class VehicleFactory\n{\n    // Factory Method\n    public abstract IVehicle CreateVehicle();\n\n    // An operation that uses the factory method\n    public void DeliverVehicle()\n    {\n        var vehicle = CreateVehicle();\n        Console.WriteLine(\"Delivering the vehicle...\");\n        vehicle.Drive();\n    }\n}\n\n// Concrete Creators: CarFactory and TruckFactory\npublic class CarFactory : VehicleFactory\n{\n    // Factory Method implementation for creating a car\n    public override IVehicle CreateVehicle()\n    {\n        Console.WriteLine(\"Creating a car...\");\n        return new Car();\n    }\n}\n\npublic class TruckFactory : VehicleFactory\n{\n    // Factory Method implementation for creating a truck\n    public override IVehicle CreateVehicle()\n    {\n        Console.WriteLine(\"Creating a truck...\");\n        return new Truck();\n    }\n}\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        // Client code\n        var carFactory = new CarFactory();\n        carFactory.DeliverVehicle();\n\n        var truckFactory = new TruckFactory();\n        truckFactory.DeliverVehicle();\n    }\n}\n\n/*\n * The Vehicle interface defines a common interface for all vehicles, which includes a Drive() method.\n *\n * The Car and Truck classes are concrete implementations of the IVehicle interface.\n *\n * The VehicleFactory class is an abstract class representing a creator. It declares the CreateVehicle()\n * method, which serves as the Factory Method for creating vehicles. The DeliverVehicle() method is a\n * common operation that uses the Factory Method to create and deliver a vehicle.\n *\n * The CarFactory and TruckFactory classes are concrete implementations of the VehicleFactory class.\n * They override the CreateVehicle() method to create specific types of vehicles (i.e., cars and trucks).\n *\n */"}]},{"title":"Abstract Factory","examples":[{"codeFile":"patterns/creational/abstract-factory/example","code":"using System;\n\n// Abstract Factory interface\npublic interface IFurnitureFactory\n{\n    IChair CreateChair();\n    ITable CreateTable();\n}\n\n// Concrete Factory 1: Modern Furniture Factory\npublic class ModernFurnitureFactory : IFurnitureFactory\n{\n    public IChair CreateChair()\n    {\n        return new ModernChair();\n    }\n\n    public ITable CreateTable()\n    {\n        return new ModernTable();\n    }\n}\n\n// Concrete Factory 2: Vintage Furniture Factory\npublic class VintageFurnitureFactory : IFurnitureFactory\n{\n    public IChair CreateChair()\n    {\n        return new VintageChair();\n    }\n\n    public ITable CreateTable()\n    {\n        return new VintageTable();\n    }\n}\n\n// Abstract Product: Chair\npublic interface IChair\n{\n    void SitOn();\n}\n\n// Concrete Product: Modern Chair\npublic class ModernChair : IChair\n{\n    public void SitOn()\n    {\n        Console.WriteLine(\"Sitting on a modern chair.\");\n    }\n}\n\n// Concrete Product: Vintage Chair\npublic class VintageChair : IChair\n{\n    public void SitOn()\n    {\n        Console.WriteLine(\"Sitting on a vintage chair.\");\n    }\n}\n\n// Abstract Product: Table\npublic interface ITable\n{\n    void PutOn();\n}\n\n// Concrete Product: Modern Table\npublic class ModernTable : ITable\n{\n    public void PutOn()\n    {\n        Console.WriteLine(\"Putting something on a modern table.\");\n    }\n}\n\n// Concrete Product: Vintage Table\npublic class VintageTable : ITable\n{\n    public void PutOn()\n    {\n        Console.WriteLine(\"Putting something on a vintage table.\");\n    }\n}\n\nclass Program\n{\n    static void CreateFurniture(IFurnitureFactory factory)\n    {\n        var chair = factory.CreateChair();\n        var table = factory.CreateTable();\n\n        Console.WriteLine(\"Created furniture:\");\n        chair.SitOn();\n        table.PutOn();\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Creating modern furniture:\");\n        CreateFurniture(new ModernFurnitureFactory());\n\n        Console.WriteLine(\"\\nCreating vintage furniture:\");\n        CreateFurniture(new VintageFurnitureFactory());\n    }\n}\n// The FurnitureFactory interface declares methods for creating chairs and tables.\n// Concrete factories (ModernFurnitureFactory and VintageFurnitureFactory) implement the\n// FurnitureFactory interface to produce modern and vintage furniture, respectively.\n// The Chair interface declares a method for sitting on a chair, and concrete chair classes\n// (ModernChair and VintageChair) implement this interface.\n// The Table interface declares a method for putting something on a table, and concrete table\n// classes (ModernTable and VintageTable) implement this interface.\n// The CreateFurniture function acts as a client and receives a FurnitureFactory as a parameter.\n// It creates a chair and a table using the factory and then performs actions on the created furniture."}]},{"title":"Builder","examples":[{"codeFile":"patterns/creational/builder/example","code":"using System;\n\n// Product: Computer\npublic class Computer {\n    private string cpu;\n    private int ram;\n    private int storage;\n    private string gpu;\n    private int screenSize;\n\n    public Computer(string cpu, int ram, int storage, string gpu, int screenSize) {\n        this.cpu = cpu;\n        this.ram = ram;\n        this.storage = storage;\n        this.gpu = gpu;\n        this.screenSize = screenSize;\n    }\n\n    public void DisplaySpecs() {\n        Console.WriteLine($\"CPU: {this.cpu}\");\n        Console.WriteLine($\"RAM: {this.ram} GB\");\n        Console.WriteLine($\"Storage: {this.storage} GB\");\n        Console.WriteLine($\"GPU: {this.gpu}\");\n        Console.WriteLine($\"Screen Size: {this.screenSize} inches\");\n    }\n}\n\n// Builder interface\npublic interface IComputerBuilder {\n    void SetCPU(string cpu);\n    void SetRAM(int ram);\n    void SetStorage(int storage);\n    void SetGPU(string gpu);\n    void SetScreenSize(int screenSize);\n    Computer GetResult();\n}\n\n// Concrete Builder: Gaming Computer Builder\npublic class GamingComputerBuilder : IComputerBuilder {\n    private Computer computer;\n\n    public GamingComputerBuilder() {\n        this.computer = new Computer(\"\", 0, 0, \"\", 0);\n    }\n\n    public void SetCPU(string cpu) {\n        this.computer = new Computer(cpu, this.computer.Ram, this.computer.Storage, this.computer.Gpu, this.computer.ScreenSize);\n    }\n\n    public void SetRAM(int ram) {\n        this.computer = new Computer(this.computer.Cpu, ram, this.computer.Storage, this.computer.Gpu, this.computer.ScreenSize);\n    }\n\n    public void SetStorage(int storage) {\n        this.computer = new Computer(this.computer.Cpu, this.computer.Ram, storage, this.computer.Gpu, this.computer.ScreenSize);\n    }\n\n    public void SetGPU(string gpu) {\n        this.computer = new Computer(this.computer.Cpu, this.computer.Ram, this.computer.Storage, gpu, this.computer.ScreenSize);\n    }\n\n    public void SetScreenSize(int screenSize) {\n        this.computer = new Computer(this.computer.Cpu, this.computer.Ram, this.computer.Storage, this.computer.Gpu, screenSize);\n    }\n\n    public Computer GetResult() {\n        return this.computer;\n    }\n}\n\n// Director\npublic class ComputerBuilderDirector {\n    private IComputerBuilder builder;\n\n    public ComputerBuilderDirector(IComputerBuilder builder) {\n        this.builder = builder;\n    }\n\n    public void ConstructGamingComputer() {\n        builder.SetCPU(\"Intel Core i9\");\n        builder.SetRAM(32);\n        builder.SetStorage(1000);\n        builder.SetGPU(\"NVIDIA GeForce RTX 3080\");\n        builder.SetScreenSize(27);\n    }\n}\n\n// Client code\npublic class Program {\n    public static void Main(string[] args) {\n        var gamingComputerBuilder = new GamingComputerBuilder();\n        var director = new ComputerBuilderDirector(gamingComputerBuilder);\n        director.ConstructGamingComputer();\n        var gamingComputer = gamingComputerBuilder.GetResult();\n        Console.WriteLine(\"Gaming Computer Specifications:\");\n        gamingComputer.DisplaySpecs();\n    }\n}"}]},{"title":"Prototype","examples":[{"codeFile":"patterns/creational/prototype/example","code":"using System;\n\nnamespace PrototypePattern\n{\n    // Prototype interface: IUserProfile\n    public interface IUserProfile\n    {\n        IUserProfile Clone();\n        void CustomizeProfile(UserProfileSettings settings);\n        void DisplayProfile();\n    }\n\n    // Concrete Prototype: DefaultUserProfile\n    public class DefaultUserProfile : IUserProfile\n    {\n        private string username;\n        private string bio;\n        private string profilePicture;\n\n        public DefaultUserProfile(string username, string bio, string profilePicture)\n        {\n            this.username = username;\n            this.bio = bio;\n            this.profilePicture = profilePicture;\n        }\n\n        public IUserProfile Clone()\n        {\n            return new DefaultUserProfile(this.username, this.bio, this.profilePicture);\n        }\n\n        public void CustomizeProfile(UserProfileSettings settings)\n        {\n            if (!string.IsNullOrEmpty(settings.Username))\n            {\n                this.username = settings.Username;\n            }\n            if (!string.IsNullOrEmpty(settings.Bio))\n            {\n                this.bio = settings.Bio;\n            }\n            if (!string.IsNullOrEmpty(settings.ProfilePicture))\n            {\n                this.profilePicture = settings.ProfilePicture;\n            }\n        }\n\n        public void DisplayProfile()\n        {\n            Console.WriteLine($\"Username: {this.username}\");\n            Console.WriteLine($\"Bio: {this.bio}\");\n            Console.WriteLine($\"Profile Picture: {this.profilePicture}\");\n        }\n    }\n\n    // Prototype settings: UserProfileSettings\n    public class UserProfileSettings\n    {\n        public string Username { get; set; }\n        public string Bio { get; set; }\n        public string ProfilePicture { get; set; }\n    }\n\n    // Client code\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            DefaultUserProfile defaultProfile = new DefaultUserProfile(\"user123\", \"Welcome to my profile!\", \"default.jpg\");\n\n            // Clone the default profile to create a customized profile\n            IUserProfile customizedProfile = defaultProfile.Clone();\n            customizedProfile.CustomizeProfile(new UserProfileSettings { Bio = \"I'm a software developer.\", ProfilePicture = \"avatar.jpg\" });\n\n            // Display both profiles\n            Console.WriteLine(\"Default Profile:\");\n            defaultProfile.DisplayProfile();\n\n            Console.WriteLine(\"\\nCustomized Profile:\");\n            customizedProfile.DisplayProfile();\n\n            /*\n             * The IUserProfile interface defines methods for cloning a profile, customizing profile settings, and\n             * displaying the profile.\n             *\n             * The DefaultUserProfile class is a concrete implementation of the IUserProfile interface. It represents\n             * the default user profile with properties like username, bio, and profile picture. The Clone()\n             * method creates a copy of the profile, and the CustomizeProfile() method allows modifying profile\n             * settings.\n             *\n             * The UserProfileSettings class defines optional settings that can be customized in a user profile.\n             *\n             * In the client code, we create a default user profile and then clone it to create a customized profile\n             * with updated settings. Both profiles can be displayed independently, demonstrating the use of the\n             * Prototype pattern to create new objects by copying existing ones.\n             */\n        }\n    }\n}"}]},{"title":"Singleton","examples":[{"codeFile":"patterns/creational/singleton/example","code":"using System;\nusing System.Collections.Generic;\n\npublic class Logger\n{\n    private static Logger instance;\n    private List<string> logHistory = new List<string>();\n\n    // Private constructor to prevent instantiation from outside the class\n    private Logger() { }\n\n    // Static method to retrieve the singleton instance\n    public static Logger GetInstance()\n    {\n        if (instance == null)\n        {\n            instance = new Logger();\n        }\n        return instance;\n    }\n\n    // Method to log messages\n    public void Log(string message)\n    {\n        var timestamp = DateTime.UtcNow.ToString(\"o\"); // ISO 8601 format\n        var logEntry = $\"[{timestamp}] {message}\";\n        logHistory.Add(logEntry);\n        Console.WriteLine(logEntry);\n    }\n\n    // Method to retrieve log history\n    public List<string> GetLogHistory()\n    {\n        return logHistory;\n    }\n}\n\n// Client code\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var logger1 = Logger.GetInstance();\n        var logger2 = Logger.GetInstance();\n\n        Console.WriteLine(logger1 == logger2); // Output: True, both references point to the same instance\n\n        logger1.Log(\"User logged in\");\n        logger2.Log(\"Data saved to database\");\n\n        logger1.GetLogHistory().ForEach(Console.WriteLine);\n    }\n}\n\n/*\n * The Logger class has a private static instance property that holds the single instance of the logger.\n *\n * The constructor is made private to prevent instantiation from outside the class.\n *\n * The GetInstance() method is a static method that returns the singleton instance of the logger. It\n * ensures that only one instance of the logger is created throughout the application.\n *\n * The Log() method logs a message along with a timestamp and adds the log entry to the logHistory list.\n *\n * The GetLogHistory() method retrieves the log history.\n *\n * In the client code, both logger1 and logger2 references point to the same instance of the logger\n * obtained using the GetInstance() method.\n *\n * Logging messages using either logger1 or logger2 will result in consistent logging behavior, and the\n * log history can be retrieved from either instance.\n */"}]}],"patterns_structural":[{"title":"Adapter","examples":[{"codeFile":"patterns/structural/adapter/example","code":"using System;\n\n// Adaptee: Existing MP3 player\nclass Mp3Player {\n  public void PlayMp3(string fileName) {\n    Console.WriteLine($\"Playing MP3 file: {fileName}\");\n  }\n}\n\n// Target: Interface expected by the client (unified interface)\ninterface AudioPlayer {\n  void Play(string fileName);\n}\n\n// Adapter: Converts OGG audio files to MP3 format\nclass OggToMp3Adapter : AudioPlayer {\n  private Mp3Player mp3Player;\n\n  public OggToMp3Adapter() {\n    this.mp3Player = new Mp3Player();\n  }\n\n  public void Play(string fileName) {\n    // Convert OGG to MP3 and play using the MP3 player\n    Console.WriteLine($\"Converting OGG file '{fileName}' to MP3 format\");\n    string mp3FileName = ConvertToMp3(fileName);\n    this.mp3Player.PlayMp3(mp3FileName);\n  }\n\n  private string ConvertToMp3(string fileName) {\n    // Simulate conversion process (replace extension)\n    return fileName.Replace(\".ogg\", \".mp3\");\n  }\n}\n\n// Client code\nclass Program {\n  static void Main(string[] args) {\n    AudioPlayer audioPlayer = new OggToMp3Adapter();\n\n    // Play MP3 file\n    audioPlayer.Play(\"audio1.mp3\");\n\n    // Play OGG file (automatically converted to MP3)\n    audioPlayer.Play(\"audio2.ogg\");\n  }\n}\n\n/*\n * Mp3Player represents the existing audio player that can play MP3 files.\n *\n * AudioPlayer is the target interface that defines the unified interface expected by the\n * client application for playing audio files.\n *\n * OggToMp3Adapter is the adapter class that implements the AudioPlayer interface. It internally\n * uses the Mp3Player to play MP3 files but converts OGG files to MP3 format before delegating to\n * the Mp3Player.\n *\n * In the client code, the application interacts with the AudioPlayer interface, unaware of whether\n * it's playing MP3 or OGG files. When playing an OGG file, the adapter automatically converts it\n * to MP3 format before playing it using the Mp3Player.\n *\n */"}]},{"title":"Bridge","examples":[{"codeFile":"patterns/structural/bridge/example","code":"using System;\n\n// Abstraction: Vehicle\npublic abstract class Vehicle\n{\n    protected IWorkshop workshop;\n\n    public Vehicle(IWorkshop workshop)\n    {\n        this.workshop = workshop;\n    }\n\n    public abstract void Manufacture();\n}\n\n// Implementor: Workshop\npublic interface IWorkshop\n{\n    void Work();\n}\n\n// Concrete Implementor: Paint Workshop\npublic class PaintWorkshop : IWorkshop\n{\n    public void Work()\n    {\n        Console.WriteLine(\"Painting vehicle\");\n    }\n}\n\n// Concrete Implementor: Repair Workshop\npublic class RepairWorkshop : IWorkshop\n{\n    public void Work()\n    {\n        Console.WriteLine(\"Repairing vehicle\");\n    }\n}\n\n// Refined Abstraction: Car\npublic class Car : Vehicle\n{\n    public Car(IWorkshop workshop) : base(workshop)\n    {\n    }\n\n    public override void Manufacture()\n    {\n        Console.WriteLine(\"Manufacturing car.\");\n        workshop.Work();\n    }\n}\n\n// Refined Abstraction: Truck\npublic class Truck : Vehicle\n{\n    public Truck(IWorkshop workshop) : base(workshop)\n    {\n    }\n\n    public override void Manufacture()\n    {\n        Console.WriteLine(\"Manufacturing truck.\");\n        workshop.Work();\n    }\n}\n\n// Client code\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Vehicle car = new Car(new PaintWorkshop());\n        car.Manufacture(); // Output: Manufacturing car. Painting vehicle\n\n        Vehicle truck = new Truck(new RepairWorkshop());\n        truck.Manufacture(); // Output: Manufacturing truck. Repairing vehicle\n\n        // The Vehicle class represents the abstraction, which is extended by Car and Truck.\n\n        // The IWorkshop interface represents the implementor, defining the Work method.\n\n        // PaintWorkshop and RepairWorkshop are concrete implementations of the IWorkshop interface.\n\n        // Each vehicle can be associated with a specific workshop using composition, and it delegates the work to that workshop.\n    }\n}"}]},{"title":"Composite","examples":[{"codeFile":"patterns/structural/composite/example","code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\ninterface IDepartment\n{\n    string GetName();\n    List<string> GetEmployees();\n}\n\nclass IndividualDepartment : IDepartment\n{\n    private string _name;\n    private List<string> _employees;\n\n    public IndividualDepartment(string name, List<string> employees)\n    {\n        _name = name;\n        _employees = employees;\n    }\n\n    public string GetName()\n    {\n        return _name;\n    }\n\n    public List<string> GetEmployees()\n    {\n        return _employees;\n    }\n}\n\nclass CompositeDepartment : IDepartment\n{\n    private string _name;\n    private List<IDepartment> _departments;\n\n    public CompositeDepartment(string name)\n    {\n        _name = name;\n        _departments = new List<IDepartment>();\n    }\n\n    public void AddDepartment(IDepartment department)\n    {\n        _departments.Add(department);\n    }\n\n    public void RemoveDepartment(IDepartment department)\n    {\n        _departments.Remove(department);\n    }\n\n    public string GetName()\n    {\n        return _name;\n    }\n\n    public List<string> GetEmployees()\n    {\n        return _departments.SelectMany(department => department.GetEmployees()).ToList();\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var salesDepartment = new IndividualDepartment(\"Sales Department\", new List<string> { \"John\", \"Alice\", \"Bob\" });\n        var marketingDepartment = new IndividualDepartment(\"Marketing Department\", new List<string> { \"Emily\", \"David\" });\n        var engineeringDepartment = new IndividualDepartment(\"Engineering Department\", new List<string> { \"Michael\", \"Sarah\", \"Chris\" });\n\n        var headDepartment = new CompositeDepartment(\"Head Department\");\n        headDepartment.AddDepartment(salesDepartment);\n        headDepartment.AddDepartment(marketingDepartment);\n\n        var parentEngineeringDepartment = new CompositeDepartment(\"Parent Engineering Department\");\n        parentEngineeringDepartment.AddDepartment(engineeringDepartment);\n\n        var rootDepartment = new CompositeDepartment(\"Root Department\");\n        rootDepartment.AddDepartment(headDepartment);\n        rootDepartment.AddDepartment(parentEngineeringDepartment);\n\n        // Get all employees in the root department\n        Console.WriteLine(\"Employees in the root department:\");\n        foreach(var employee in rootDepartment.GetEmployees())\n        {\n            Console.WriteLine(employee);\n        }\n    }\n}\n\n/**\n * The IDepartment interface defines the common methods for both individual departments and composite departments.\n *\n * IndividualDepartment represents an individual department with a name and a list of employees.\n *\n * CompositeDepartment represents a composite department that can contain sub-departments. It maintains a\n * list of departments and delegates the GetEmployees method to its sub-departments recursively.\n *\n * The client code creates a hierarchical structure of departments and retrieves all employees from the root department.\n */"}]},{"title":"Decorator","examples":[{"codeFile":"patterns/structural/decorator/example","code":"using System;\n\n// Component: Notification\npublic interface INotification {\n    string Send();\n}\n\n// Concrete Component: Base Notification\npublic class BaseNotification : INotification {\n    public string Send() {\n        return \"Base notification: You have a new message!\";\n    }\n}\n\n// Decorator: Notification Decorator\npublic abstract class NotificationDecorator : INotification {\n    protected INotification notification;\n\n    public NotificationDecorator(INotification notification) {\n        this.notification = notification;\n    }\n\n    public virtual string Send() {\n        return this.notification.Send();\n    }\n}\n\n// Concrete Decorator: Sound Notification\npublic class SoundNotificationDecorator : NotificationDecorator {\n    public SoundNotificationDecorator(INotification notification) : base(notification) { }\n\n    public override string Send() {\n        return $\"{base.Send()} (Sound notification: Ding!)\";\n    }\n}\n\n// Concrete Decorator: Priority Notification\npublic class PriorityNotificationDecorator : NotificationDecorator {\n    public PriorityNotificationDecorator(INotification notification) : base(notification) { }\n\n    public override string Send() {\n        return $\"{base.Send()} (Priority notification: High priority!)\";\n    }\n}\n\n// Client code\nclass Program {\n    static void Main(string[] args) {\n        INotification baseNotification = new BaseNotification();\n        Console.WriteLine(baseNotification.Send());\n\n        INotification soundNotification = new SoundNotificationDecorator(baseNotification);\n        Console.WriteLine(soundNotification.Send());\n\n        INotification priorityNotification = new PriorityNotificationDecorator(baseNotification);\n        Console.WriteLine(priorityNotification.Send());\n\n        INotification soundAndPriorityNotification = new PriorityNotificationDecorator(new SoundNotificationDecorator(baseNotification));\n        Console.WriteLine(soundAndPriorityNotification.Send());\n\n        // The Notification interface defines the common method for sending notifications.\n        //\n        // BaseNotification represents the base notification without any additional features.\n        //\n        // NotificationDecorator is an abstract class that serves as the base class for concrete decorators.\n        // It holds a reference to the wrapped notification.\n        //\n        // SoundNotificationDecorator adds sound notification functionality to the base notification.\n        //\n        // PriorityNotificationDecorator adds priority notification functionality to the base notification.\n        //\n        // The client code demonstrates how we can dynamically add sound notification, priority notification,\n        // or both to the base notification. Each decorator enhances the behavior of the base notification\n        // without modifying its implementation.\n    }\n}"}]},{"title":"Facade","examples":[{"codeFile":"patterns/structural/facade/example","code":"using System;\n\n// Subsystem: Flight Booking\npublic class FlightBookingSystem {\n  public string BookFlight(string origin, string destination) {\n    return $\"Flight booked from {origin} to {destination}\";\n  }\n}\n\n// Subsystem: Hotel Booking\npublic class HotelBookingSystem {\n  public string BookHotel(string location, DateTime checkInDate, DateTime checkOutDate) {\n    return $\"Hotel booked at {location} from {checkInDate.ToLongDateString()} to {checkOutDate.ToLongDateString()}\";\n  }\n}\n\n// Subsystem: Car Rental\npublic class CarRentalSystem {\n  public string RentCar(string location, DateTime startDate, DateTime endDate) {\n    return $\"Car rented at {location} from {startDate.ToLongDateString()} to {endDate.ToLongDateString()}\";\n  }\n}\n\n// Facade: TravelFacade\npublic class TravelFacade {\n  private FlightBookingSystem _flightBookingSystem;\n  private HotelBookingSystem _hotelBookingSystem;\n  private CarRentalSystem _carRentalSystem;\n\n  public TravelFacade() {\n    _flightBookingSystem = new FlightBookingSystem();\n    _hotelBookingSystem = new HotelBookingSystem();\n    _carRentalSystem = new CarRentalSystem();\n  }\n\n  public string BookTravel(string origin, string destination, string location, DateTime checkInDate, DateTime checkOutDate, DateTime startDate, DateTime endDate) {\n    var flightDetails = _flightBookingSystem.BookFlight(origin, destination);\n    var hotelDetails = _hotelBookingSystem.BookHotel(location, checkInDate, checkOutDate);\n    var carDetails = _carRentalSystem.RentCar(location, startDate, endDate);\n\n    return $\"{flightDetails}\\n{hotelDetails}\\n{carDetails}\";\n  }\n}\n\n// Client code\nclass Program {\n  static void Main(string[] args) {\n    var travelFacade = new TravelFacade();\n    var bookingDetails = travelFacade.BookTravel(\"New York\", \"Los Angeles\", \"Hilton\", new DateTime(2023, 12, 15), new DateTime(2023, 12, 20), new DateTime(2023, 12, 15), new DateTime(2023, 12, 20));\n    Console.WriteLine(bookingDetails);\n  }\n}\n\n/*\n * The FlightBookingSystem, HotelBookingSystem, and CarRentalSystem classes represent the\n * subsystems of flight booking, hotel booking, and car rental, respectively.\n *\n * The TravelFacade class provides a simplified interface for booking a complete travel\n * package. It encapsulates the complexities of interacting with the subsystems.\n *\n * The client code interacts with the TravelFacade to book a complete travel package without\n * directly interacting with the subsystems.\n */"}]},{"title":"Flyweight","examples":[{"codeFile":"patterns/structural/flyweight/example","code":"using System;\nusing System.Collections.Generic;\n\n// Flyweight: Character\npublic class Character\n{\n    private string _character;\n\n    public Character(string character)\n    {\n        _character = character;\n    }\n\n    public string Display(string font, int size)\n    {\n        return $\"Character: {_character}, Font: {font}, Size: {size}\";\n    }\n}\n\n// Flyweight Factory: CharacterFactory\npublic class CharacterFactory\n{\n    private Dictionary<string, Character> _characters = new Dictionary<string, Character>();\n\n    public Character GetCharacter(string character)\n    {\n        if (!_characters.ContainsKey(character))\n        {\n            _characters[character] = new Character(character);\n        }\n        return _characters[character];\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // Client code\n        CharacterFactory characterFactory = new CharacterFactory();\n\n        // Text document\n        string text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n\n        // Rendering text with flyweight characters\n        List<string> renderedText = new List<string>();\n\n        foreach (char char in text)\n        {\n            Character character = characterFactory.GetCharacter(char.ToString());\n            renderedText.Add(character.Display(\"Arial\", 12)); // Assume same font and size for simplicity\n        }\n\n        // Displaying rendered text\n        Console.WriteLine(string.Join(\"\\n\", renderedText));\n    }\n}\n\n/**\n * The Character class represents the flyweight object for a character. It contains intrinsic\n * state (the character itself).\n *\n * The CharacterFactory class acts as a flyweight factory, creating and managing flyweight\n * objects. It ensures that each character is shared among multiple instances.\n *\n * In the client code, we create a text document and render it using flyweight characters.\n * Instead of creating a new character object for each character in the text, we retrieve\n * existing flyweight characters from the factory, saving memory and improving performance.\n */"}]},{"title":"Proxy","examples":[{"codeFile":"patterns/structural/proxy/example","code":"using System;\nusing System.Threading.Tasks;\n\n// Subject: Interface representing the common behavior of RealSubject and Proxy\npublic interface IHttpServer\n{\n  Task<string> Request(string url);\n}\n\n// RealSubject: The actual HTTP server implementation\npublic class HttpServer : IHttpServer\n{\n  public async Task<string> Request(string url)\n  {\n    // Simulating HTTP request to the actual server\n    return $\"Response from server for URL: {url}\";\n  }\n}\n\n// Proxy: Proxy server that intercepts requests before forwarding them to the real server\npublic class ProxyServer : IHttpServer\n{\n  private HttpServer httpServer;\n\n  public ProxyServer()\n  {\n    this.httpServer = new HttpServer();\n  }\n\n  public async Task<string> Request(string url)\n  {\n    // Additional logic can be added here, e.g., caching, access control, logging\n    Console.WriteLine($\"Proxy: Intercepted request for URL: {url}\");\n\n    // Forward the request to the real server\n    var response = await this.httpServer.Request(url);\n\n    // Additional processing on the response can be done here\n\n    return response;\n  }\n}\n\n// Client code\npublic class Program\n{\n  public static async Task Main(string[] args)\n  {\n    var proxy = new ProxyServer();\n\n    // Client sends a request to the proxy server\n    var response = await proxy.Request(\"https://example.com\");\n\n    Console.WriteLine(response);\n  }\n}\n\n// Explanation comments kept as requested:\n/*\n * The IHttpServer interface defines the common behavior for both the HttpServer and ProxyServer classes.\n *\n * The HttpServer class represents the real HTTP server implementation. It implements the Request method\n * to send HTTP requests to the actual server.\n *\n * The ProxyServer class acts as a proxy server. It intercepts requests before forwarding them to the real\n * server. The Request method of the proxy performs additional tasks such as logging, caching, or access\n * control before delegating the request to the real server.\n *\n * In the client code, we instantiate a ProxyServer object and send a request to it. The proxy intercepts\n * the request, performs any necessary processing, and then forwards the request to the real server.\n * Finally, it returns the response to the client.\n */"}]}]},"principles":{"principles_solid":[{"title":"Single Responsibility","examples":[{"title":"Good Example","codeFile":"principles/solid/single-responsibility/good-example","code":"using System;\n\npublic class Employee\n{\n    private string name;\n    private string position;\n    private int salary;\n\n    // Employee class responsible only for storing employee data\n    public Employee(string name, string position, int salary)\n    {\n        this.name = name;\n        this.position = position;\n        this.salary = salary;\n    }\n\n    public string GetName()\n    {\n        return name;\n    }\n\n    public string GetPosition()\n    {\n        return position;\n    }\n\n    public int GetSalary()\n    {\n        return salary;\n    }\n}\n\npublic class EmployeePrinter\n{\n    // Printer class responsible only for printing employee information\n    public void Print(Employee employee)\n    {\n        Console.WriteLine($\"Name: {employee.GetName()}\");\n        Console.WriteLine($\"Position: {employee.GetPosition()}\");\n        Console.WriteLine($\"Salary: {employee.GetSalary()}\");\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // Usage\n        Employee employee = new Employee(\"John Doe\", \"Software Engineer\", 50000);\n        EmployeePrinter printer = new EmployeePrinter();\n        printer.Print(employee);\n    }\n}"},{"title":"Bad Example","codeFile":"principles/solid/single-responsibility/bad-example","code":"using System;\n\nclass Employee\n{\n    private string Name;\n    private string Position;\n    private double Salary;\n\n    public Employee(string name, string position, double salary)\n    {\n        this.Name = name;\n        this.Position = position;\n        this.Salary = salary;\n    }\n\n    // Method responsible for printing employee information\n    public void Print()\n    {\n        Console.WriteLine($\"Name: {this.Name}\");\n        Console.WriteLine($\"Position: {this.Position}\");\n        Console.WriteLine($\"Salary: {this.Salary}\");\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Employee employee = new Employee(\"John Doe\", \"Software Engineer\", 50000);\n        employee.Print();\n    }\n}"}]},{"title":"Open-Closed","examples":[{"title":"Good Example","codeFile":"principles/solid/open-closed/good-example","code":"using System;\n\n// Define an abstract Shape class with a method signature for computing area\npublic abstract class Shape\n{\n    public abstract double ComputeArea();\n}\n\n// Rectangle class inherits from Shape and implements ComputeArea\npublic class Rectangle : Shape\n{\n    private double width;\n    private double height;\n\n    public Rectangle(double width, double height)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    public override double ComputeArea()\n    {\n        return width * height;\n    }\n}\n\n// Circle class inherits from Shape and implements ComputeArea\npublic class Circle : Shape\n{\n    private double radius;\n\n    public Circle(double radius)\n    {\n        this.radius = radius;\n    }\n\n    public override double ComputeArea()\n    {\n        return Math.PI * Math.Pow(radius, 2);\n    }\n}"},{"title":"Bad Example","codeFile":"principles/solid/open-closed/bad-example","code":"using System;\n\npublic class Rectangle {\n  public double Width { get; set; }\n  public double Height { get; set; }\n}\n\npublic class Circle {\n  public double Radius { get; set; }\n}\n\n// Introduces an interface to abstract the shape behavior\npublic interface IShape {\n  double ComputeArea();\n}\n\n// Refactoring Rectangle to implement IShape\npublic class RectangleShape : Rectangle, IShape {\n  public double ComputeArea() {\n    return Width * Height;\n  }\n}\n\n// Refactoring Circle to implement IShape\npublic class CircleShape : Circle, IShape {\n  public double ComputeArea() {\n    return Math.PI * Radius * Radius;\n  }\n}\n\n// Refactored AreaCalculator to utilize polymorphism\npublic class AreaCalculator {\n  public double ComputeArea(IShape shape) {\n    return shape.ComputeArea();\n  }\n}"}]},{"title":"Liskov Substitution","examples":[{"title":"Good Example","codeFile":"principles/solid/liskov-substitution/good-example","code":"using System;\n\nclass Bird\n{\n    public virtual void Fly()\n    {\n        Console.WriteLine(\"Bird is flying\");\n    }\n}\n\nclass Duck : Bird\n{\n    public void Quack()\n    {\n        Console.WriteLine(\"Duck is quacking\");\n    }\n}\n\nclass Goose : Bird\n{\n    public void Swim()\n    {\n        // Fixed the output message to align with class context\n        Console.WriteLine(\"Goose is swimming\");\n    }\n}\n\nclass Program\n{\n    static void MakeBirdFly(Bird bird)\n    {\n        bird.Fly();\n    }\n\n    static void Main(string[] args)\n    {\n        Duck duck = new Duck();\n        Goose goose = new Goose();\n\n        MakeBirdFly(duck);    // Output: Bird is flying\n        MakeBirdFly(goose);   // Output: Bird is flying\n    }\n}"},{"title":"Bad Example","codeFile":"principles/solid/liskov-substitution/bad-example","code":"using System;\n\npublic class Bird\n{\n    public virtual void Fly()\n    {\n        // Implementation of fly for general birds\n    }\n}\n\npublic class Ostrich : Bird\n{\n    public override void Fly()\n    {\n        throw new InvalidOperationException(\"Can't fly\"); // Ostrich, being a Bird, should not alter the expected behavior of the fly method\n    }\n}"}]},{"title":"Interface Segregation","examples":[{"title":"Good Example","codeFile":"principles/solid/interface-segregation/good-example","code":"using System;\n\ninterface IPrinter\n{\n    void PrintDocument();\n}\n\ninterface IFax\n{\n    void FaxDocument();\n}\n\ninterface IScanner\n{\n    void ScanDocument();\n}\n\nclass SimplePrinter : IPrinter\n{\n    public void PrintDocument()\n    {\n        // Prints the document\n        Console.WriteLine(\"Printing document...\");\n    }\n}\n\nclass MultifunctionalPrinter : IPrinter, IFax, IScanner\n{\n    public void PrintDocument()\n    {\n        // Prints the document\n        Console.WriteLine(\"Printing document...\");\n    }\n\n    public void FaxDocument()\n    {\n        // Faxes the document\n        Console.WriteLine(\"Faxing document...\");\n    }\n\n    public void ScanDocument()\n    {\n        // Scans the document\n        Console.WriteLine(\"Scanning document...\");\n    }\n}"},{"title":"Bad Example","codeFile":"principles/solid/interface-segregation/bad-example","code":"using System;\n\n// Defining the basic functions that a machine can perform\ninterface IPrinter\n{\n    void PrintDocument();\n}\n\ninterface IFax\n{\n    void FaxDocument();\n}\n\ninterface IScanner\n{\n    void ScanDocument();\n}\n\n// Implementing only the relevant function for an Old Printer\nclass OldPrinter : IPrinter\n{\n    public void PrintDocument()\n    {\n        Console.WriteLine(\"Printing document...\");\n    }\n}"}]},{"title":"Dependency Inversion","examples":[{"title":"Good Example","codeFile":"principles/solid/interface-segregation/good-example","code":"using System;\n\ninterface IPrinter\n{\n    void PrintDocument();\n}\n\ninterface IFax\n{\n    void FaxDocument();\n}\n\ninterface IScanner\n{\n    void ScanDocument();\n}\n\nclass SimplePrinter : IPrinter\n{\n    public void PrintDocument()\n    {\n        // Prints the document\n        Console.WriteLine(\"Printing document...\");\n    }\n}\n\nclass MultifunctionalPrinter : IPrinter, IFax, IScanner\n{\n    public void PrintDocument()\n    {\n        // Prints the document\n        Console.WriteLine(\"Printing document...\");\n    }\n\n    public void FaxDocument()\n    {\n        // Faxes the document\n        Console.WriteLine(\"Faxing document...\");\n    }\n\n    public void ScanDocument()\n    {\n        // Scans the document\n        Console.WriteLine(\"Scanning document...\");\n    }\n}"},{"title":"Bad Example","codeFile":"principles/solid/interface-segregation/bad-example","code":"using System;\n\n// Defining the basic functions that a machine can perform\ninterface IPrinter\n{\n    void PrintDocument();\n}\n\ninterface IFax\n{\n    void FaxDocument();\n}\n\ninterface IScanner\n{\n    void ScanDocument();\n}\n\n// Implementing only the relevant function for an Old Printer\nclass OldPrinter : IPrinter\n{\n    public void PrintDocument()\n    {\n        Console.WriteLine(\"Printing document...\");\n    }\n}"}]}],"principles_other":[{"title":"Don't Repeat Yourself (DRY)","examples":[{"title":"Good Example","codeFile":"principles/other/dry/good-example","code":"using System;\n\nclass Program\n{\n    // Using optional parameters for repeated logic\n    static double AddTax(double price, double rate = 0.05)\n    {\n        return price + (price * rate);\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(AddTax(100)); // Using default tax rate\n        Console.WriteLine(AddTax(100, 0.1)); // Using custom tax rate\n    }\n}"},{"title":"Bad Example","codeFile":"principles/other/dry/bad-example","code":"using System;\n\nclass Program\n{\n    // Method to add tax\n    static double AddTax(double price, double taxRate)\n    {\n        return price + (price * taxRate);\n    }\n\n    static void Main()\n    {\n        double foodPrice = 100.0;\n        double electronicsPrice = 200.0;\n        double taxRate = 0.05; // 5% Tax rate for both food and electronics\n        \n        // Applying tax for food\n        double foodPriceWithTax = AddTax(foodPrice, taxRate);\n        Console.WriteLine($\"Food price with tax: {foodPriceWithTax}\");\n\n        // Applying tax for electronics\n        double electronicsPriceWithTax = AddTax(electronicsPrice, taxRate);\n        Console.WriteLine($\"Electronics price with tax: {electronicsPriceWithTax}\");\n    }\n}"}]},{"title":"Keep It Simple Stupid (KISS)","examples":[{"title":"Good Example","codeFile":"principles/other/kiss/good-example","code":"using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(IsEven(10)); // Outputs: True\n        Console.WriteLine(IsEven(5));  // Outputs: False\n    }\n\n    // Determines if a number is even\n    static bool IsEven(int num)\n    {\n        return num % 2 == 0;\n    }\n}"},{"title":"Bad Example","codeFile":"principles/other/kiss/bad-example","code":"using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        // there is no need for absolute value here\n        bool isEven = IsEven(4);\n        Console.WriteLine(isEven);\n    }\n\n    static bool IsEven(int num)\n    {\n        return num % 2 == 0;\n    }\n}"}]},{"title":"You Aren't Gonna Need It (YAGNI)","examples":[{"codeFile":"principles/other/yagni/bad-example","code":"using System;\n\nclass Calculator {\n  public int Add(int a, int b) {\n    return a + b;\n  }\n\n  // Do not define methods unless they are used\n\n  // Removed multiply method\n\n  // Removed divide method\n\n  public int Subtract(int a, int b) {\n    return a - b;\n  }\n}"}]},{"title":"Law of Demeter (Principle of Least Knowledge)","examples":[{"title":"Good Example","codeFile":"principles/other/demeter/good-example","code":"using System;\n\npublic class Wallet\n{\n    private decimal money;\n\n    public Wallet()\n    {\n        this.money = 100;\n    }\n\n    public decimal GetAmount()\n    {\n        return this.money;\n    }\n}\n\npublic class Person\n{\n    public Wallet wallet;\n\n    public Person()\n    {\n        this.wallet = new Wallet();\n    }\n\n    public decimal GetMoneyAmount()\n    {\n        return this.wallet.GetAmount();\n    }\n}\n\npublic class Program\n{\n    public static void Purchase(object item, Person buyer)\n    {\n        // Assuming \"item\" is an object with a \"price\" property. \n        // In a real-world scenario, \"item\" should be defined as a class or struct.\n\n        dynamic dItem = item; // Using 'dynamic' for simplicity, though not best practice for performance and type safety.\n        if (buyer.GetMoneyAmount() >= dItem.price)\n        {\n            // ... \n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        // Example of using the above setup\n    }\n}"},{"title":"Bad Example","codeFile":"principles/other/demeter/bad-example","code":"```csharp\nusing System;\n\npublic class Wallet\n{\n    // Representing wallet with money inside\n    public Money Money { get; set; }\n\n    public Wallet()\n    {\n        // Initialize wallet with $100\n        this.Money = new Money { Amount = 100 };\n    }\n}\n\npublic class Money\n{\n    // Money amount\n    public decimal Amount { get; set; }\n}\n\npublic class Person\n{\n    // Person has a wallet\n    public Wallet Wallet { get; set; }\n\n    public Person()\n    {\n        // Initialize person with a wallet\n        this.Wallet = new Wallet();\n    }\n}\n\npublic class Program\n{\n    public static void Purchase(Item item, Person buyer)\n    {\n        // Check if buyer's wallet has enough money for the item\n        if (buyer.Wallet.Money.Amount >= item.Price)\n        {\n            // Purchase logic...\n        }\n    }\n\n    public static void Main(string[] args)\n    {\n        // Example usage\n    }\n}\n\npublic class Item\n{\n    // Item has a price\n    public decimal Price { get; set; }\n}\n```"}]},{"title":"Separation of Concerns","examples":[{"title":"Good Example","codeFile":"principles/other/separation/good-example","code":"using System;\nusing System.Collections.Generic;\n\n// Authentication service\nclass AuthenticationService\n{\n    public bool Login(string username, string password)\n    {\n        // Authentication logic here\n        return true; // Dummy implementation\n    }\n\n    public void Logout()\n    {\n        // Logout logic here\n    }\n}\n\n// Data service\nclass DataService\n{\n    public List<object> FetchData()\n    {\n        // Data retrieval logic here\n        return new List<object>(); // Dummy implementation\n    }\n}\n\n// UserController and DataController serve as intermediaries between the HTTP layer (not shown) and the services.\n// Each component has a single responsibility, promoting modularity, testability, and maintainability.\n\n// User controller\nclass UserController\n{\n    private AuthenticationService authService;\n\n    public UserController(AuthenticationService authService)\n    {\n        this.authService = authService;\n    }\n\n    public bool LoginUser(string username, string password)\n    {\n        return this.authService.Login(username, password);\n    }\n\n    public void LogoutUser()\n    {\n        this.authService.Logout();\n    }\n}\n\n// Data controller\nclass DataController\n{\n    private DataService dataService;\n\n    public DataController(DataService dataService)\n    {\n        this.dataService = dataService;\n    }\n\n    public List<object> GetData()\n    {\n        return this.dataService.FetchData();\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        AuthenticationService authService = new AuthenticationService();\n        DataService dataService = new DataService();\n\n        UserController userController = new UserController(authService);\n        DataController dataController = new DataController(dataService);\n\n        // Simulate user login/logout\n        userController.LoginUser(\"username\", \"password\");\n        userController.LogoutUser();\n\n        // Retrieve data\n        var data = dataController.GetData();\n        Console.WriteLine(data);\n    }\n}"},{"title":"Bad Example","codeFile":"principles/other/separation/bad-example","code":"using System;\nusing System.Collections.Generic;\n\n// Authentication service\nclass AuthenticationService {\n  public bool Login(string username, string password) {\n    // Authentication logic here\n    return true; // Dummy implementation\n  }\n\n  public void Logout() {\n    // Logout logic here\n  }\n}\n\n// Data service\nclass DataService {\n  public List<object> FetchData() {\n    // Data retrieval logic here\n    return new List<object>(); // Dummy implementation\n  }\n}\n\n/**\n * - The `CombinedController` class is responsible for both user authentication and data retrieval.\n * - The loginUser method not only handles authentication but also retrieves user data directly\n *   from the `DataService`, violating the Single Responsibility Principle and mixing concerns.\n * - This violates the principle of Separation of Concerns and makes the code harder to maintain, test, and understand.\n */\nclass CombinedController {\n  private AuthenticationService authService;\n  private DataService dataService;\n\n  public CombinedController(AuthenticationService authService, DataService dataService) {\n    this.authService = authService;\n    this.dataService = dataService;\n  }\n\n  public bool LoginUser(string username, string password) {\n    // Authentication logic here\n    bool isAuthenticated = authService.Login(username, password);\n    if (isAuthenticated) {\n      // Retrieve user data (mixing concerns)\n      var userData = dataService.FetchData();\n      Console.WriteLine(userData);\n    }\n    return isAuthenticated;\n  }\n\n  public void LogoutUser() {\n    // Logout logic here\n    authService.Logout();\n  }\n}\n\nclass Program {\n    static void Main(string[] args) {\n        // Usage\n        var authService = new AuthenticationService();\n        var dataService = new DataService();\n\n        var combinedController = new CombinedController(authService, dataService);\n\n        // Simulate user login/logout\n        combinedController.LoginUser(\"username\", \"password\");\n        combinedController.LogoutUser();\n    }\n}"}]}],"principles_proprietary":[{"title":"Properties and Auto-Implemented Properties","description":[{"variant":"subtitle1","content":"C# provides properties as a way to encapsulate access to fields of a class. Auto-implemented properties simplify property declaration when no additional logic is required in the property accessors.\n"}],"examples":[{"code":"public class Person {\n    public string Name { get; set; } // Auto-implemented property\n}\n"}]},{"title":"Delegates and Events","description":[{"variant":"subtitle1","content":"Delegates are type-safe function pointers allowing methods to be passed as arguments. Events in C# are a way of providing notifications. They use delegates to allow consumer objects to subscribe to events.\n"}],"examples":[{"code":"public delegate void EventHandler(string message);\npublic class MyEventClass {\n    public event EventHandler MyEvent;\n\n    public void TriggerEvent() {\n        MyEvent?.Invoke(\"Event triggered!\");\n    }\n}\n"}]},{"title":"Language Integrated Query (LINQ)","description":[{"variant":"subtitle1","content":"LINQ introduces query capabilities directly into the C# language. It provides a consistent model for working with data across various sources (arrays, collections, databases).\n"}],"examples":[{"code":"var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar evenNumbers = from num in numbers\n                  where num % 2 == 0\n                  select num;\n"}]},{"title":"Async/Await","description":[{"variant":"subtitle1","content":"The async and await keywords in C# are used for asynchronous programming, allowing non-blocking operations without complex callbacks or thread management.\n"}],"examples":[{"code":"public async Task<string> GetDataAsync() {\n    using (var client = new HttpClient()) {\n        string data = await client.GetStringAsync(\"https://api.example.com/data\");\n        return data;\n    }\n}\n"}]},{"title":"Nullable Reference Types","description":[{"variant":"subtitle1","content":"(Introduced in C# 8.0): Allows for explicit declaration of nullable and non-nullable reference types, enhancing code safety by making nullability a part of the type system.\n"}],"examples":[{"code":"public class ExampleClass {\n    public string NonNullableProperty { get; set; }\n    public string? NullableProperty { get; set; } // C# 8.0 feature\n}\n"}]},{"title":"Pattern Matching","description":[{"variant":"subtitle1","content":"(Enhanced in C# 7.0 and beyond): Provides a powerful way to work with data based on its shape or structure, allowing for more expressive conditional logic.\n"}],"examples":[{"code":"public void DoAction(object obj) {\n    if (obj is int i) {\n        Console.WriteLine($\"Integer: {i}\");\n    } else if (obj is string s) {\n        Console.WriteLine($\"String: {s}\");\n    }\n}\n"}]},{"title":"Record Types","description":[{"variant":"subtitle1","content":"(Introduced in C# 9.0): Records are a reference type that provides built-in functionality for encapsulating immutable data. They are especially useful for value-based equality.\n"}],"examples":[{"code":"public record Person(string Name, int Age);\n"}]},{"title":"Local Functions","description":[{"variant":"subtitle1","content":"C# allows defining functions inside the body of another function, enhancing encapsulation and readability for helper functions.\n"}],"examples":[{"code":"public void OuterFunction() {\n    int InnerFunction(int x) => x * x;\n    Console.WriteLine(InnerFunction(5));\n}\n"}]},{"title":"Extension Methods","description":[{"variant":"subtitle1","content":"Extension methods enable adding new methods to existing types without modifying them, enhancing the flexibility of type extension.\n"}],"examples":[{"code":"public static class StringExtensions {\n    public static string Quote(this string input) => $\"\\\"{input}\\\"\";\n}\n"}]}]}}