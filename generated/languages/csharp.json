{"name":"C# (C Sharp)","code":"csharp","birth":2000,"death":"N/A","inspiredBy":["C++","Java","Delphi","Modula-3"],"inspiring":["Swift","Kotlin"],"description":"C# is a versatile, multi-paradigm programming language developed by Microsoft as part of its .NET initiative.\nDesigned to be simple yet powerful, C# is widely used for developing desktop applications, web applications (via ASP.NET),\nand more recently, mobile applications through Xamarin. Since its inception, C# has evolved significantly, with C# 7.0 and\nabove introducing features that enhance the language's functionality and developer productivity. These features include tuples\nfor grouping data, pattern matching for more expressive conditionals, local functions for better encapsulation, and\nasync/await for asynchronous programming. With the introduction of .NET Core and .NET 5+, C# has become a cross-platform\nlanguage, running on Linux and macOS in addition to Windows. C# 8.0 introduced nullable reference types to improve code safety,\nand C# 9.0 introduced records for immutable data structures, making it an attractive choice for modern software development\npractices that emphasize safety, performance, and reliability.\n","patterns":{"patterns_behavioural":[{"title":"Chain Of Responsibility","examples":[{"code":"public abstract class Handler {\n    protected Handler nextHandler;\n\n    public Handler(Handler nextHandler) {\n        this.nextHandler = nextHandler;\n    }\n\n    public virtual string Handle(string request) {\n        if (nextHandler != null) {\n            return nextHandler.Handle(request);\n        }\n\n        return null;\n    }\n}\n\npublic class ConcreteHandler1 : Handler {\n    public ConcreteHandler1(Handler nextHandler) : base(nextHandler) {}\n\n    public override string Handle(string request) {\n        if (request == \"handle1\") {\n            return \"Handled by ConcreteHandler1\";\n        }\n        return base.Handle(request);\n    }\n}\n\npublic class ConcreteHandler2 : Handler {\n    public ConcreteHandler2(Handler nextHandler) : base(nextHandler) {}\n\n    public override string Handle(string request) {\n        if (request == \"handle2\") {\n            return \"Handled by ConcreteHandler2\";\n        }\n        return base.Handle(request);\n    }\n}\n\n// Usage\nvar handler1 = new ConcreteHandler1(null);\nvar handler2 = new ConcreteHandler2(handler1);\n\nConsole.WriteLine(handler2.Handle(\"handle2\"));\nConsole.WriteLine(handler2.Handle(\"handle1\"));\n"}]},{"title":"Command","examples":[{"code":"public interface ICommand {\n    void Execute();\n}\n\npublic class Light {\n    public void TurnOn() => Console.WriteLine(\"Light turned on\");\n    public void TurnOff() => Console.WriteLine(\"Light turned off\");\n}\n\npublic class TurnOnCommand : ICommand {\n    private Light light;\n\n    public TurnOnCommand(Light light) {\n        this.light = light;\n    }\n\n    public void Execute() {\n        light.TurnOn();\n    }\n}\n\npublic class TurnOffCommand : ICommand {\n    private Light light;\n\n    public TurnOffCommand(Light light) {\n        this.light = light;\n    }\n\n    public void Execute() {\n        light.TurnOff();\n    }\n}\n\npublic class RemoteControl {\n    public void Submit(ICommand command) {\n        command.Execute();\n    }\n}\n\n// Usage\nvar light = new Light();\nvar turnOnCommand = new TurnOnCommand(light);\nvar turnOffCommand = new TurnOffCommand(light);\nvar remote = new RemoteControl();\n\nremote.Submit(turnOnCommand);\nremote.Submit(turnOffCommand);\n"}]},{"title":"Iterator","examples":[{"code":"public interface IIterator<T> {\n    T Next();\n    bool HasNext();\n}\n\npublic class ConcreteIterator<T> : IIterator<T> {\n    private readonly List<T> _collection;\n    private int _currentIndex = 0;\n\n    public ConcreteIterator(List<T> collection) {\n        _collection = collection;\n    }\n\n    public bool HasNext() {\n        return _currentIndex < _collection.Count;\n    }\n\n    public T Next() {\n        if (!HasNext()) throw new InvalidOperationException();\n        return _collection[_currentIndex++];\n    }\n}\n\n// Usage\nvar items = new List<object> {1, \"two\", 3, \"four\", 5};\nvar iterator = new ConcreteIterator<object>(items);\n\nwhile (iterator.HasNext()) {\n    Console.WriteLine(iterator.Next());\n}\n"}]},{"title":"Mediator","examples":[{"code":"public interface IMediator {\n    void Send(string message, Colleague colleague);\n}\n\npublic abstract class Colleague {\n    protected IMediator mediator;\n\n    public Colleague(IMediator mediator) {\n        this.mediator = mediator;\n    }\n\n    public abstract void Send(string message);\n    public abstract void Receive(string message);\n}\n\npublic class ConcreteMediator : IMediator {\n    private List<Colleague> colleagues = new List<Colleague>();\n\n    public void Register(Colleague colleague) {\n        colleagues.Add(colleague);\n    }\n\n    public void Send(string message, Colleague sender) {\n        foreach (var colleague in colleagues) {\n            if (colleague != sender) {\n                colleague.Receive(message);\n            }\n        }\n    }\n}\n\npublic class ConcreteColleague1 : Colleague {\n    public ConcreteColleague1(IMediator mediator) : base(mediator) {}\n\n    public override void Send(string message) {\n        mediator.Send(message, this);\n    }\n\n    public override void Receive(string message) {\n        Console.WriteLine($\"ConcreteColleague1 received: {message}\");\n    }\n}\n\npublic class ConcreteColleague2 : Colleague {\n    public ConcreteColleague2(IMediator mediator) : base(mediator) {}\n\n    public override void Send(string message) {\n        mediator.Send(message, this);\n    }\n\n    public override void Receive(string message) {\n        Console.WriteLine($\"ConcreteColleague2 received: {message}\");\n    }\n}\n\n// Usage\nvar mediator = new ConcreteMediator();\nvar colleague1 = new ConcreteColleague1(mediator);\nvar colleague2 = new ConcreteColleague2(mediator);\n\nmediator.Register(colleague1);\nmediator.Register(colleague2);\n\ncolleague1.Send(\"Hello from Colleague 1\");\ncolleague2.Send(\"Hello from Colleague 2\");\n"}]},{"title":"Memento","examples":[{"code":"public class Memento {\n    public string State { get; }\n\n    public Memento(string state) {\n        State = state;\n    }\n}\n\npublic class Originator {\n    private string _state;\n\n    public void SetState(string state) {\n        _state = state;\n    }\n\n    public Memento Save() {\n        return new Memento(_state);\n    }\n\n    public void Restore(Memento memento) {\n        _state = memento.State;\n    }\n}\n\npublic class Caretaker {\n    private List<Memento> _mementos = new List<Memento>();\n\n    public void AddMemento(Memento memento) {\n        _mementos.Add(memento);\n    }\n\n    public Memento GetMemento(int index) {\n        return _mementos[index];\n    }\n}\n\n// Usage\nvar originator = new Originator();\nvar caretaker = new Caretaker();\n\noriginator.SetState(\"State #1\");\ncaretaker.AddMemento(originator.Save());\n\noriginator.SetState(\"State #2\");\ncaretaker.AddMemento(originator.Save());\n\noriginator.Restore(caretaker.GetMemento(0));\nConsole.WriteLine($\"Current State: {_state}\");\n"}]},{"title":"Observer","examples":[{"code":"public interface IObserver {\n    void Update(string message);\n}\n\npublic interface ISubject {\n    void Attach(IObserver observer);\n    void Detach(IObserver observer);\n    void Notify(string message);\n}\n\npublic class Subject : ISubject {\n    private List<IObserver> _observers = new List<IObserver>();\n\n    public void Attach(IObserver observer) {\n        _observers.Add(observer);\n    }\n\n    public void Detach(IObserver observer) {\n        _observers.Remove(observer);\n    }\n\n    public void Notify(string message) {\n        foreach (var observer in _observers) {\n            observer.Update(message);\n        }\n    }\n}\n\npublic class ConcreteObserver : IObserver {\n    public void Update(string message) {\n        Console.WriteLine($\"Observer received: {message}\");\n    }\n}\n\n// Usage\nvar subject = new Subject();\nvar observer1 = new ConcreteObserver();\nvar observer2 = new ConcreteObserver();\n\nsubject.Attach(observer1);\nsubject.Attach(observer2);\n\nsubject.Notify(\"Hello Observers!\");\n\nsubject.Detach(observer2);\nsubject.Notify(\"Goodbye Observers!\");\n"}]},{"title":"State","examples":[{"code":"public interface IState {\n    void Handle1();\n    void Handle2();\n}\n\npublic class Context {\n    private IState _state;\n\n    public Context(IState state) {\n        TransitionTo(state);\n    }\n\n    public void TransitionTo(IState state) {\n        Console.WriteLine($\"Context: Transition to {state.GetType().Name}\");\n        _state = state;\n        _state.SetContext(this);\n    }\n\n    public void Request1() {\n        _state.Handle1();\n    }\n\n    public void Request2() {\n        _state.Handle2();\n    }\n}\n\npublic abstract class State : IState {\n    protected Context _context;\n\n    public void SetContext(Context context) {\n        _context = context;\n    }\n\n    public abstract void Handle1();\n    public abstract void Handle2();\n}\n\npublic class ConcreteStateA : State {\n    public override void Handle1() {\n        Console.WriteLine(\"ConcreteStateA handles request1.\");\n        _context.TransitionTo(new ConcreteStateB());\n    }\n\n    public override void Handle2() {\n        Console.WriteLine(\"ConcreteStateA handles request2.\");\n    }\n}\n\npublic class ConcreteStateB : State {\n    public override void Handle1() {\n        Console.WriteLine(\"ConcreteStateB handles request1.\");\n    }\n\n    public override void Handle2() {\n        Console.WriteLine(\"ConcreteStateB handles request2.\");\n        _context.TransitionTo(new ConcreteStateA());\n    }\n}\n\n// Usage\nvar context = new Context(new ConcreteStateA());\ncontext.Request1();\ncontext.Request2();\n"}]},{"title":"Strategy","examples":[{"code":"public interface IStrategy {\n    string Execute(string data);\n}\n\npublic class ConcreteStrategyA : IStrategy {\n    public string Execute(string data) {\n        return $\"Strategy A with data {data}\";\n    }\n}\n\npublic class ConcreteStrategyB : IStrategy {\n    public string Execute(string data) {\n        return $\"Strategy B with data {data}\";\n    }\n}\n\npublic class Context {\n    private IStrategy _strategy;\n\n    public Context(IStrategy strategy) {\n        _strategy = strategy;\n    }\n\n    public void SetStrategy(IStrategy strategy) {\n        _strategy = strategy;\n    }\n\n    public void ExecuteStrategy(string data) {\n        var result = _strategy.Execute(data);\n        Console.WriteLine(result);\n    }\n}\n\n// Usage\nvar context = new Context(new ConcreteStrategyA());\ncontext.ExecuteStrategy(\"123\");\n\ncontext.SetStrategy(new ConcreteStrategyB());\ncontext.ExecuteStrategy(\"456\");\n"}]},{"title":"Template Method","examples":[{"code":"public abstract class AbstractClass {\n    // The template method defines the skeleton of an algorithm.\n    public void TemplateMethod() {\n        BaseOperation1();\n        RequiredOperations1();\n        BaseOperation2();\n        Hook1();\n        RequiredOperation2();\n        BaseOperation3();\n        Hook2();\n    }\n\n    protected void BaseOperation1() {\n        Console.WriteLine(\"AbstractClass says: I am doing the bulk of the work\");\n    }\n\n    protected void BaseOperation2() {\n        Console.WriteLine(\"AbstractClass says: But I let subclasses override some operations\");\n    }\n\n    protected void BaseOperation3() {\n        Console.WriteLine(\"AbstractClass says: But I am doing the bulk of the work anyway\");\n    }\n\n    // These operations have to be implemented in subclasses.\n    protected abstract void RequiredOperations1();\n    protected abstract void RequiredOperation2();\n\n    // These are \"hooks.\" Subclasses may override them, but it's not mandatory\n    // since the hooks have default (but empty) implementation.\n    protected virtual void Hook1() { }\n    protected virtual void Hook2() { }\n}\n\npublic class ConcreteClass1 : AbstractClass {\n    protected override void RequiredOperations1() {\n        Console.WriteLine(\"ConcreteClass1 says: Implemented Operation1\");\n    }\n\n    protected override void RequiredOperation2() {\n        Console.WriteLine(\"ConcreteClass1 says: Implemented Operation2\");\n    }\n}\n\npublic class ConcreteClass2 : AbstractClass {\n    protected override void RequiredOperations1() {\n        Console.WriteLine(\"ConcreteClass2 says: Implemented Operation1\");\n    }\n\n    protected override void RequiredOperation2() {\n        Console.WriteLine(\"ConcreteClass2 says: Implemented Operation2\");\n    }\n\n    protected override void Hook1() {\n        Console.WriteLine(\"ConcreteClass2 says: Overridden Hook1\");\n    }\n}\n\n// Usage\nConsole.WriteLine(\"Same client code can work with different subclasses:\");\nvar concreteClass1 = new ConcreteClass1();\nconcreteClass1.TemplateMethod();\n\nConsole.WriteLine();\n\nvar concreteClass2 = new ConcreteClass2();\nconcreteClass2.TemplateMethod();\n"}]},{"title":"Visitor","examples":[{"code":"public interface IComponent {\n    void Accept(IVisitor visitor);\n}\n\npublic class ConcreteComponentA : IComponent {\n    public void Accept(IVisitor visitor) {\n        visitor.VisitConcreteComponentA(this);\n    }\n\n    public string ExclusiveMethodOfConcreteComponentA() {\n        return \"A\";\n    }\n}\n\npublic class ConcreteComponentB : IComponent {\n    public void Accept(IVisitor visitor) {\n        visitor.VisitConcreteComponentB(this);\n    }\n\n    public string SpecialMethodOfConcreteComponentB() {\n        return \"B\";\n    }\n}\n\npublic interface IVisitor {\n    void VisitConcreteComponentA(ConcreteComponentA element);\n    void VisitConcreteComponentB(ConcreteComponentB element);\n}\n\npublic class ConcreteVisitor1 : IVisitor {\n    public void VisitConcreteComponentA(ConcreteComponentA element) {\n        Console.WriteLine($\"{element.ExclusiveMethodOfConcreteComponentA()} + ConcreteVisitor1\");\n    }\n\n    public void VisitConcreteComponentB(ConcreteComponentB element) {\n        Console.WriteLine($\"{element.SpecialMethodOfConcreteComponentB()} + ConcreteVisitor1\");\n    }\n}\n\n// Usage\nvar components = new List<IComponent> {\n    new ConcreteComponentA(),\n    new ConcreteComponentB(),\n};\n\nvar visitor1 = new ConcreteVisitor1();\n\nforeach (var component in components) {\n    component.Accept(visitor1);\n}\n"}]}],"patterns_creational":[{"title":"Factory Method","examples":[{"code":"public interface IProduct {\n    string Operation();\n}\n\npublic class ConcreteProductA : IProduct {\n    public string Operation() {\n        return \"Result of ConcreteProductA\";\n    }\n}\n\npublic class ConcreteProductB : IProduct {\n    public string Operation() {\n        return \"Result of ConcreteProductB\";\n    }\n}\n\npublic abstract class Creator {\n    public abstract IProduct FactoryMethod();\n\n    public string SomeOperation() {\n        var product = FactoryMethod();\n        var result = $\"Creator: The same creator's code has just worked with {product.Operation()}\";\n        return result;\n    }\n}\n\npublic class ConcreteCreatorA : Creator {\n    public override IProduct FactoryMethod() => new ConcreteProductA();\n}\n\npublic class ConcreteCreatorB : Creator {\n    public override IProduct FactoryMethod() => new ConcreteProductB();\n}\n\n// Usage\nvar creatorA = new ConcreteCreatorA();\nConsole.WriteLine(\"Client: I'm not aware of the creator's class, but it still works.\\n\" + creatorA.SomeOperation());\n\nvar creatorB = new ConcreteCreatorB();\nConsole.WriteLine(\"Client: I'm not aware of the creator's class, but it still works.\\n\" + creatorB.SomeOperation());\n"}]},{"title":"Abstract Factory","examples":[{"code":"public interface IAbstractFactory {\n    IProductA CreateProductA();\n    IProductB CreateProductB();\n}\n\npublic class ConcreteFactory1 : IAbstractFactory {\n    public IProductA CreateProductA() => new ProductA1();\n\n    public IProductB CreateProductB() => new ProductB1();\n}\n\npublic class ConcreteFactory2 : IAbstractFactory {\n    public IProductA CreateProductA() => new ProductA2();\n\n    public IProductB CreateProductB() => new ProductB2();\n}\n\npublic interface IProductA {\n    string UsefulFunctionA();\n}\n\npublic class ProductA1 : IProductA {\n    public string UsefulFunctionA() => \"The result of the product A1.\";\n}\n\npublic class ProductA2 : IProductA {\n    public string UsefulFunctionA() => \"The result of the product A2.\";\n}\n\npublic interface IProductB {\n    string UsefulFunctionB();\n    string AnotherUsefulFunctionB(IProductA collaborator);\n}\n\npublic class ProductB1 : IProductB {\n    public string UsefulFunctionB() => \"The result of the product B1.\";\n\n    public string AnotherUsefulFunctionB(IProductA collaborator) => $\"The result of the B1 collaborating with the ({collaborator.UsefulFunctionA()})\";\n}\n\npublic class ProductB2 : IProductB {\n    public string UsefulFunctionB() => \"The result of the product B2.\";\n\n    public string AnotherUsefulFunctionB(IProductA collaborator) => $\"The result of the B2 collaborating with the ({collaborator.UsefulFunctionA()})\";\n}\n\n// Usage\nvoid ClientMethod(IAbstractFactory factory) {\n    var productA = factory.CreateProductA();\n    var productB = factory.CreateProductB();\n\n    Console.WriteLine(productB.UsefulFunctionB());\n    Console.WriteLine(productB.AnotherUsefulFunctionB(productA));\n}\n\nvar factory1 = new ConcreteFactory1();\nClientMethod(factory1);\n\nvar factory2 = new ConcreteFactory2();\nClientMethod(factory2);\n"}]},{"title":"Builder","examples":[{"code":"public class Product {\n    public List<string> Parts { get; } = new List<string>();\n}\n\npublic interface IBuilder {\n    void BuildPartA();\n    void BuildPartB();\n    void BuildPartC();\n}\n\npublic class ConcreteBuilder : IBuilder {\n    private Product _product = new Product();\n\n    public ConcreteBuilder() {\n        Reset();\n    }\n\n    public void Reset() {\n        _product = new Product();\n    }\n\n    public void BuildPartA() {\n        _product.Parts.Add(\"PartA\");\n    }\n\n    public void BuildPartB() {\n        _product.Parts.Add(\"PartB\");\n    }\n\n    public void BuildPartC() {\n        _product.Parts.Add(\"PartC\");\n    }\n\n    public Product GetProduct() {\n        Product result = _product;\n        Reset();\n        return result;\n    }\n}\n\npublic class Director {\n    private IBuilder _builder;\n\n    public IBuilder Builder {\n        set { _builder = value; }\n    }\n\n    public void buildMinimalViableProduct() {\n        _builder.BuildPartA();\n    }\n\n    public void buildFullFeaturedProduct() {\n        _builder.BuildPartA();\n        _builder.BuildPartB();\n        _builder.BuildPartC();\n    }\n}\n\n// Usage\nvar director = new Director();\nvar builder = new ConcreteBuilder();\ndirector.Builder = builder;\n\ndirector.buildMinimalViableProduct();\nConsole.WriteLine(string.Join(\", \", builder.GetProduct().Parts));\n\ndirector.buildFullFeaturedProduct();\nConsole.WriteLine(string.Join(\", \", builder.GetProduct().Parts));\n"}]},{"title":"Prototype","examples":[{"code":"public interface IPrototype {\n    IPrototype Clone();\n}\n\npublic class ConcretePrototype : IPrototype {\n    public int FieldA { get; set; }\n    public string FieldB { get; set; }\n\n    public IPrototype Clone() {\n        return this.MemberwiseClone() as IPrototype;\n    }\n}\n\n// Usage\nvar original = new ConcretePrototype { FieldA = 1, FieldB = \"Prototype\" };\nvar clone = original.Clone();\n\nConsole.WriteLine($\"Original FieldA: {original.FieldA}, FieldB: {original.FieldB}\");\nConsole.WriteLine($\"Clone FieldA: {clone.FieldA}, FieldB: {clone.FieldB}\");\n"}]},{"title":"Singleton","examples":[{"code":"public class Singleton {\n    private static Singleton _instance;\n    private static readonly object _lock = new object();\n\n    private Singleton() {}\n\n    public static Singleton GetInstance() {\n        if (_instance == null) {\n            lock (_lock) {\n                if (_instance == null) {\n                    _instance = new Singleton();\n                }\n            }\n        }\n        return _instance;\n    }\n\n    public void SomeBusinessLogic() {\n        // Implementation of some business logic\n    }\n}\n\n// Usage\nvar instance1 = Singleton.GetInstance();\nvar instance2 = Singleton.GetInstance();\n\nConsole.WriteLine(instance1 == instance2);  // Output: True\n"}]}],"patterns_structural":[{"title":"Adapter","examples":[{"code":"// Target interface\npublic interface ITarget {\n    string GetRequest();\n}\n\n// Adaptee class\npublic class Adaptee {\n    public string GetSpecificRequest() {\n        return \"Specific request.\";\n    }\n}\n\n// Adapter class\npublic class Adapter : ITarget {\n    private readonly Adaptee _adaptee;\n\n    public Adapter(Adaptee adaptee) {\n        _adaptee = adaptee;\n    }\n\n    public string GetRequest() {\n        return $\"This is '{_adaptee.GetSpecificRequest()}'\";\n    }\n}\n\n// Usage\nvar adaptee = new Adaptee();\nITarget target = new Adapter(adaptee);\n\nConsole.WriteLine(\"Adaptee interface is incompatible with the client.\");\nConsole.WriteLine(\"But with adapter client can call it's method.\");\n\nConsole.WriteLine(target.GetRequest());\n"}]},{"title":"Bridge","examples":[{"code":"// Implementor\npublic interface IImplementor {\n    string OperationImpl();\n}\n\n// Concrete Implementors\npublic class ConcreteImplementorA : IImplementor {\n    public string OperationImpl() {\n        return \"ConcreteImplementorA Operation\";\n    }\n}\n\npublic class ConcreteImplementorB : IImplementor {\n    public string OperationImpl() {\n        return \"ConcreteImplementorB Operation\";\n    }\n}\n\n// Abstraction\npublic abstract class Abstraction {\n    protected IImplementor implementor;\n\n    protected Abstraction(IImplementor implementor) {\n        this.implementor = implementor;\n    }\n\n    public virtual string Operation() {\n        return \"Abstract: Base operation with:\\n\" +\n              implementor.OperationImpl();\n    }\n}\n\n// RefinedAbstraction\npublic class RefinedAbstraction : Abstraction {\n    public RefinedAbstraction(IImplementor implementor) : base(implementor) {}\n\n    public override string Operation() {\n        return \"RefinedAbstraction: Extended operation with:\\n\" +\n              implementor.OperationImpl();\n    }\n}\n\n// Usage\nvar implementorA = new ConcreteImplementorA();\nvar abstraction = new RefinedAbstraction(implementorA);\nConsole.WriteLine(abstraction.Operation());\n\nvar implementorB = new ConcreteImplementorB();\nabstraction = new RefinedAbstraction(implementorB);\nConsole.WriteLine(abstraction.Operation());\n"}]},{"title":"Composite","examples":[{"code":"// Component\npublic abstract class Component {\n    public string Name { get; }\n\n    protected Component(string name) {\n        Name = name;\n    }\n\n    public abstract void Add(Component component);\n    public abstract void Remove(Component component);\n    public abstract void Display(int depth);\n}\n\n// Leaf\npublic class Leaf : Component {\n    public Leaf(string name) : base(name) {}\n\n    public override void Add(Component component) {\n        throw new NotImplementedException();\n    }\n\n    public override void Remove(Component component) {\n        throw new NotImplementedException();\n    }\n\n    public override void Display(int depth) {\n        Console.WriteLine(new String('-', depth) + Name);\n    }\n}\n\n// Composite\npublic class Composite : Component {\n    private List<Component> _children = new List<Component>();\n\n    public Composite(string name) : base(name) {}\n\n    public override void Add(Component component) {\n        _children.Add(component);\n    }\n\n    public override void Remove(Component component) {\n        _children.Remove(component);\n    }\n\n    public override void Display(int depth) {\n        Console.WriteLine(new String('-', depth) + Name);\n\n        foreach (var component in _children) {\n            component.Display(depth + 2);\n        }\n    }\n}\n\n// Usage\nvar root = new Composite(\"root\");\nroot.Add(new Leaf(\"Leaf A\"));\nroot.Add(new Leaf(\"Leaf B\"));\n\nvar comp = new Composite(\"Composite X\");\ncomp.Add(new Leaf(\"Leaf XA\"));\ncomp.Add(new Leaf(\"Leaf XB\"));\n\nroot.Add(comp);\nroot.Add(new Leaf(\"Leaf C\"));\n\nvar leaf = new Leaf(\"Leaf D\");\nroot.Add(leaf);\nroot.Remove(leaf);\n\nroot.Display(1);\n"}]},{"title":"Decorator","examples":[{"code":"// Component\npublic abstract class Component {\n    public abstract string Operation();\n}\n\n// ConcreteComponent\npublic class ConcreteComponent : Component {\n    public override string Operation() {\n        return \"ConcreteComponent\";\n    }\n}\n\n// Decorator\npublic abstract class Decorator : Component {\n    protected Component component;\n\n    public Decorator(Component component) {\n        this.component = component;\n    }\n\n    public void SetComponent(Component component) {\n        this.component = component;\n    }\n\n    public override string Operation() {\n        if (component != null) {\n            return component.Operation();\n        } else {\n            return string.Empty;\n        }\n    }\n}\n\n// ConcreteDecoratorA\npublic class ConcreteDecoratorA : Decorator {\n    public ConcreteDecoratorA(Component component) : base(component) {}\n\n    public override string Operation() {\n        return $\"ConcreteDecoratorA({base.Operation()})\";\n    }\n}\n\n// ConcreteDecoratorB\npublic class ConcreteDecoratorB : Decorator {\n    public ConcreteDecoratorB(Component component) : base(component) {}\n\n    public override string Operation() {\n        return $\"ConcreteDecoratorB({base.Operation()})\";\n    }\n}\n\n// Usage\nComponent component = new ConcreteComponent();\nvar decoratorA = new ConcreteDecoratorA(component);\nvar decoratorB = new ConcreteDecoratorB(decoratorA);\n\nConsole.WriteLine(decoratorB.Operation());\n"}]},{"title":"Facade","examples":[{"code":"// Subsystem Classes\npublic class SubsystemA {\n    public string OperationA1() => \"Subsystem A, Method A1\\n\";\n    public string OperationA2() => \"Subsystem A, Method A2\\n\";\n}\n\npublic class SubsystemB {\n    public string OperationB1() => \"Subsystem B, Method B1\\n\";\n    public string OperationB2() => \"Subsystem B, Method B2\\n\";\n}\n\npublic class SubsystemC {\n    public string OperationC1() => \"Subsystem C, Method C1\\n\";\n    public string OperationC2() => \"Subsystem C, Method C2\\n\";\n}\n\n// Facade\npublic class Facade {\n    protected SubsystemA _subsystemA;\n    protected SubsystemB _subsystemB;\n    protected SubsystemC _subsystemC;\n\n    public Facade(SubsystemA subsystemA, SubsystemB subsystemB, SubsystemC subsystemC) {\n        _subsystemA = subsystemA ?? throw new ArgumentNullException(nameof(subsystemA));\n        _subsystemB = subsystemB ?? throw new ArgumentNullException(nameof(subsystemB));\n        _subsystemC = subsystemC ?? throw new ArgumentNullException(nameof(subsystemC));\n    }\n\n    public string Operation() {\n        var result = \"Facade initializes subsystems:\\n\";\n        result += _subsystemA.OperationA1();\n        result += _subsystemB.OperationB1();\n        result += _subsystemC.OperationC1();\n        result += \"Facade orders subsystems to perform the action:\\n\";\n        result += _subsystemA.OperationA2();\n        result += _subsystemB.OperationB2();\n        result += _subsystemC.OperationC2();\n        return result;\n    }\n}\n\n// Usage\nvar subsystemA = new SubsystemA();\nvar subsystemB = new SubsystemB();\nvar subsystemC = new SubsystemC();\nvar facade = new Facade(subsystemA, subsystemB, subsystemC);\nConsole.WriteLine(facade.Operation());\n"}]},{"title":"Flyweight","examples":[{"code":"// Flyweight\npublic interface IFlyweight {\n    void Operation(string extrinsicState);\n}\n\n// ConcreteFlyweight\npublic class ConcreteFlyweight : IFlyweight {\n    private string _intrinsicState;\n\n    public ConcreteFlyweight(string intrinsicState) {\n        _intrinsicState = intrinsicState;\n    }\n\n    public void Operation(string extrinsicState) {\n        Console.WriteLine($\"Flyweight: Intrinsic '{_intrinsicState}' and Extrinsic '{extrinsicState}'\");\n    }\n}\n\n// FlyweightFactory\npublic class FlyweightFactory {\n    private Dictionary<string, IFlyweight> _flyweights = new Dictionary<string, IFlyweight>();\n\n    public IFlyweight GetFlyweight(string key) {\n        if (!_flyweights.ContainsKey(key)) {\n            _flyweights.Add(key, new ConcreteFlyweight(key));\n        }\n        return _flyweights[key];\n    }\n}\n\n// Usage\nvar factory = new FlyweightFactory();\nvar flyweight1 = factory.GetFlyweight(\"A\");\nvar flyweight2 = factory.GetFlyweight(\"B\");\nvar flyweight3 = factory.GetFlyweight(\"A\"); // Reuses existing instance\n\nflyweight1.Operation(\"Operation1\");\nflyweight2.Operation(\"Operation2\");\nflyweight3.Operation(\"Operation3\"); // Notice it shares intrinsic state \"A\" with flyweight1\n"}]},{"title":"Proxy","examples":[{"code":"// Subject Interface\npublic interface ISubject {\n    void Request();\n}\n\n// RealSubject Class\npublic class RealSubject : ISubject {\n    public void Request() {\n        Console.WriteLine(\"RealSubject: Handling Request.\");\n    }\n}\n\n// Proxy Class\npublic class Proxy : ISubject {\n    private RealSubject _realSubject;\n\n    public Proxy(RealSubject realSubject) {\n        _realSubject = realSubject;\n    }\n\n    public void Request() {\n        if (CheckAccess()) {\n            _realSubject.Request();\n            LogAccess();\n        }\n    }\n\n    public bool CheckAccess() {\n        // Some real checks should go here.\n        Console.WriteLine(\"Proxy: Checking access before firing a real request.\");\n        return true;\n    }\n\n    public void LogAccess() {\n        Console.WriteLine(\"Proxy: Logging the time of request.\");\n    }\n}\n\n// Usage\nISubject subject = new Proxy(new RealSubject());\nsubject.Request();\n"}]}]},"principles":{"principles_solid":[{"title":"Single Responsibility","examples":[{"title":"Good Example","code":"// Good example: Splitting responsibilities into separate classes\npublic class UserDataManager {\n    public void SaveUserData() { /* ... */ }\n}\n\npublic class UserNotificationManager {\n    public void SendNotification() { /* ... */ }\n}\n"},{"title":"Bad Example","code":"// Bad example: A single class handling both user data management and notifications\npublic class User {\n    public void SaveUserData() { /* ... */ }\n    public void SendNotification() { /* ... */ }\n}\n"}]},{"title":"Open-Closed","examples":[{"title":"Good Example","code":"// Good example: Using abstraction and inheritance for the Open/Closed principle\npublic abstract class Shape {\n    public abstract double ComputeArea();\n}\n\npublic class Rectangle : Shape {\n    public double Width { get; set; }\n    public double Height { get; set; }\n\n    public override double ComputeArea() => Width * Height;\n}\n"},{"title":"Bad Example","code":"// Bad example: Modifying an existing class to add new functionality\npublic class AreaCalculator {\n    public double ComputeArea(object shape) {\n        if (shape is Rectangle rectangle) {\n            return rectangle.Width * rectangle.Height;\n        } else if (shape is Circle circle) {\n            return Math.PI * Math.Pow(circle.Radius, 2);\n        }\n        throw new NotImplementedException();\n    }\n}\n"}]},{"title":"Liskov Substitution","examples":[{"title":"Good Example","code":"// Good example: Subtypes are substitutable for their base types\npublic class Bird {\n    public virtual void Fly() { /* ... */ }\n}\n\npublic class Sparrow : Bird {\n    public override void Fly() { /* ... */ } // Sparrow, being a Bird, can fly\n}\n"},{"title":"Bad Example","code":"// Bad example: Subtype changes the expected behavior of the base class\npublic class Bird {\n    public virtual void Fly() { /* ... */ }\n}\n\npublic class Ostrich : Bird {\n    public override void Fly() {\n        throw new InvalidOperationException(\"Can't fly\"); // This violates Liskov Substitution Principle\n    }\n}\n"}]},{"title":"Interface Segregation","examples":[{"title":"Good Example","code":"// Good example: Segregating interfaces based on different client requirements\npublic interface IWorker {\n    void Work();\n}\n\npublic interface IFeeder {\n    void Eat();\n}\n\npublic class Human : IWorker, IFeeder {\n    public void Work() { /* ... */ }\n    public void Eat() { /* ... */ }\n}\n\npublic class Robot : IWorker {\n    public void Work() { /* ... */ }\n}\n"},{"title":"Bad Example","code":"// Bad example: A single interface that does not segregate responsibilities\npublic interface IWorker {\n    void Work();\n    void Eat(); // Not all workers need to eat, e.g., robots\n}\n"}]},{"title":"Dependency Inversion","examples":[{"title":"Good Example","code":"// Good example: High-level modules depend on abstractions, not on low-level modules\npublic interface IDevice {\n    void TurnOn();\n}\n\npublic class Switch {\n    private IDevice device;\n\n    public Switch(IDevice device) {\n        this.device = device;\n    }\n\n    public void Operate() {\n        this.device.TurnOn();\n    }\n}\n\npublic class Fan : IDevice {\n    public void TurnOn() { /* ... */ }\n}\n"},{"title":"Bad Example","code":"// Bad example: High-level module depends directly on low-level module\npublic class LightBulb {\n    public void TurnOn() { /* ... */ }\n}\n\npublic class Switch {\n    private LightBulb bulb = new LightBulb();\n\n    public void Operate() {\n        this.bulb.TurnOn();\n    }\n}\n"}]}],"principles_other":[{"title":"Don't Repeat Yourself (DRY)","examples":[{"title":"Good Example","code":"// Good example: Using optional parameters to avoid repeated logic\npublic class TaxCalculator {\n    public decimal AddTax(decimal price, decimal rate = 0.05m) {\n        return price * (1 + rate);\n    }\n}\n"},{"title":"Bad Example","code":"// Bad example: Repeated logic in separate methods\npublic class TaxCalculator {\n    public decimal AddTaxForFood(decimal price) {\n        return price * 1.05m;\n    }\n\n    public decimal AddTaxForElectronics(decimal price) {\n        return price * 1.05m;\n    }\n}\n"}]},{"title":"Keep It Simple Stupid (KISS)","examples":[{"title":"Good Example","code":"// Good example: Simple method to check if a number is even\npublic bool IsEven(int num) {\n    return num % 2 == 0;\n}\n"},{"title":"Bad Example","code":"// Bad example: Overcomplicated method to check if a number is even\npublic bool IsEven(int num) {\n    return num % Math.Abs(2) == 0;\n}\n"}]},{"title":"You Aren't Gonna Need It (YAGNI)","examples":[{"title":"Good Example","code":"// Good example: Implementing only the necessary functionality\npublic class Car {\n    public void Drive() { /* ... */ }\n}\n"},{"title":"Bad Example","code":"// Bad example: Implementing unnecessary functionality\npublic class Car {\n    public void Drive() { /* ... */ }\n    public void Fly() { /* ... */ } // Unnecessary for a Car\n}\n"}]},{"title":"Law of Demeter (Principle of Least Knowledge)","examples":[{"title":"Good Example","code":"// Good example: Adhering to the Law of Demeter\npublic class Wallet {\n    private decimal _money = 100;\n    public decimal GetAmount() => _money;\n}\n\npublic class Person {\n    private Wallet _wallet = new Wallet();\n    public decimal GetMoneyAmount() => _wallet.GetAmount();\n}\n\npublic bool Purchase(decimal itemPrice, Person buyer) {\n    return buyer.GetMoneyAmount() >= itemPrice;\n}\n"},{"title":"Bad Example","code":"// Bad example: Violating the Law of Demeter\npublic class Wallet {\n    public decimal Money = 100;\n}\n\npublic class Person {\n    public Wallet Wallet = new Wallet();\n}\n\npublic bool Purchase(decimal itemPrice, Person buyer) {\n    return buyer.Wallet.Money >= itemPrice;\n}\n"}]},{"title":"Separation of Concerns","examples":[{"title":"Good Example","code":"// Good example: Separating concerns into different classes\npublic class UserDataService {\n    public void FetchUserData() { /* ... */ }\n}\n\npublic class UserLogic {\n    public int CalculateAge(DateTime birthDate) {\n        // Implementation...\n    }\n}\n\npublic class UserComponent {\n    public void Render() { /* ... */ }\n}\n"},{"title":"Bad Example","code":"// Bad example: Mixing data retrieval, logic, and presentation in one class\npublic class UserComponent {\n    public void FetchUserData() { /* ... */ }\n    public void Render() { /* ... */ }\n    public int CalculateAge(DateTime birthDate) {\n        // Implementation...\n    }\n}\n"}]}],"principles_proprietary":[{"title":"Properties and Auto-Implemented Properties","description":[{"variant":"subtitle1","content":"C# provides properties as a way to encapsulate access to fields of a class. Auto-implemented properties simplify property declaration when no additional logic is required in the property accessors.\n"}],"examples":[{"code":"public class Person {\n    public string Name { get; set; } // Auto-implemented property\n}\n"}]},{"title":"Delegates and Events","description":[{"variant":"subtitle1","content":"Delegates are type-safe function pointers allowing methods to be passed as arguments. Events in C# are a way of providing notifications. They use delegates to allow consumer objects to subscribe to events.\n"}],"examples":[{"code":"public delegate void EventHandler(string message);\npublic class MyEventClass {\n    public event EventHandler MyEvent;\n\n    public void TriggerEvent() {\n        MyEvent?.Invoke(\"Event triggered!\");\n    }\n}\n"}]},{"title":"Language Integrated Query (LINQ)","description":[{"variant":"subtitle1","content":"LINQ introduces query capabilities directly into the C# language. It provides a consistent model for working with data across various sources (arrays, collections, databases).\n"}],"examples":[{"code":"var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar evenNumbers = from num in numbers\n                  where num % 2 == 0\n                  select num;\n"}]},{"title":"Async/Await","description":[{"variant":"subtitle1","content":"The async and await keywords in C# are used for asynchronous programming, allowing non-blocking operations without complex callbacks or thread management.\n"}],"examples":[{"code":"public async Task<string> GetDataAsync() {\n    using (var client = new HttpClient()) {\n        string data = await client.GetStringAsync(\"https://api.example.com/data\");\n        return data;\n    }\n}\n"}]},{"title":"Nullable Reference Types","description":[{"variant":"subtitle1","content":"(Introduced in C# 8.0): Allows for explicit declaration of nullable and non-nullable reference types, enhancing code safety by making nullability a part of the type system.\n"}],"examples":[{"code":"public class ExampleClass {\n    public string NonNullableProperty { get; set; }\n    public string? NullableProperty { get; set; } // C# 8.0 feature\n}\n"}]},{"title":"Pattern Matching","description":[{"variant":"subtitle1","content":"(Enhanced in C# 7.0 and beyond): Provides a powerful way to work with data based on its shape or structure, allowing for more expressive conditional logic.\n"}],"examples":[{"code":"public void DoAction(object obj) {\n    if (obj is int i) {\n        Console.WriteLine($\"Integer: {i}\");\n    } else if (obj is string s) {\n        Console.WriteLine($\"String: {s}\");\n    }\n}\n"}]},{"title":"Record Types","description":[{"variant":"subtitle1","content":"(Introduced in C# 9.0): Records are a reference type that provides built-in functionality for encapsulating immutable data. They are especially useful for value-based equality.\n"}],"examples":[{"code":"public record Person(string Name, int Age);\n"}]},{"title":"Local Functions","description":[{"variant":"subtitle1","content":"C# allows defining functions inside the body of another function, enhancing encapsulation and readability for helper functions.\n"}],"examples":[{"code":"public void OuterFunction() {\n    int InnerFunction(int x) => x * x;\n    Console.WriteLine(InnerFunction(5));\n}\n"}]},{"title":"Extension Methods","description":[{"variant":"subtitle1","content":"Extension methods enable adding new methods to existing types without modifying them, enhancing the flexibility of type extension.\n"}],"examples":[{"code":"public static class StringExtensions {\n    public static string Quote(this string input) => $\"\\\"{input}\\\"\";\n}\n"}]}]}}