{"name":"C# (C Sharp)","code":"csharp","ext":"cs","birth":2000,"death":"N/A","inspiredBy":["C++","Java","Delphi","Modula-3"],"inspiring":["Swift","Kotlin"],"description":"C# is a versatile, multi-paradigm programming language developed by Microsoft as part of its .NET initiative.\nDesigned to be simple yet powerful, C# is widely used for developing desktop applications, web applications (via ASP.NET),\nand more recently, mobile applications through Xamarin. Since its inception, C# has evolved significantly, with C# 7.0 and\nabove introducing features that enhance the language's functionality and developer productivity. These features include tuples\nfor grouping data, pattern matching for more expressive conditionals, local functions for better encapsulation, and\nasync/await for asynchronous programming. With the introduction of .NET Core and .NET 5+, C# has become a cross-platform\nlanguage, running on Linux and macOS in addition to Windows. C# 8.0 introduced nullable reference types to improve code safety,\nand C# 9.0 introduced records for immutable data structures, making it an attractive choice for modern software development\npractices that emphasize safety, performance, and reliability.\n","patterns":{"patterns_behavioural":[{"title":"Chain Of Responsibility","examples":[]},{"title":"Command","examples":[]},{"title":"Iterator","examples":[]},{"title":"Mediator","examples":[]},{"title":"Memento","examples":[]},{"title":"Observer","examples":[]},{"title":"State","examples":[]},{"title":"Strategy","examples":[]},{"title":"Template Method","examples":[]},{"title":"Visitor","examples":[]}],"patterns_creational":[{"title":"Factory Method","examples":[]},{"title":"Abstract Factory","examples":[]},{"title":"Builder","examples":[]},{"title":"Prototype","examples":[]},{"title":"Singleton","examples":[]}],"patterns_structural":[{"title":"Adapter","examples":[]},{"title":"Bridge","examples":[]},{"title":"Composite","examples":[]},{"title":"Decorator","examples":[]},{"title":"Facade","examples":[]},{"title":"Flyweight","examples":[]},{"title":"Proxy","examples":[]}]},"principles":{"principles_solid":[{"title":"Single Responsibility Principle (SRP)","examples":[]},{"title":"Open/Closed Principle (OCP)","examples":[]},{"title":"Liskov Substitution Principle (LSP)","examples":[]},{"title":"Interface Segregation Principle (ISP)","examples":[]},{"title":"Dependency Inversion Principle (DIP)","examples":[]}],"principles_other":[{"title":"Don't Repeat Yourself (DRY)","examples":[]},{"title":"Keep It Simple Stupid (KISS)","examples":[]},{"title":"You Aren't Gonna Need It (YAGNI)","examples":[]},{"title":"Law of Demeter (Principle of Least Knowledge)","examples":[]},{"title":"Separation of Concerns","examples":[]}],"principles_proprietary":[{"title":"Properties and Auto-Implemented Properties","description":[{"variant":"subtitle1","content":"C# provides properties as a way to encapsulate access to fields of a class. Auto-implemented properties simplify property declaration when no additional logic is required in the property accessors.\n"}],"examples":[{"code":"public class Person {\n    public string Name { get; set; } // Auto-implemented property\n}\n"}]},{"title":"Delegates and Events","description":[{"variant":"subtitle1","content":"Delegates are type-safe function pointers allowing methods to be passed as arguments. Events in C# are a way of providing notifications. They use delegates to allow consumer objects to subscribe to events.\n"}],"examples":[{"code":"public delegate void EventHandler(string message);\npublic class MyEventClass {\n    public event EventHandler MyEvent;\n\n    public void TriggerEvent() {\n        MyEvent?.Invoke(\"Event triggered!\");\n    }\n}\n"}]},{"title":"Language Integrated Query (LINQ)","description":[{"variant":"subtitle1","content":"LINQ introduces query capabilities directly into the C# language. It provides a consistent model for working with data across various sources (arrays, collections, databases).\n"}],"examples":[{"code":"var numbers = new List<int> { 1, 2, 3, 4, 5 };\nvar evenNumbers = from num in numbers\n                  where num % 2 == 0\n                  select num;\n"}]},{"title":"Async/Await","description":[{"variant":"subtitle1","content":"The async and await keywords in C# are used for asynchronous programming, allowing non-blocking operations without complex callbacks or thread management.\n"}],"examples":[{"code":"public async Task<string> GetDataAsync() {\n    using (var client = new HttpClient()) {\n        string data = await client.GetStringAsync(\"https://api.example.com/data\");\n        return data;\n    }\n}\n"}]},{"title":"Nullable Reference Types","description":[{"variant":"subtitle1","content":"(Introduced in C# 8.0): Allows for explicit declaration of nullable and non-nullable reference types, enhancing code safety by making nullability a part of the type system.\n"}],"examples":[{"code":"public class ExampleClass {\n    public string NonNullableProperty { get; set; }\n    public string? NullableProperty { get; set; } // C# 8.0 feature\n}\n"}]},{"title":"Pattern Matching","description":[{"variant":"subtitle1","content":"(Enhanced in C# 7.0 and beyond): Provides a powerful way to work with data based on its shape or structure, allowing for more expressive conditional logic.\n"}],"examples":[{"code":"public void DoAction(object obj) {\n    if (obj is int i) {\n        Console.WriteLine($\"Integer: {i}\");\n    } else if (obj is string s) {\n        Console.WriteLine($\"String: {s}\");\n    }\n}\n"}]},{"title":"Record Types","description":[{"variant":"subtitle1","content":"(Introduced in C# 9.0): Records are a reference type that provides built-in functionality for encapsulating immutable data. They are especially useful for value-based equality.\n"}],"examples":[{"code":"public record Person(string Name, int Age);\n"}]},{"title":"Local Functions","description":[{"variant":"subtitle1","content":"C# allows defining functions inside the body of another function, enhancing encapsulation and readability for helper functions.\n"}],"examples":[{"code":"public void OuterFunction() {\n    int InnerFunction(int x) => x * x;\n    Console.WriteLine(InnerFunction(5));\n}\n"}]},{"title":"Extension Methods","description":[{"variant":"subtitle1","content":"Extension methods enable adding new methods to existing types without modifying them, enhancing the flexibility of type extension.\n"}],"examples":[{"code":"public static class StringExtensions {\n    public static string Quote(this string input) => $\"\\\"{input}\\\"\";\n}\n"}]}]}}