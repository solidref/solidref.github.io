{"name":"PHP","code":"php","ext":"php","birth":1995,"death":"N/A","inspiredBy":["c","perl","java","c++"],"inspiring":["hack"],"description":"PHP (Hypertext Preprocessor) is a popular general-purpose scripting language that is especially suited to web development.\nIt was originally created by Rasmus Lerdorf in 1995 and has since become one of the most widely used languages for server-side development.\nPHP code is executed on the server, and the result is returned to the client as plain HTML. The language is known for its ease of use and\nability to be embedded directly within HTML code. PHP offers a wide range of functionality for web development, including database interaction,\nsession management, and data encryption. It's used in the development of content management systems (CMS), e-commerce platforms, and web applications.\nPHP has a large and active community, contributing to its continuous evolution and the addition of modern features to meet the changing demands of web development.\n","patterns":{"patterns_behavioural":[{"title":"Chain Of Responsibility","examples":[{"codeFile":"patterns/behavioural/chain-of-responsibility/example","code":"<?php\n\ninterface SupportHandler {\n    public function setNextHandler(SupportHandler $handler): void;\n    public function handleRequest(string $request): ?string;\n}\n\nclass Level1Support implements SupportHandler {\n    private ?SupportHandler $nextHandler = null;\n\n    public function setNextHandler(SupportHandler $handler): void {\n        $this->nextHandler = $handler;\n    }\n\n    public function handleRequest(string $request): ?string {\n        if (strpos($request, 'basic') !== false) {\n            return 'Level 1 Support: Issue resolved at basic level.';\n        } elseif ($this->nextHandler !== null) {\n            return $this->nextHandler->handleRequest($request);\n        } else {\n            return null; // No more handlers in the chain\n        }\n    }\n}\n\nclass Level2Support implements SupportHandler {\n    private ?SupportHandler $nextHandler = null;\n\n    public function setNextHandler(SupportHandler $handler): void {\n        $this->nextHandler = $handler;\n    }\n\n    public function handleRequest(string $request): ?string {\n        if (strpos($request, 'advanced') !== false) {\n            return 'Level 2 Support: Issue resolved at advanced level.';\n        } elseif ($this->nextHandler !== null) {\n            return $this->nextHandler->handleRequest($request);\n        } else {\n            return null; // No more handlers in the chain\n        }\n    }\n}\n\nclass Level3Support implements SupportHandler {\n    public function setNextHandler(SupportHandler $handler): void {\n        throw new Exception('Level 3 Support is the highest level and does not have a next handler.');\n    }\n\n    public function handleRequest(string $request): ?string {\n        if (strpos($request, 'bug') !== false) {\n            return 'Level 3 Support: Issue resolved at development level.';\n        } else {\n            return 'Level 3 Support: Unable to resolve the issue.';\n        }\n    }\n}\n\nfunction main() {\n    $level1 = new Level1Support();\n    $level2 = new Level2Support();\n    $level3 = new Level3Support();\n\n    $level1->setNextHandler($level2);\n    $level2->setNextHandler($level3);\n\n    $request1 = 'Fix basic login issue';\n    $request2 = 'Debug advanced performance problem';\n    $request3 = 'Investigate bug causing application crash';\n\n    echo $level1->handleRequest($request1) . PHP_EOL;\n    echo $level1->handleRequest($request2) . PHP_EOL;\n    echo $level1->handleRequest($request3) . PHP_EOL;\n}\n\n/**\n * This PHP code demonstrates the Chain of Responsibility pattern in a support ticket system. \n * It shows how different levels of support can either handle a request or pass it along the chain \n * until it is handled. The SupportHandler interface ensures that all concrete handlers define how they \n * set the next handler and deal with requests. Concrete implementations represent various support levels.\n * Exceptions are used to handle cases where actions are not valid, such as setting a next handler \n * for the highest support level.\n */\n\nmain();\n\n?>"}]},{"title":"Command","examples":[{"codeFile":"patterns/behavioural/command/example","code":"<?php\n\n// Define the command interface\ninterface Command {\n  public function execute();\n}\n\n// Receiver class that performs the actual actions\nclass Light {\n  public function turnOn() {\n    echo 'Light is on<br>';\n  }\n\n  public function turnOff() {\n    echo 'Light is off<br>';\n  }\n}\n\n// Concrete command to turn on the light\nclass TurnOnCommand implements Command {\n  private $light;\n\n  public function __construct(Light $light) {\n    $this->light = $light;\n  }\n\n  public function execute() {\n    $this->light->turnOn();\n  }\n}\n\n// Concrete command to turn off the light\nclass TurnOffCommand implements Command {\n  private $light;\n\n  public function __construct(Light $light) {\n    $this->light = $light;\n  }\n\n  public function execute() {\n    $this->light->turnOff();\n  }\n}\n\n// Invoker class that triggers the commands\nclass RemoteControl {\n  private $commands = [];\n\n  public function addCommand(Command $command) {\n    $this->commands[] = $command;\n  }\n\n  public function executeCommands() {\n    foreach ($this->commands as $command) {\n      $command->execute();\n    }\n  }\n}\n\n// Client code\nfunction main() {\n  // Create a light\n  $light = new Light();\n\n  // Create commands for turning the light on and off\n  $turnOnCommand = new TurnOnCommand($light);\n  $turnOffCommand = new TurnOffCommand($light);\n\n  // Create a remote control and add the commands\n  $remoteControl = new RemoteControl();\n  $remoteControl->addCommand($turnOnCommand);\n  $remoteControl->addCommand($turnOffCommand);\n\n  // Press the buttons on the remote control to execute the commands\n  $remoteControl->executeCommands();\n}\n\n/**\n * This code demonstrates how the Command pattern can be used in a remote control\n * system to control a light. The Command interface defines the contract for executing\n * commands, and concrete command classes (TurnOnCommand and TurnOffCommand) encapsulate\n * the actions to be performed on the Light receiver object. The RemoteControl acts as\n * the invoker, which holds and triggers the commands. Pressing buttons on the remote\n * control executes the corresponding commands, resulting in the light being turned on\n * and off.\n */\n\nmain();\n"}]},{"title":"Iterator","examples":[{"codeFile":"patterns/behavioural/iterator/example","code":"<?php\n\nclass IteratorClass {\n    private $collection;\n    private $index;\n\n    public function __construct($collection) {\n        $this->collection = $collection;\n        $this->index = 0;\n    }\n\n    public function next() {\n        if ($this->hasNext()) {\n            return $this->collection[$this->index++];\n        } else {\n            return null;\n        }\n    }\n\n    public function hasNext() {\n        return $this->index < count($this->collection);\n    }\n}\n\n// Client code\n$items = [1, 'two', 3, 'four', 5];\n$iterator = new IteratorClass($items);\n\nwhile ($iterator->hasNext()) {\n    echo $iterator->next() . PHP_EOL;\n}\n\n/**\n * In this example, the Iterator pattern is used to iterate over a collection of books\n * stored in a BookCollection. The Iterator interface defines methods for checking if\n * there are more elements (hasNext) and retrieving the next element (next). The\n * ArrayIterator class provides a concrete implementation of the iterator for an array\n * of books. The BookCollection class implements the Iterable interface, which allows\n * it to create iterators for iterating over its collection of books. Finally, in the\n * client code, we create a BookCollection, add books to it, and iterate over the\n * collection using the iterator, printing each book's name.\n */"}]},{"title":"Mediator","examples":[{"codeFile":"patterns/behavioural/mediator/example","code":"<?php\n\ninterface ChatMediator {\n    public function sendMessage($message, User $user);\n}\n\nclass ChatRoom implements ChatMediator {\n    public function sendMessage($message, User $user) {\n        echo \"[\" . $user->getName() . \"] sends message: \" . $message . \"\\n\";\n    }\n}\n\ninterface User {\n    public function send($message);\n    public function receive($message);\n    public function getName();\n}\n\nclass ChatUser implements User {\n    private $name;\n    private $mediator;\n\n    public function __construct($name, ChatMediator $mediator) {\n        $this->name = $name;\n        $this->mediator = $mediator;\n    }\n\n    public function send($message) {\n        echo \"[\" . $this->name . \"] sends message: \" . $message . \"\\n\";\n        $this->mediator->sendMessage($message, $this);\n    }\n\n    public function receive($message) {\n        echo \"[\" . $this->name . \"] received message: \" . $message . \"\\n\";\n    }\n\n    public function getName() {\n        return $this->name;\n    }\n}\n\nfunction main() {\n    $chatMediator = new ChatRoom();\n\n    $user1 = new ChatUser('User1', $chatMediator);\n    $user2 = new ChatUser('User2', $chatMediator);\n\n    $user1->send('Hello, User2!');\n    $user2->send('Hi, User1!');\n}\n\n/**\n * In this example, the Mediator pattern is used to facilitate communication between\n * users in a chat room. The ChatMediator interface defines a method sendMessage for\n * sending messages to users. The ChatRoom class provides a concrete implementation\n * of the mediator for managing communication between users in the chat room.\n *\n * The User interface defines methods send and receive for sending and receiving messages,\n * respectively, as well as a method getName for getting the user's name. The ChatUser\n * class implements the User interface and interacts with the mediator to send and\n * receive messages.\n *\n * In the client code, we create a chat room mediator and two chat users. Users can send\n * messages to each other by calling the send method, which delegates the message sending\n * to the mediator. When a message is received, the mediator distributes it to the\n * appropriate user's receive method.\n */\n\nmain();\n\n?>"}]},{"title":"Memento","examples":[{"codeFile":"patterns/behavioural/memento/example","code":"<?php\n\n// Originator class represents the object whose state needs to be saved and restored\nclass Editor {\n  private $text;\n\n  public function __construct($text) {\n    $this->text = $text;\n  }\n\n  public function setText($text) {\n    $this->text = $text;\n  }\n\n  public function getText() {\n    return $this->text;\n  }\n\n  // Creates a memento containing the current state of the editor\n  public function save() {\n    return new Memento($this->text);\n  }\n\n  // Restores the editor's state from a memento\n  public function restore(Memento $memento) {\n    $this->text = $memento->getState();\n  }\n}\n\n// Memento class represents the stored state of the editor\nclass Memento {\n  private $state;\n\n  public function __construct($state) {\n    $this->state = $state;\n  }\n\n  public function getState() {\n    return $this->state;\n  }\n}\n\n// Caretaker class is responsible for keeping track of multiple mementos\nclass History {\n  private $mementos = [];\n\n  // Adds a memento to the history\n  public function addMemento(Memento $memento) {\n    $this->mementos[] = $memento;\n  }\n\n  // Retrieves the most recent memento from the history\n  public function getLatestMemento() {\n    if (count($this->mementos) === 0) {\n      throw new Exception(\"No mementos available\");\n    }\n    return $this->mementos[count($this->mementos) - 1];\n  }\n}\n\n// Client code\nfunction main() {\n  $editor = new Editor(\"Initial text\");\n\n  // Create a history to store mementos\n  $history = new History();\n\n  // Add a memento to the history\n  $history->addMemento($editor->save());\n\n  // Modify the text\n  $editor->setText(\"Modified text\");\n\n  // Add another memento to the history\n  $history->addMemento($editor->save());\n\n  // Restore the editor's state to a previous memento\n  $editor->restore($history->getLatestMemento());\n\n  echo $editor->getText() . \"\\n\"; // Output: Modified text (restored from the previous state)\n}\n\n/**\n * In this example, the Editor class represents an object whose state can be modified. The save\n * method creates a memento containing the current state of the editor, and the restore method\n * restores the editor's state from a given memento.\n * \n * The Memento class represents the stored state of the editor at a particular point in time.\n * \n * The History class is responsible for maintaining a list of mementos. It provides methods \n * to add a memento to the history and retrieve the most recent memento.\n * \n * In the client code, we create an editor object and a history object. We modify the editor's \n * state, save it to a memento, modify it again, and then restore it to the previous state using \n * the memento stored in the history.\n */\n\nmain();\n\n?>"}]},{"title":"Observer","examples":[{"codeFile":"patterns/behavioural/observer/example","code":"```php\n<?php\n\ninterface Subject {\n    public function subscribe($observer);\n    public function unsubscribe($observer);\n    public function notify($data);\n}\n\nclass ConcreteSubject implements Subject {\n    private $observers = [];\n\n    public function subscribe($observer) {\n        $this->observers[] = $observer;\n    }\n\n    public function unsubscribe($observer) {\n        $index = array_search($observer, $this->observers, true);\n        if ($index !== false) {\n            unset($this->observers[$index]);\n        }\n    }\n\n    public function notify($data) {\n        foreach ($this->observers as $observer) {\n            $observer->update($data);\n        }\n    }\n}\n\ninterface Observer {\n    public function update($data);\n}\n\nclass ConcreteObserver implements Observer {\n    public function update($data) {\n        echo \"Observer received data: \".$data.PHP_EOL;\n    }\n}\n\n// Client code\n$subject = new ConcreteSubject();\n$observer1 = new ConcreteObserver();\n$observer2 = new ConcreteObserver();\n\n$subject->subscribe($observer1);\n$subject->subscribe($observer2);\n\n$subject->notify('Hello Observers!');\n\n$subject->unsubscribe($observer2);\n$subject->notify('Goodbye Observers!');\n\n/**\n * In this example, the Editor class represents an object whose state can be modified.\n * The save method creates a memento containing the current state of the editor, and\n * the restore method restores the editor's state from a given memento.\n *\n * The Memento class represents the stored state of the editor at a particular point in time.\n * The History class is responsible for maintaining a list of mementos. It provides\n * methods to add a memento to the history and retrieve the most recent memento.\n *\n * In the client code, we create an editor object and a history object. We modify the\n * editor's state, save it to a memento, modify it again, and then restore it to the\n * previous state using the memento stored in the history.\n */\n```"}]},{"title":"State","examples":[{"codeFile":"patterns/behavioural/state/example","code":"```php\n<?php\n\ninterface TrafficLightState {\n    public function changeState(TrafficLight $trafficLight);\n}\n\nclass RedState implements TrafficLightState {\n    public function changeState(TrafficLight $trafficLight) {\n        echo \"Traffic light is now RED. Stop!\\n\";\n        // Transition to the next state (Yellow) after a certain duration\n        sleep(3);\n        $trafficLight->setState(new YellowState());\n    }\n}\n\nclass YellowState implements TrafficLightState {\n    public function changeState(TrafficLight $trafficLight) {\n        echo \"Traffic light is now YELLOW. Prepare to stop or proceed with caution.\\n\";\n        // Transition to the next state (Green) after a certain duration\n        sleep(2);\n        $trafficLight->setState(new GreenState());\n    }\n}\n\nclass GreenState implements TrafficLightState {\n    public function changeState(TrafficLight $trafficLight) {\n        echo \"Traffic light is now GREEN. Go!\\n\";\n        // Transition to the next state (Red) after a certain duration\n        sleep(4);\n        $trafficLight->setState(new RedState());\n    }\n}\n\nclass TrafficLight {\n    private $state;\n\n    public function __construct() {\n        // Initial state is Red\n        $this->state = new RedState();\n    }\n\n    public function setState(TrafficLightState $state) {\n        $this->state = $state;\n        $this->state->changeState($this);\n    }\n}\n\n// Client code\nfunction main() {\n    $trafficLight = new TrafficLight();\n\n    // Simulate traffic light behavior by changing its state\n    $trafficLight->setState(new GreenState());\n}\n\nmain();\n```"}]},{"title":"Strategy","examples":[{"codeFile":"patterns/behavioural/strategy/example","code":"```php\n<?php\n\n// Interface defining the common behavior for all payment strategies\ninterface PaymentStrategy {\n    public function pay($amount);\n}\n\n// Concrete strategy for processing payments via credit card\nclass CreditCardPaymentStrategy implements PaymentStrategy {\n    private $cardNumber;\n    private $expiryDate;\n    private $cvv;\n\n    public function __construct($cardNumber, $expiryDate, $cvv) {\n        $this->cardNumber = $cardNumber;\n        $this->expiryDate = $expiryDate;\n        $this->cvv = $cvv;\n    }\n\n    public function pay($amount) {\n        echo \"Processing credit card payment of \\$$amount with card number {$this->cardNumber}\\n\";\n        // Logic to process payment via credit card\n    }\n}\n\n// Concrete strategy for processing payments via PayPal\nclass PayPalPaymentStrategy implements PaymentStrategy {\n    private $email;\n    private $password;\n\n    public function __construct($email, $password) {\n        $this->email = $email;\n        $this->password = $password;\n    }\n\n    public function pay($amount) {\n        echo \"Processing PayPal payment of \\$$amount with email {$this->email}\\n\";\n        // Logic to process payment via PayPal\n    }\n}\n\n// Context class representing the payment processor\nclass PaymentProcessor {\n    private $paymentStrategy;\n\n    // Setter method to set the payment strategy dynamically\n    public function setPaymentStrategy(PaymentStrategy $paymentStrategy) {\n        $this->paymentStrategy = $paymentStrategy;\n    }\n\n    // Method to process payment using the selected strategy\n    public function processPayment($amount) {\n        if ($this->paymentStrategy) {\n            $this->paymentStrategy->pay($amount);\n        } else {\n            echo \"Payment strategy not set. Please select a payment method.\\n\";\n        }\n    }\n}\n\n// Client code\nfunction main() {\n    $paymentProcessor = new PaymentProcessor();\n\n    // Select a payment method (strategy) dynamically\n    $creditCardStrategy = new CreditCardPaymentStrategy(\"1234 5678 9012 3456\", \"12/25\", \"123\");\n    $paymentProcessor->setPaymentStrategy($creditCardStrategy);\n    $paymentProcessor->processPayment(100);\n\n    // Change payment method (strategy)\n    $payPalStrategy = new PayPalPaymentStrategy(\"example@example.com\", \"password\");\n    $paymentProcessor->setPaymentStrategy($payPalStrategy);\n    $paymentProcessor->processPayment(50);\n}\n\nmain();\n```"}]},{"title":"Template Method","examples":[{"codeFile":"patterns/behavioural/template-method/example","code":"<?php\n\nabstract class Breakfast {\n  // Template method\n  public function prepare(): void {\n    $this->boilWater();\n    $this->addIngredients();\n    $this->cook();\n    $this->serve();\n  }\n\n  // Abstract methods to be implemented by subclasses\n  abstract protected function addIngredients(): void;\n  abstract protected function cook(): void;\n\n  // Concrete methods\n  protected function boilWater(): void {\n    echo \"Boiling water...\\n\";\n  }\n\n  protected function serve(): void {\n    echo \"Breakfast is served!\\n\";\n  }\n}\n\nclass OmeletteBreakfast extends Breakfast {\n  protected function addIngredients(): void {\n    echo \"Adding eggs, cheese, and vegetables to the pan.\\n\";\n  }\n\n  protected function cook(): void {\n    echo \"Cooking the omelette until golden brown.\\n\";\n  }\n}\n\nclass PancakeBreakfast extends Breakfast {\n  protected function addIngredients(): void {\n    echo \"Mixing flour, eggs, milk, and sugar to make the batter.\\n\";\n  }\n\n  protected function cook(): void {\n    echo \"Pouring the batter onto the griddle and flipping until cooked.\\n\";\n  }\n}\n\n// Client code\necho \"Preparing Omelette Breakfast:\\n\";\n$omeletteBreakfast = new OmeletteBreakfast();\n$omeletteBreakfast->prepare();\n\necho \"\\nPreparing Pancake Breakfast:\\n\";\n$pancakeBreakfast = new PancakeBreakfast();\n$pancakeBreakfast->prepare();\n\n/**\n * In this example, we have an abstract class Breakfast representing the template method pattern. It defines\n * the steps of preparing breakfast in the prepare() method, which serves as the template method. The abstract\n * methods addIngredients() and cook() are placeholders for the specific steps that vary between different\n * types of breakfasts.\n *\n * Subclasses such as OmeletteBreakfast and PancakeBreakfast extend the Breakfast class and implement the\n * abstract methods to provide specific implementations for adding ingredients and cooking. The template\n * method prepare() orchestrates the sequence of steps required to prepare each type of breakfast.\n *\n */\n?>"}]},{"title":"Visitor","examples":[{"codeFile":"patterns/behavioural/visitor/example","code":"<?php\n\ninterface AnimalVisitor {\n  public function visitLion(Lion $lion);\n  public function visitElephant(Elephant $elephant);\n  public function visitGiraffe(Giraffe $giraffe);\n}\n\nclass AnimalFeeder implements AnimalVisitor {\n  public function visitLion(Lion $lion) {\n    echo \"Feeding meat to \" . $lion->getName() . \".\\n\";\n  }\n\n  public function visitElephant(Elephant $elephant) {\n    echo \"Feeding hay to \" . $elephant->getName() . \".\\n\";\n  }\n\n  public function visitGiraffe(Giraffe $giraffe) {\n    echo \"Feeding leaves to \" . $giraffe->getName() . \".\\n\";\n  }\n}\n\ninterface Animal {\n  public function accept(AnimalVisitor $visitor);\n}\n\nclass Lion implements Animal {\n  private $name;\n\n  public function __construct($name) {\n    $this->name = $name;\n  }\n\n  public function getName() {\n    return $this->name;\n  }\n\n  public function accept(AnimalVisitor $visitor) {\n    $visitor->visitLion($this);\n  }\n}\n\nclass Elephant implements Animal {\n  private $name;\n\n  public function __construct($name) {\n    $this->name = $name;\n  }\n\n  public function getName() {\n    return $this->name;\n  }\n\n  public function accept(AnimalVisitor $visitor) {\n    $visitor->visitElephant($this);\n  }\n}\n\nclass Giraffe implements Animal {\n  private $name;\n\n  public function __construct($name) {\n    $this->name = $name;\n  }\n\n  public function getName() {\n    return $this->name;\n  }\n\n  public function accept(AnimalVisitor $visitor) {\n    $visitor->visitGiraffe($this);\n  }\n}\n\nclass Zoo {\n  private $animals = [];\n\n  public function addAnimal(Animal $animal) {\n    $this->animals[] = $animal;\n  }\n\n  public function performOperation(AnimalVisitor $visitor) {\n    foreach ($this->animals as $animal) {\n      $animal->accept($visitor);\n    }\n  }\n}\n\n$zoo = new Zoo();\n$zoo->addAnimal(new Lion(\"Simba\"));\n$zoo->addAnimal(new Elephant(\"Dumbo\"));\n$zoo->addAnimal(new Giraffe(\"Melman\"));\n\n$feeder = new AnimalFeeder();\n$zoo->performOperation($feeder);\n\n?>"}]}],"patterns_creational":[{"title":"Factory Method","examples":[{"codeFile":"patterns/creational/factory-method/example","code":"<?php\n\ninterface Vehicle {\n  public function drive();\n}\n\nclass Car implements Vehicle {\n  public function drive() {\n    echo \"Driving a car...\\n\";\n  }\n}\n\nclass Truck implements Vehicle {\n  public function drive() {\n    echo \"Driving a truck...\\n\";\n  }\n}\n\nabstract class VehicleFactory {\n  abstract public function createVehicle(): Vehicle;\n\n  public function deliverVehicle() {\n    $vehicle = $this->createVehicle();\n    echo \"Delivering the vehicle...\\n\";\n    $vehicle->drive();\n  }\n}\n\nclass CarFactory extends VehicleFactory {\n  public function createVehicle(): Vehicle {\n    echo \"Creating a car...\\n\";\n    return new Car();\n  }\n}\n\nclass TruckFactory extends VehicleFactory {\n  public function createVehicle(): Vehicle {\n    echo \"Creating a truck...\\n\";\n    return new Truck();\n  }\n}\n\n$carFactory = new CarFactory();\n$carFactory->deliverVehicle();\n\n$truckFactory = new TruckFactory();\n$truckFactory->deliverVehicle();\n\n/*\n * The Vehicle interface defines a common interface for all vehicles, which includes a drive() method.\n *\n * The Car and Truck classes are concrete implementations of the Vehicle interface.\n *\n * The VehicleFactory class is an abstract class representing a creator. It declares the createVehicle() method,\n * which serves as the Factory Method for creating vehicles. The deliverVehicle() method is a common operation\n * that uses the Factory Method to create and deliver a vehicle.\n *\n * The CarFactory and TruckFactory classes are concrete implementations of the VehicleFactory class.\n * They override the createVehicle() method to create specific types of vehicles (i.e., cars and trucks).\n *\n */\n\n?>"}]},{"title":"Abstract Factory","examples":[{"codeFile":"patterns/creational/abstract-factory/example","code":"<?php\n\ninterface FurnitureFactory {\n  public function createChair(): Chair;\n  public function createTable(): Table;\n}\n\nclass ModernFurnitureFactory implements FurnitureFactory {\n  public function createChair(): Chair {\n    return new ModernChair();\n  }\n\n  public function createTable(): Table{\n    return new ModernTable();\n  }\n}\n\nclass VintageFurnitureFactory implements FurnitureFactory {\n  public function createChair(): Chair {\n    return new VintageChair();\n  }\n\n  public function createTable(): Table {\n    return new VintageTable();\n  }\n}\n\ninterface Chair {\n  public function sitOn();\n}\n\nclass ModernChair implements Chair {\n  public function sitOn() {\n    echo \"Sitting on a modern chair.\\n\";\n  }\n}\n\nclass VintageChair implements Chair {\n  public function sitOn() {\n    echo \"Sitting on a vintage chair.\\n\";\n  }\n}\n\ninterface Table {\n  public function putOn();\n}\n\nclass ModernTable implements Table {\n  public function putOn() {\n    echo \"Putting something on a modern table.\\n\";\n  }\n}\n\nclass VintageTable implements Table {\n  public function putOn() {\n    echo \"Putting something on a vintage table.\\n\";\n  }\n}\n\nfunction createFurniture(FurnitureFactory $factory) {\n  $chair = $factory->createChair();\n  $table = $factory->createTable();\n\n  echo \"Created furniture:\\n\";\n  $chair->sitOn();\n  $table->putOn();\n}\n\necho \"Creating modern furniture:\\n\";\ncreateFurniture(new ModernFurnitureFactory());\n\necho \"\\nCreating vintage furniture:\\n\";\ncreateFurniture(new VintageFurnitureFactory());\n\n/**\n * The FurnitureFactory interface declares methods for creating chairs and tables.\n *\n * Concrete factories (ModernFurnitureFactory and VintageFurnitureFactory) implement the\n * FurnitureFactory interface to produce modern and vintage furniture, respectively.\n *\n * The Chair interface declares a method for sitting on a chair, and concrete chair classes\n * (ModernChair and VintageChair) implement this interface.\n *\n * The Table interface declares a method for putting something on a table, and concrete table\n * classes (ModernTable and VintageTable) implement this interface.\n * The createFurniture function acts as a client and receives a FurnitureFactory as a parameter.\n * It creates a chair and a table using the factory and then performs actions on the created furniture.\n *\n */\n?>"}]},{"title":"Builder","examples":[{"codeFile":"patterns/creational/builder/example","code":"<?php\n\n/** The Computer class represents the product we want to build, which is a custom computer with\n *  various specifications like CPU, RAM, storage, GPU, and screen size.\n */\nclass Computer {\n    private $cpu;\n    private $ram;\n    private $storage;\n    private $gpu;\n    private $screenSize;\n\n    public function __construct($cpu, $ram, $storage, $gpu, $screenSize) {\n        $this->cpu = $cpu;\n        $this->ram = $ram;\n        $this->storage = $storage;\n        $this->gpu = $gpu;\n        $this->screenSize = $screenSize;\n    }\n\n    public function displaySpecs() {\n        echo \"CPU: \" . $this->cpu . \"\\n\";\n        echo \"RAM: \" . $this->ram . \" GB\\n\";\n        echo \"Storage: \" . $this->storage . \" GB\\n\";\n        echo \"GPU: \" . $this->gpu . \"\\n\";\n        echo \"Screen Size: \" . $this->screenSize . \" inches\\n\";\n    }\n}\n\n/** The ComputerBuilder interface defines methods for setting each component of the computer.\n */\ninterface ComputerBuilder {\n    public function setCPU($cpu);\n    public function setRAM($ram);\n    public function setStorage($storage);\n    public function setGPU($gpu);\n    public function setScreenSize($screenSize);\n    public function getResult();\n}\n\n/** The GamingComputerBuilder class is a concrete builder that implements the ComputerBuilder\n *  interface to construct a gaming computer with specific configurations.\n */\nclass GamingComputerBuilder implements ComputerBuilder {\n    private $computer;\n\n    public function __construct() {\n        $this->computer = new Computer(\"\", 0, 0, \"\", 0);\n    }\n\n    public function setCPU($cpu) {\n        $this->computer = new Computer($cpu, $this->computer->ram, $this->computer->storage, $this->computer->gpu, $this->computer->screenSize);\n    }\n\n    public function setRAM($ram) {\n        $this->computer = new Computer($this->computer->cpu, $ram, $this->computer->storage, $this->computer->gpu, $this->computer->screenSize);\n    }\n\n    public function setStorage($storage) {\n        $this->computer = new Computer($this->computer->cpu, $this->computer->ram, $storage, $this->computer->gpu, $this->computer->screenSize);\n    }\n\n    public function setGPU($gpu) {\n        $this->computer = new Computer($this->computer->cpu, $this->computer->ram, $this->computer->storage, $gpu, $this->computer->screenSize);\n    }\n\n    public function setScreenSize($screenSize) {\n        $this->computer = new Computer($this->computer->cpu, $this->computer->ram, $this->computer->storage, $this->computer->gpu, $screenSize);\n    }\n\n    public function getResult() {\n        return $this->computer;\n    }\n}\n\n/** The ComputerBuilderDirector class is responsible for directing the construction process using\n *  a builder.\n */\nclass ComputerBuilderDirector {\n    private $builder;\n\n    public function __construct(ComputerBuilder $builder) {\n        $this->builder = $builder;\n    }\n\n    public function constructGamingComputer() {\n        $this->builder->setCPU(\"Intel Core i9\");\n        $this->builder->setRAM(32);\n        $this->builder->setStorage(1000);\n        $this->builder->setGPU(\"NVIDIA GeForce RTX 3080\");\n        $this->builder->setScreenSize(27);\n    }\n}\n\n// Client code\n$gamingComputerBuilder = new GamingComputerBuilder();\n$director = new ComputerBuilderDirector($gamingComputerBuilder);\n$director->constructGamingComputer();\n$gamingComputer = $gamingComputerBuilder->getResult();\necho \"Gaming Computer Specifications:\\n\";\n$gamingComputer->displaySpecs();\n\n/**\n * The client code creates a GamingComputerBuilder, passes it to the director, and instructs the\n * director to construct a gaming computer. Finally, it retrieves the constructed gaming computer\n * and displays its specifications.\n */\n?>"}]},{"title":"Prototype","examples":[{"codeFile":"patterns/creational/prototype/example","code":"<?php\n\ninterface UserProfile {\n  public function clone();\n  public function customizeProfile($settings);\n  public function displayProfile();\n}\n\nclass DefaultUserProfile implements UserProfile {\n  private $username;\n  private $bio;\n  private $profilePicture;\n\n  public function __construct($username, $bio, $profilePicture) {\n    $this->username = $username;\n    $this->bio = $bio;\n    $this->profilePicture = $profilePicture;\n  }\n\n  public function clone() {\n    return new DefaultUserProfile($this->username, $this->bio, $this->profilePicture);\n  }\n\n  public function customizeProfile($settings) {\n    if (!empty($settings['username'])) {\n      $this->username = $settings['username'];\n    }\n    if (!empty($settings['bio'])) {\n      $this->bio = $settings['bio'];\n    }\n    if (!empty($settings['profilePicture'])) {\n      $this->profilePicture = $settings['profilePicture'];\n    }\n  }\n\n  public function displayProfile() {\n    echo \"Username: \" . $this->username . \"\\n\";\n    echo \"Bio: \" . $this->bio . \"\\n\";\n    echo \"Profile Picture: \" . $this->profilePicture . \"\\n\";\n  }\n}\n\n// Client code\n$defaultProfile = new DefaultUserProfile(\"user123\", \"Welcome to my profile!\", \"default.jpg\");\n\n// Clone the default profile to create a customized profile\n$customizedProfile = $defaultProfile->clone();\n$customizedProfile->customizeProfile(['bio' => \"I'm a software developer.\", 'profilePicture' => \"avatar.jpg\"]);\n\n// Display both profiles\necho \"Default Profile:\\n\";\n$defaultProfile->displayProfile();\n\necho \"\\nCustomized Profile:\\n\";\n$customizedProfile->displayProfile();\n\n/**\n * The UserProfile interface defines methods for cloning a profile, customizing profile settings, and\n * displaying the profile.\n *\n * The DefaultUserProfile class is a concrete implementation of the UserProfile interface. It represents\n * the default user profile with properties like username, bio, and profile picture. The clone()\n * method creates a copy of the profile, and the customizeProfile() method allows modifying profile\n * settings.\n *\n * The UserProfileSettings interface defines optional settings that can be customized in a user profile.\n *\n * In the client code, we create a default user profile and then clone it to create a customized profile\n * with updated settings. Both profiles can be displayed independently, demonstrating the use of the\n * Prototype pattern to create new objects by copying existing ones.\n */"}]},{"title":"Singleton","examples":[{"codeFile":"patterns/creational/singleton/example","code":"```php\n<?php\n\nclass Logger {\n    private static $instance;\n    private $logHistory = [];\n\n    // Private constructor to prevent instantiation from outside the class\n    private function __construct() {}\n\n    // Static method to retrieve the singleton instance\n    public static function getInstance(): Logger {\n        if (!self::$instance) {\n            self::$instance = new Logger();\n        }\n        return self::$instance;\n    }\n\n    // Method to log messages\n    public function log(string $message): void {\n        $timestamp = new \\DateTime();\n        $logEntry = '[' . $timestamp->format(DateTimeInterface::ATOM) . '] ' . $message;\n        $this->logHistory[] = $logEntry;\n        echo $logEntry . PHP_EOL;\n    }\n\n    // Method to retrieve log history\n    public function getLogHistory(): array {\n        return $this->logHistory;\n    }\n}\n\n// Client code\n$logger1 = Logger::getInstance();\n$logger2 = Logger::getInstance();\n\necho ($logger1 === $logger2) ? 'true' : 'false'; // Output: true, both references point to the same instance\necho PHP_EOL;\n\n$logger1->log(\"User logged in\");\n$logger2->log(\"Data saved to database\");\n\nprint_r($logger1->getLogHistory());\n\n/**\n * The Logger class has a private static $instance property that holds the single instance of the logger.\n *\n * The constructor is made private to prevent instantiation from outside the class.\n *\n * The getInstance() method is a static method that returns the singleton instance of the logger. It\n * ensures that only one instance of the logger is created throughout the application.\n *\n * The log() method logs a message along with a timestamp and adds the log entry to the $logHistory array.\n *\n * The getLogHistory() method retrieves the log history.\n *\n * In the client code, both $logger1 and $logger2 references point to the same instance of the logger\n * obtained using the getInstance() method.\n *\n * Logging messages using either $logger1 or $logger2 will result in consistent logging behavior, and the\n * log history can be retrieved from either instance.\n */\n```"}]}],"patterns_structural":[{"title":"Adapter","examples":[{"codeFile":"patterns/structural/adapter/example","code":"<?php\n\n// Adaptee: Existing MP3 player\nclass Mp3Player {\n  public function playMp3($fileName) {\n    echo \"Playing MP3 file: $fileName\\n\";\n  }\n}\n\n// Target: Interface expected by the client (unified interface)\ninterface AudioPlayer {\n  public function play($fileName);\n}\n\n// Adapter: Converts OGG audio files to MP3 format\nclass OggToMp3Adapter implements AudioPlayer {\n  private $mp3Player;\n\n  public function __construct() {\n    $this->mp3Player = new Mp3Player();\n  }\n\n  public function play($fileName) {\n    // Convert OGG to MP3 and play using the MP3 player\n    echo \"Converting OGG file '$fileName' to MP3 format\\n\";\n    $mp3FileName = $this->convertToMp3($fileName);\n    $this->mp3Player->playMp3($mp3FileName);\n  }\n\n  private function convertToMp3($fileName) {\n    // Simulate conversion process (replace extension)\n    return str_replace('.ogg', '.mp3', $fileName);\n  }\n}\n\n// Client code\n$audioPlayer = new OggToMp3Adapter();\n\n// Play MP3 file\n$audioPlayer->play('audio1.mp3');\n\n// Play OGG file (automatically converted to MP3)\n$audioPlayer->play('audio2.ogg');\n\n/**\n * Mp3Player represents the existing audio player that can play MP3 files.\n *\n * AudioPlayer is the target interface that defines the unified interface expected by the\n * client application for playing audio files.\n *\n * OggToMp3Adapter is the adapter class that implements the AudioPlayer interface. It internally\n * uses the Mp3Player to play MP3 files but converts OGG files to MP3 format before delegating to\n * the Mp3Player.\n *\n * In the client code, the application interacts with the AudioPlayer interface, unaware of whether\n * it's playing MP3 or OGG files. When playing an OGG file, the adapter automatically converts it\n * to MP3 format before playing it using the Mp3Player.\n *\n */\n?>"}]},{"title":"Bridge","examples":[{"codeFile":"patterns/structural/bridge/example","code":"```php\n<?php\n\n// Implementor: Workshop\ninterface Workshop {\n    public function work();\n}\n\n// Concrete Implementor: Paint Workshop\nclass PaintWorkshop implements Workshop {\n    public function work() {\n        echo 'Painting vehicle' . PHP_EOL;\n    }\n}\n\n// Concrete Implementor: Repair Workshop\nclass RepairWorkshop implements Workshop {\n    public function work() {\n        echo 'Repairing vehicle' . PHP_EOL;\n    }\n}\n\n// Abstraction: Vehicle\nabstract class Vehicle {\n    protected $workshop;\n\n    public function __construct(Workshop $workshop) {\n        $this->workshop = $workshop;\n    }\n\n    abstract public function manufacture();\n}\n\n// Refined Abstraction: Car\nclass Car extends Vehicle {\n    public function manufacture() {\n        echo 'Manufacturing car.' . PHP_EOL;\n        $this->workshop->work();\n    }\n}\n\n// Refined Abstraction: Truck\nclass Truck extends Vehicle {\n    public function manufacture() {\n        echo 'Manufacturing truck.' . PHP_EOL;\n        $this->workshop->work();\n    }\n}\n\n// Client code\n$car = new Car(new PaintWorkshop());\n$car->manufacture(); // Output: Manufacturing car. Painting vehicle\n\n$truck = new Truck(new RepairWorkshop());\n$truck->manufacture(); // Output: Manufacturing truck. Repairing vehicle\n\n/**\n * The Vehicle class represents the abstraction, which is extended by Car and Truck.\n *\n * The Workshop interface represents the implementor, defining the work method.\n *\n * PaintWorkshop and RepairWorkshop are concrete implementations of the Workshop interface.\n *\n * Each vehicle can be associated with a specific workshop using composition, and it delegates the work to that workshop.\n */\n```"}]},{"title":"Composite","examples":[{"codeFile":"patterns/structural/composite/example","code":"<?php\n\ninterface Department {\n  public function getName();\n  public function getEmployees();\n}\n\nclass IndividualDepartment implements Department {\n  private $name;\n  private $employees;\n\n  public function __construct($name, $employees) {\n    $this->name = $name;\n    $this->employees = $employees;\n  }\n\n  public function getName() {\n    return $this->name;\n  }\n\n  public function getEmployees() {\n    return $this->employees;\n  }\n}\n\nclass CompositeDepartment implements Department {\n  private $name;\n  private $departments;\n\n  public function __construct($name) {\n    $this->name = $name;\n    $this->departments = [];\n  }\n\n  public function getName() {\n    return $this->name;\n  }\n\n  public function addDepartment($department) {\n    $this->departments[] = $department;\n  }\n\n  public function removeDepartment($department) {\n    $index = array_search($department, $this->departments);\n    if ($index !== false) {\n      unset($this->departments[$index]);\n    }\n  }\n\n  public function getEmployees() {\n    $employees = [];\n    foreach ($this->departments as $department) {\n      $employees = array_merge($employees, $department->getEmployees());\n    }\n    return $employees;\n  }\n}\n\n// Client code\n$salesDepartment = new IndividualDepartment('Sales Department', ['John', 'Alice', 'Bob']);\n$marketingDepartment = new IndividualDepartment('Marketing Department', ['Emily', 'David']);\n$engineeringDepartment = new IndividualDepartment('Engineering Department', ['Michael', 'Sarah', 'Chris']);\n\n$headDepartment = new CompositeDepartment('Head Department');\n$headDepartment->addDepartment($salesDepartment);\n$headDepartment->addDepartment($marketingDepartment);\n\n$parentEngineeringDepartment = new CompositeDepartment('Parent Engineering Department');\n$parentEngineeringDepartment->addDepartment($engineeringDepartment);\n\n$rootDepartment = new CompositeDepartment('Root Department');\n$rootDepartment->addDepartment($headDepartment);\n$rootDepartment->addDepartment($parentEngineeringDepartment);\n\n// Get all employees in the root department\necho 'Employees in the root department:' . PHP_EOL;\nprint_r($rootDepartment->getEmployees());\n\n/**\n * The Department interface defines the common methods for both individual departments and composite departments.\n *\n * IndividualDepartment represents an individual department with a name and a list of employees.\n *\n * CompositeDepartment represents a composite department that can contain sub-departments. It maintains a\n * list of departments and delegates the getEmployees method to its sub-departments recursively.\n *\n * The client code creates a hierarchical structure of departments and retrieves all employees from the root department.\n */\n\n?>"}]},{"title":"Decorator","examples":[{"codeFile":"patterns/structural/decorator/example","code":"```php\n<?php\n\n// Component: Notification\ninterface Notification {\n  public function send(): string;\n}\n\n// Concrete Component: Base Notification\nclass BaseNotification implements Notification {\n  public function send(): string {\n    return 'Base notification: You have a new message!';\n  }\n}\n\n// Decorator: Notification Decorator\nabstract class NotificationDecorator implements Notification {\n  protected $notification;\n\n  public function __construct(Notification $notification) {\n    $this->notification = $notification;\n  }\n\n  public function send(): string {\n    return $this->notification->send();\n  }\n}\n\n// Concrete Decorator: Sound Notification\nclass SoundNotificationDecorator extends NotificationDecorator {\n  public function send(): string {\n    return parent::send() . \" (Sound notification: Ding!)\";\n  }\n}\n\n// Concrete Decorator: Priority Notification\nclass PriorityNotificationDecorator extends NotificationDecorator {\n  public function send(): string {\n    return parent::send() . \" (Priority notification: High priority!)\";\n  }\n}\n\n// Client code\n$baseNotification = new BaseNotification();\necho $baseNotification->send() . \"\\n\";\n\n$soundNotification = new SoundNotificationDecorator($baseNotification);\necho $soundNotification->send() . \"\\n\";\n\n$priorityNotification = new PriorityNotificationDecorator($baseNotification);\necho $priorityNotification->send() . \"\\n\";\n\n$soundAndPriorityNotification = new PriorityNotificationDecorator(new SoundNotificationDecorator($baseNotification));\necho $soundAndPriorityNotification->send() . \"\\n\";\n\n/**\n * The Notification interface defines the common method for sending notifications.\n *\n * BaseNotification represents the base notification without any additional features.\n *\n * NotificationDecorator is an abstract class that serves as the base class for concrete decorators.\n * It holds a reference to the wrapped notification.\n *\n * SoundNotificationDecorator adds sound notification functionality to the base notification.\n *\n * PriorityNotificationDecorator adds priority notification functionality to the base notification.\n *\n * The client code demonstrates how we can dynamically add sound notification, priority notification,\n * or both to the base notification. Each decorator enhances the behavior of the base notification\n * without modifying its implementation.\n */\n```"}]},{"title":"Facade","examples":[{"codeFile":"patterns/structural/facade/example","code":"```php\n<?php\n\n// Subsystem: Flight Booking\nclass FlightBookingSystem {\n  public function bookFlight($origin, $destination) {\n    return \"Flight booked from $origin to $destination\";\n  }\n}\n\n// Subsystem: Hotel Booking\nclass HotelBookingSystem {\n  public function bookHotel($location, $checkInDate, $checkOutDate) {\n    return \"Hotel booked at $location from \" . $checkInDate->format('Y-m-d') . \" to \" . $checkOutDate->format('Y-m-d');\n  }\n}\n\n// Subsystem: Car Rental\nclass CarRentalSystem {\n  public function rentCar($location, $startDate, $endDate) {\n    return \"Car rented at $location from \" . $startDate->format('Y-m-d') . \" to \" . $endDate->format('Y-m-d');\n  }\n}\n\n// Facade: TravelFacade\nclass TravelFacade {\n  private $flightBookingSystem;\n  private $hotelBookingSystem;\n  private $carRentalSystem;\n\n  public function __construct() {\n    $this->flightBookingSystem = new FlightBookingSystem();\n    $this->hotelBookingSystem = new HotelBookingSystem();\n    $this->carRentalSystem = new CarRentalSystem();\n  }\n\n  public function bookTravel($origin, $destination, $location, $checkInDate, $checkOutDate, $startDate, $endDate) {\n    $flightDetails = $this->flightBookingSystem->bookFlight($origin, $destination);\n    $hotelDetails = $this->hotelBookingSystem->bookHotel($location, $checkInDate, $checkOutDate);\n    $carDetails = $this->carRentalSystem->rentCar($location, $startDate, $endDate);\n\n    return $flightDetails . \"\\n\" . $hotelDetails . \"\\n\" . $carDetails;\n  }\n}\n\n// Client code\n$travelFacade = new TravelFacade();\n$bookingDetails = $travelFacade->bookTravel('New York', 'Los Angeles', 'Hilton', new DateTime('2023-12-15'), new DateTime('2023-12-20'), new DateTime('2023-12-15'), new DateTime('2023-12-20'));\necho $bookingDetails;\n\n/**\n * The FlightBookingSystem, HotelBookingSystem, and CarRentalSystem classes represent the\n * subsystems of flight booking, hotel booking, and car rental, respectively.\n *\n * The TravelFacade class provides a simplified interface for booking a complete travel\n * package. It encapsulates the complexities of interacting with the subsystems.\n *\n * The client code interacts with the TravelFacade to book a complete travel package without\n * directly interacting with the subsystems.\n */\n```"}]},{"title":"Flyweight","examples":[{"codeFile":"patterns/structural/flyweight/example","code":"```php\n<?php\n\n// Flyweight: Character\nclass Character {\n    private $character;\n\n    public function __construct($character) {\n        $this->character = $character;\n    }\n\n    public function display($font, $size) {\n        return \"Character: {$this->character}, Font: {$font}, Size: {$size}\";\n    }\n}\n\n// Flyweight Factory: CharacterFactory\nclass CharacterFactory {\n    private $characters = [];\n\n    public function getCharacter($character) {\n        if (!isset($this->characters[$character])) {\n            $this->characters[$character] = new Character($character);\n        }\n\n        return $this->characters[$character];\n    }\n}\n\n// Client code\n$characterFactory = new CharacterFactory();\n\n// Text document\n$text = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n\n// Rendering text with flyweight characters\n$renderedText = [];\n\nforeach (str_split($text) as $char) {\n    $character = $characterFactory->getCharacter($char);\n    $renderedText[] = $character->display('Arial', 12); // Assume same font and size for simplicity\n}\n\n// Displaying rendered text\necho implode(\"\\n\", $renderedText);\n\n\n/**\n * The Character class represents the flyweight object for a character. It contains intrinsic\n * state (the character itself).\n *\n * The CharacterFactory class acts as a flyweight factory, creating and managing flyweight\n * objects. It ensures that each character is shared among multiple instances.\n *\n * In the client code, we create a text document and render it using flyweight characters.\n * Instead of creating a new character object for each character in the text, we retrieve\n * existing flyweight characters from the factory, saving memory and improving performance.\n */\n```"}]},{"title":"Proxy","examples":[{"codeFile":"patterns/structural/proxy/example","code":"```php\n<?php\n\n// Subject: Interface representing the common behavior of RealSubject and Proxy\ninterface IHttpServer {\n    public function request(string $url): string;\n}\n\n// RealSubject: The actual HTTP server implementation\nclass HttpServer implements IHttpServer {\n    public function request(string $url): string {\n        // Simulating HTTP request to the actual server\n        return \"Response from server for URL: {$url}\";\n    }\n}\n\n// Proxy: Proxy server that intercepts requests before forwarding them to the real server\nclass ProxyServer implements IHttpServer {\n    private $httpServer;\n\n    public function __construct() {\n        $this->httpServer = new HttpServer();\n    }\n\n    public function request(string $url): string {\n        // Additional logic can be added here, e.g., caching, access control, logging\n        echo \"Proxy: Intercepted request for URL: {$url}\\n\";\n\n        // Forward the request to the real server\n        $response = $this->httpServer->request($url);\n\n        // Additional processing on the response can be done here\n\n        return $response;\n    }\n}\n\n// Client code\nfunction testProxy() {\n    $proxy = new ProxyServer();\n\n    // Client sends a request to the proxy server\n    $response = $proxy->request(\"https://example.com\");\n\n    echo $response;\n}\n\n// Test the proxy\ntestProxy();\n\n/**\n * The IHttpServer interface defines the common behavior for both the HttpServer and ProxyServer classes.\n *\n * The HttpServer class represents the real HTTP server implementation. It implements the request method\n * to send HTTP requests to the actual server.\n *\n * The ProxyServer class acts as a proxy server. It intercepts requests before forwarding them to the real\n * server. The request method of the proxy performs additional tasks such as logging, caching, or access\n * control before delegating the request to the real server.\n *\n * In the client code, we instantiate a ProxyServer object and send a request to it. The proxy intercepts\n * the request, performs any necessary processing, and then forwards the request to the real server.\n * Finally, it returns the response to the client.\n */\n```"}]}]},"principles":{"principles_solid":[{"title":"Single Responsibility","examples":[{"title":"Good Example","codeFile":"principles/solid/single-responsibility/good-example","code":"<?php\n\n// Employee class responsible only for storing employee data\nclass Employee {\n  private $name;\n  private $position;\n  private $salary;\n\n  public function __construct($name, $position, $salary) {\n    $this->name = $name;\n    $this->position = $position;\n    $this->salary = $salary;\n  }\n\n  public function getName() {\n    return $this->name;\n  }\n\n  public function getPosition() {\n    return $this->position;\n  }\n\n  public function getSalary() {\n    return $this->salary;\n  }\n}\n\n// Printer class responsible only for printing employee information\nclass EmployeePrinter {\n  public function print(Employee $employee) {\n    echo \"Name: \" . $employee->getName() . \"\\n\";\n    echo \"Position: \" . $employee->getPosition() . \"\\n\";\n    echo \"Salary: \" . $employee->getSalary() . \"\\n\";\n  }\n}\n\n// Usage\n$employee = new Employee(\"John Doe\", \"Software Engineer\", 50000);\n$printer = new EmployeePrinter();\n$printer->print($employee);\n\n?>"},{"title":"Bad Example","codeFile":"principles/solid/single-responsibility/bad-example","code":"<?php\n\nclass Employee {\n    private $name;\n    private $position;\n    private $salary;\n\n    public function __construct($name, $position, $salary) {\n        $this->name = $name;\n        $this->position = $position;\n        $this->salary = $salary;\n    }\n\n    // Method responsible for storing employee data and printing employee information\n    public function print() {\n        echo \"Name: \" . $this->name . \"\\n\";\n        echo \"Position: \" . $this->position . \"\\n\";\n        echo \"Salary: \" . $this->salary . \"\\n\";\n    }\n}\n\n// Usage\n$employee = new Employee(\"John Doe\", \"Software Engineer\", 50000);\n$employee->print();\n\n?>"}]},{"title":"Open-Closed","examples":[{"title":"Good Example","codeFile":"principles/solid/open-closed/good-example","code":"```php\n<?php\n\nabstract class Shape {\n  // Must be implemented in subclasses\n  abstract public function computeArea(): float;\n}\n\nclass Rectangle extends Shape {\n  private float $width;\n  private float $height;\n\n  public function __construct(float $width, float $height) {\n    $this->width = $width;\n    $this->height = $height;\n  }\n\n  public function computeArea(): float {\n    return $this->width * $this->height;\n  }\n}\n\nclass Circle extends Shape {\n  private float $radius;\n\n  public function __construct(float $radius) {\n    $this->radius = $radius;\n  }\n\n  public function computeArea(): float {\n    return pi() * pow($this->radius, 2);\n  }\n}\n\n?>\n```"},{"title":"Bad Example","codeFile":"principles/solid/open-closed/bad-example","code":"```php\n<?php\n\n// Rectangle class\nclass Rectangle {\n  public $width;\n  public $height;\n\n  public function __construct($width, $height) {\n    $this->width = $width;\n    $this->height = $height;\n  }\n}\n\n// Circle class\nclass Circle {\n  public $radius;\n\n  public function __construct($radius) {\n    $this->radius = $radius;\n  }\n}\n\n// AreaCalculator class\nclass AreaCalculator {\n  public function computeArea($shape) {\n    // Check if shape is an instance of Rectangle\n    if ($shape instanceof Rectangle) {\n      return $shape->width * $shape->height;\n    }\n    // Check if shape is an instance of Circle\n    else if ($shape instanceof Circle) {\n      return pi() * $shape->radius * $shape->radius;\n    }\n\n    return 0;\n  }\n}\n\n```"}]},{"title":"Liskov Substitution","examples":[{"title":"Good Example","codeFile":"principles/solid/liskov-substitution/good-example","code":"<?php\n\nclass Bird {\n    // Birds implement a flying method\n    public function fly() {\n        echo \"Bird is flying\\n\";\n    }\n}\n\nclass Duck extends Bird {\n    // Ducks can also quack, besides flying\n    public function quack() {\n        echo \"Duck is quacking\\n\";\n    }\n}\n\nclass Goose extends Bird {\n    // It seems there was a mistake in the original example's comments: Goose should probably have its own unique behavior\n    // For consistency with the example, keeping the swimming behavior named incorrectly as Goose should actually be a Penguin or similar\n    public function swim() {\n        echo \"Penguin is swimming\\n\";\n    }\n}\n\nfunction makeBirdFly(Bird $bird) {\n    // This function expects a Bird object and calls its fly method\n    $bird->fly();\n}\n\n$duck = new Duck();\n$penguin = new Goose();\n\nmakeBirdFly($duck);     // Output: Bird is flying\nmakeBirdFly($penguin);  // Output: Bird is flying\n\n?>"},{"title":"Bad Example","codeFile":"principles/solid/liskov-substitution/bad-example","code":"<?php\n\nabstract class Bird {\n  public function fly() {\n    // Implementation of flying\n  }\n}\n\nclass Ostrich extends Bird {\n  public function fly() {\n    throw new Exception(\"Can't fly\");  // Ostrich, being a Bird, should not alter the expected behavior of the fly method\n  }\n}\n\n?>"}]},{"title":"Interface Segregation","examples":[{"title":"Good Example","codeFile":"principles/solid/interface-segregation/good-example","code":"<?php\n\ninterface Printer {\n  public function printDocument();\n}\n\ninterface Fax {\n  public function faxDocument();\n}\n\ninterface Scanner {\n  public function scanDocument();\n}\n\nclass SimplePrinter implements Printer {\n  public function printDocument() {\n    // Printing document...\n    echo \"Printing document...\";\n  }\n}\n\nclass MultifunctionalPrinter implements Printer, Fax, Scanner {\n  public function printDocument() {\n    // Printing document...\n    echo \"Printing document...\";\n  }\n\n  public function faxDocument() {\n    // Faxing document...\n    echo \"Faxing document...\";\n  }\n\n  public function scanDocument() {\n    // Scanning document...\n    echo \"Scanning document...\";\n  }\n}"},{"title":"Bad Example","codeFile":"principles/solid/interface-segregation/bad-example","code":"```php\n<?php\n\n// Interface segregation - Good example in PHP\n\ninterface Printer {\n    public function printDocument();\n}\n\ninterface Fax {\n    public function faxDocument();\n}\n\ninterface Scanner {\n    public function scanDocument();\n}\n\n// OldPrinter only implements Printer as it can only print.\nclass OldPrinter implements Printer {\n    public function printDocument() {\n        echo \"Printing document...\";\n    }\n}\n\n?>\n```"}]},{"title":"Dependency Inversion","examples":[{"title":"Good Example","codeFile":"principles/solid/interface-segregation/good-example","code":"<?php\n\ninterface Printer {\n  public function printDocument();\n}\n\ninterface Fax {\n  public function faxDocument();\n}\n\ninterface Scanner {\n  public function scanDocument();\n}\n\nclass SimplePrinter implements Printer {\n  public function printDocument() {\n    // Printing document...\n    echo \"Printing document...\";\n  }\n}\n\nclass MultifunctionalPrinter implements Printer, Fax, Scanner {\n  public function printDocument() {\n    // Printing document...\n    echo \"Printing document...\";\n  }\n\n  public function faxDocument() {\n    // Faxing document...\n    echo \"Faxing document...\";\n  }\n\n  public function scanDocument() {\n    // Scanning document...\n    echo \"Scanning document...\";\n  }\n}"},{"title":"Bad Example","codeFile":"principles/solid/interface-segregation/bad-example","code":"```php\n<?php\n\n// Interface segregation - Good example in PHP\n\ninterface Printer {\n    public function printDocument();\n}\n\ninterface Fax {\n    public function faxDocument();\n}\n\ninterface Scanner {\n    public function scanDocument();\n}\n\n// OldPrinter only implements Printer as it can only print.\nclass OldPrinter implements Printer {\n    public function printDocument() {\n        echo \"Printing document...\";\n    }\n}\n\n?>\n```"}]}],"principles_other":[{"title":"Don't Repeat Yourself (DRY)","examples":[{"title":"Good Example","codeFile":"principles/other/dry/good-example","code":"<?php\n\n// Using default parameters for repeated logic\nfunction addTax(float $price, float $rate = 0.05): float {\n    return $price + ($price * $rate);\n}\n\n?>"},{"title":"Bad Example","codeFile":"principles/other/dry/bad-example","code":"<?php\n\n// Function to add tax to a price\nfunction addTax($price, $type) {\n    $taxRate = 0.05; // General tax rate for all items\n    return $price + ($price * $taxRate);\n}\n\n// Calculating tax for food\n$foodPriceWithTax = addTax(100, 'food');\n\n// Calculating tax for electronics\n$electronicsPriceWithTax = addTax(200, 'electronics');\n\n?>"}]},{"title":"Keep It Simple Stupid (KISS)","examples":[{"title":"Good Example","codeFile":"principles/other/kiss/good-example","code":"<?php\n\n// Function to check if a number is even\nfunction isEven($num) {\n    return $num % 2 === 0;\n}\n\n?>"},{"title":"Bad Example","codeFile":"principles/other/kiss/bad-example","code":"<?php\n// there is no need for absolute value here\nfunction isEven($num) {\n    return $num % 2 === 0;\n}\n?>"}]},{"title":"You Aren't Gonna Need It (YAGNI)","examples":[{"codeFile":"principles/other/yagni/bad-example","code":"<?php\n\nclass Calculator {\n  public function add($a, $b) {\n    return $a + $b;\n  }\n\n  // Do not define methods unless they are used\n\n  public function multiply($a, $b) {\n    return $a * $b;\n  }\n\n  public function divide($a, $b) {\n    if ($b === 0) {\n      throw new Exception(\"Division by zero is not allowed.\");\n    }\n    return $a / $b;\n  }\n\n  public function subtract($a, $b) {\n    return $a - $b;\n  }\n}\n\n?>"}]},{"title":"Law of Demeter (Principle of Least Knowledge)","examples":[{"title":"Good Example","codeFile":"principles/other/demeter/good-example","code":"```php\n<?php\nclass Wallet {\n  private $money;\n\n  // Constructor initializes the wallet with some amount of money\n  public function __construct() {\n    $this->money = 100;\n  }\n\n  // Method to get the amount of money in the wallet\n  public function getAmount() {\n    return $this->money;\n  }\n}\n\nclass Person {\n  private $wallet;\n\n  // Constructor initializes person with a Wallet object\n  public function __construct() {\n    $this->wallet = new Wallet();\n  }\n\n  // Method to retrieve the amount of money from the person's wallet\n  public function getMoneyAmount() {\n    return $this->wallet->getAmount();\n  }\n}\n\nfunction purchase($item, $buyer) {\n  // Checks if the buyer has enough money to purchase the item\n  if ($buyer->getMoneyAmount() >= $item['price']) {\n    // Purchase logic...\n  }\n}\n```"},{"title":"Bad Example","codeFile":"principles/other/demeter/bad-example","code":"```php\n<?php\n\nclass Wallet {\n    public $money;\n\n    public function __construct() {\n        $this->money = [\"amount\" => 100];\n    }\n\n    // To adhere to the Law of Demeter, provide a method to check the balance\n    public function hasEnoughMoney($amount) {\n        return $this->money[\"amount\"] >= $amount;\n    }\n}\n\nclass Person {\n    private $wallet;\n\n    public function __construct() {\n        $this->wallet = new Wallet();\n    }\n\n    // To adhere to the Law of Demeter, provide a method to interact with the wallet balance\n    public function canAfford($amount) {\n        return $this->wallet->hasEnoughMoney($amount);\n    }\n}\n\nfunction purchase($item, $buyer) {\n    // Use the provided methods to check if the purchase can proceed, adhering to the Law of Demeter\n    if ($buyer->canAfford($item[\"price\"])) { /* ... */ }\n}\n\n?>\n```"}]},{"title":"Separation of Concerns","examples":[{"title":"Good Example","codeFile":"principles/other/separation/good-example","code":"```php\n<?php\n// Authentication service\nclass AuthenticationService {\n  public function login($username, $password) {\n    // Authentication logic here\n    return true; // Dummy implementation\n  }\n\n  public function logout() {\n    // Logout logic here\n  }\n}\n\n// Data service\nclass DataService {\n  public function fetchData() {\n    // Data retrieval logic here\n    return array(); // Dummy implementation\n  }\n}\n\n/**\n * - `AuthenticationService` and `DataService` are responsible for handling authentication and data retrieval, respectively.\n * - `UserController` and `DataController` serve as intermediaries between the HTTP layer (not shown) and the services.\n * - Each component has a single responsibility, promoting modularity, testability, and maintainability.\n *\n */\n\n// User controller\nclass UserController {\n  private $authService;\n\n  public function __construct(AuthenticationService $authService) {\n    $this->authService = $authService;\n  }\n\n  public function loginUser($username, $password) {\n    return $this->authService->login($username, $password);\n  }\n\n  public function logoutUser() {\n    $this->authService->logout();\n  }\n}\n\n// Data controller\nclass DataController {\n  private $dataService;\n\n  public function __construct(DataService $dataService) {\n    $this->dataService = $dataService;\n  }\n\n  public function getData() {\n    return $this->dataService->fetchData();\n  }\n}\n\n// Usage\n$authService = new AuthenticationService();\n$dataService = new DataService();\n\n$userController = new UserController($authService);\n$dataController = new DataController($dataService);\n\n// Simulate user login/logout\n$userController->loginUser(\"username\", \"password\");\n$userController->logoutUser();\n\n// Retrieve data\n$data = $dataController->getData();\necho \"<pre>\";\nprint_r($data);\necho \"</pre>\";\n```"},{"title":"Bad Example","codeFile":"principles/other/separation/bad-example","code":"```php\n<?php\n\n// Authentication service\nclass AuthenticationService {\n    public function login($username, $password) {\n        // Authentication logic here\n        return true; // Dummy implementation\n    }\n\n    public function logout() {\n        // Logout logic here\n    }\n}\n\n// Data service\nclass DataService {\n    public function fetchData() {\n        // Data retrieval logic here\n        return []; // Dummy implementation\n    }\n}\n\n/**\n * The `CombinedController` class is responsible for both user authentication and data retrieval.\n * The loginUser method not only handles authentication but also retrieves user data directly\n * from the `DataService`, violating the Single Responsibility Principle and mixing concerns.\n * This violates the principle of Separation of Concerns and makes the code harder to maintain, test, and understand.\n */\nclass CombinedController {\n    private $authService;\n    private $dataService;\n\n    public function __construct(AuthenticationService $authService, DataService $dataService) {\n        $this->authService = $authService;\n        $this->dataService = $dataService;\n    }\n\n    public function loginUser($username, $password) {\n        // Authentication logic here\n        $isAuthenticated = $this->authService->login($username, $password);\n        if ($isAuthenticated) {\n            // Retrieve user data (mixing concerns)\n            $userData = $this->dataService->fetchData();\n            echo print_r($userData, true);\n        }\n        return $isAuthenticated;\n    }\n\n    public function logoutUser() {\n        // Logout logic here\n        $this->authService->logout();\n    }\n}\n\n// Usage\n$authService = new AuthenticationService();\n$dataService = new DataService();\n\n$combinedController = new CombinedController($authService, $dataService);\n\n// Simulate user login/logout\n$combinedController->loginUser(\"username\", \"password\");\n$combinedController->logoutUser();\n\n```"}]}]}}